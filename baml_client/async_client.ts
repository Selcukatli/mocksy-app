/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, FunctionResult, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog, HTTPRequest } from "@boundaryml/baml"
import { toBamlError, BamlStream, BamlAbortError, Collector } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {Avatar, BasicResponse, DetailedResponse, Scene} from "./types"
import type TypeBuilder from "./type_builder"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

type TickReason = "Unknown";

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
  env?: Record<string, string | undefined>
  signal?: AbortSignal
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
}

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private streamClient: BamlStreamClient
  private httpRequest: AsyncHttpRequest
  private httpStreamRequest: AsyncHttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
    this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  get stream() {
    return this.streamClient
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  async AnalyzeAvatar(
      image: Image,
      __baml_options__?: BamlCallOptions
  ): Promise<types.Avatar> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.AnalyzeAvatar(
          image,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "AnalyzeAvatar",
        {
          "image": image
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.Avatar
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async DetailedAnalysisGPT5(
      query: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.DetailedResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.DetailedAnalysisGPT5(
          query,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "DetailedAnalysisGPT5",
        {
          "query": query
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.DetailedResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async DetailedAnalysisGPT5Nano(
      query: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.DetailedResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.DetailedAnalysisGPT5Nano(
          query,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "DetailedAnalysisGPT5Nano",
        {
          "query": query
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.DetailedResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateScene(
      scene_prompt: string,avatar: types.Avatar,art_style: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.Scene> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.GenerateScene(
          scene_prompt,avatar,art_style,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "GenerateScene",
        {
          "scene_prompt": scene_prompt,"avatar": avatar,"art_style": art_style
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.Scene
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ListGeneratorGPT5(
      topic: string,
      __baml_options__?: BamlCallOptions
  ): Promise<string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.ListGeneratorGPT5(
          topic,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "ListGeneratorGPT5",
        {
          "topic": topic
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ListGeneratorGPT5Nano(
      topic: string,
      __baml_options__?: BamlCallOptions
  ): Promise<string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.ListGeneratorGPT5Nano(
          topic,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "ListGeneratorGPT5Nano",
        {
          "topic": topic
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async SimpleStringGPT5(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.SimpleStringGPT5(
          input,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "SimpleStringGPT5",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async SimpleStringGPT5Nano(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Promise<string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.SimpleStringGPT5Nano(
          input,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "SimpleStringGPT5Nano",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async StructuredResponseGPT5(
      question: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.BasicResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.StructuredResponseGPT5(
          question,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "StructuredResponseGPT5",
        {
          "question": question
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.BasicResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async StructuredResponseGPT5Nano(
      question: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.BasicResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.StructuredResponseGPT5Nano(
          question,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "StructuredResponseGPT5Nano",
        {
          "question": question
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.BasicResponse
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

class BamlStreamClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.bamlOptions = bamlOptions || {}
  }

  
  AnalyzeAvatar(
      image: Image,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.Avatar, types.Avatar> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for AnalyzeAvatar", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "AnalyzeAvatar",
        {
          "image": image
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.Avatar, types.Avatar>(
        raw,
        (a): partial_types.Avatar => a,
        (a): types.Avatar => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetailedAnalysisGPT5(
      query: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.DetailedResponse, types.DetailedResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for DetailedAnalysisGPT5", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "DetailedAnalysisGPT5",
        {
          "query": query
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.DetailedResponse, types.DetailedResponse>(
        raw,
        (a): partial_types.DetailedResponse => a,
        (a): types.DetailedResponse => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetailedAnalysisGPT5Nano(
      query: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.DetailedResponse, types.DetailedResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for DetailedAnalysisGPT5Nano", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "DetailedAnalysisGPT5Nano",
        {
          "query": query
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.DetailedResponse, types.DetailedResponse>(
        raw,
        (a): partial_types.DetailedResponse => a,
        (a): types.DetailedResponse => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateScene(
      scene_prompt: string,avatar: types.Avatar,art_style: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.Scene, types.Scene> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for GenerateScene", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "GenerateScene",
        {
          "scene_prompt": scene_prompt,"avatar": avatar,"art_style": art_style
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.Scene, types.Scene>(
        raw,
        (a): partial_types.Scene => a,
        (a): types.Scene => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ListGeneratorGPT5(
      topic: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<string[], string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for ListGeneratorGPT5", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "ListGeneratorGPT5",
        {
          "topic": topic
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<string[], string[]>(
        raw,
        (a): string[] => a,
        (a): string[] => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ListGeneratorGPT5Nano(
      topic: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<string[], string[]> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for ListGeneratorGPT5Nano", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "ListGeneratorGPT5Nano",
        {
          "topic": topic
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<string[], string[]>(
        raw,
        (a): string[] => a,
        (a): string[] => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SimpleStringGPT5(
      input: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for SimpleStringGPT5", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "SimpleStringGPT5",
        {
          "input": input
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SimpleStringGPT5Nano(
      input: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<string, string> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for SimpleStringGPT5Nano", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "SimpleStringGPT5Nano",
        {
          "input": input
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<string, string>(
        raw,
        (a): string => a,
        (a): string => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  StructuredResponseGPT5(
      question: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.BasicResponse, types.BasicResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for StructuredResponseGPT5", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "StructuredResponseGPT5",
        {
          "question": question
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.BasicResponse, types.BasicResponse>(
        raw,
        (a): partial_types.BasicResponse => a,
        (a): types.BasicResponse => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  StructuredResponseGPT5Nano(
      question: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.BasicResponse, types.BasicResponse> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for StructuredResponseGPT5Nano", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "StructuredResponseGPT5Nano",
        {
          "question": question
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.BasicResponse, types.BasicResponse>(
        raw,
        (a): partial_types.BasicResponse => a,
        (a): types.BasicResponse => a,
        this.ctxManager.cloneContext(),
        options.signal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)