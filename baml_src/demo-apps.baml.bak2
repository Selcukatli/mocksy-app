// Demo App Generation BAML Domain
// Generates demo apps from styles for preview/showcase purposes

// ============================================
// IMPORTS & REUSED CLASSES
// ============================================

// Note: StyleConfig is defined in screenshots.baml and reused here

// ============================================
// DEMO APP CLASSES
// ============================================

class DemoAppOutput {
  app_name string @description("Short, catchy app name (1-3 words max, e.g., 'FitQuest', 'ZenJournal', 'ShadowVault')")
  app_subtitle string @description("App Store subtitle (30 characters MAX, including spaces). A single punchy phrase that captures the app's core value. Examples: 'Fitness made fun', 'Your mindful companion', 'Track workouts, earn rewards'. CRITICAL: Must be 30 characters or less.")
  app_description string @description("App Store style description (3-5 sentences, 40-80 words). Explain what the app does, key features, and benefits. Make it compelling and professional.")
  app_category string @description("App Store category. Choose from: Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference. Pick the single most relevant category that matches this app's primary purpose.")
  app_icon_prompt string @description("Complete text-to-image prompt for generating app icon (50-100 words). CRITICAL: Icon must be SIMPLE with LARGE, BOLD symbols recognizable at small sizes. Avoid tiny details, thin lines, or complex patterns. Should be 1024x1024 square, iOS-style icon design matching the app concept and style aesthetic.")
  style_guide string @description("Complete visual style guide describing the UI aesthetic, color palette, mood, typography approach, and design philosophy (3-5 sentences). MUST include specific color values (hex codes or names). Example: 'Clean minimal interface with soft sage green background (#E8F2E8) and muted gold accents (#D4AF37). Generous whitespace and subtle shadows (0px 2px 8px rgba(0,0,0,0.12)). Rounded corners throughout (12-16px) for friendly, approachable feel. Typography: Bold sans-serif headlines (28px/700 weight) paired with readable body text (16px/400 weight).' Should be comprehensive enough to generate consistent screens.")
}

class ImprovedDescriptionOutput {
  improved_description string @description("Combined app name and description in a single cohesive text. Format: 'AppName: Description here.' The app name should be 1-3 catchy words followed by a colon, then a polished App Store style description (3-5 sentences, 50-90 words). Example: 'DynamicDuo: Connect and share privately with your most trusted partner. Securely exchange photos and messages, keeping your communications off the public grid. Coordinate with encrypted chats and instant sharing. Your secret HQ for two.'")
  improved_style string @description("2-3 sentence visual style guide describing the UI aesthetic, mood, typography approach, and design philosophy that matches the app concept. Example: 'Modern dark interface with purple and cyan gradients. Clean typography with bold headlines and readable body text. Rounded UI elements throughout for a friendly, approachable vibe.' Should align with the app's purpose and target audience.")
  inferred_category string @description("App Store category that best matches this app. Choose from: Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference. Pick the single most relevant category.")
}

class AppScreenPromptsOutput {
  app_screen_prompts string[] @description("Array of 3-10 iPhone screenshot prompts for different app screens. Each prompt follows the full-bleed edge-to-edge pattern.")
}

// ============================================
// APP STRUCTURE PLANNING (Two-Stage Generation)
// ============================================

class TabStructure {
  has_tabs bool @description("Whether this app uses bottom navigation tabs")
  tab_names string[] @description("Array of tab names in order (e.g., ['Home', 'Explore', 'Profile']). Empty if has_tabs is false.")
  tab_icon_descriptions string[] @description("Icon description for each tab (e.g., 'house outline icon', 'compass icon'). Should match tab_names length.")
  tab_styling string @description("Styling rules for tabs: active/inactive colors from style guide, icon size (e.g., '24px'), positioning ('bottom edge, 72px height'), spacing between tabs")
}

class ScreenDetail {
  screen_name string @description("Name of this screen (e.g., 'Home Dashboard', 'Profile Settings')")
  purpose string @description("What this screen does in 1-2 sentences")
  layout_type string @description("Layout pattern: 'list', 'grid', 'detail', 'form', 'dashboard', etc.")
  unique_elements string @description("Specific UI elements unique to this screen (cards, buttons, images, text content, interactive components)")
  active_tab_index int? @description("Which tab is active (0-based index), null if no tabs or if screen doesn't correspond to a tab")
}

class AppStructure {
  tabs TabStructure @description("Tab navigation structure")
  common_layout_elements string @description("UI elements common across ALL screens: status bar styling, background color, header patterns, overall spacing/margins")
  screens ScreenDetail[] @description("Detailed plan for each screen (3-10 screens)")
}

class ScreenImagePrompt {
  canvas_edit_prompt string @description("Complete prompt for editing canvas image to create this screen")
}

// ============================================
// DEMO APP GENERATION
// ============================================

// Generate a demo app concept with name, description, category, icon prompt, and color theme
function GenerateDemoApp(
  app_description_input: string? @description("Optional user-provided app description/concept to generate from"),
  category_hint: string? @description("Optional category hint from user (e.g., 'Productivity', 'Health & Fitness'). Use this to inform the category choice, but you can adjust if another category fits better."),
  vibe_style: string? @description("Optional vibe/style hint (e.g., 'Minimal & clean', 'Playful & vibrant', 'Futuristic neon'). Use this to influence color theme and icon design."),
  style_config: StyleConfig? @description("Optional style configuration to base the app on"),
  style_name: string? @description("Optional name of the style for context")
) -> DemoAppOutput {
  client ScreenshotGeneratorMed
  prompt #"
    {{ _.role("user") }}

    You are generating a demo app concept with name, description, category, icon prompt, and color theme.

    {% if app_description_input %}
    USER'S APP CONCEPT:
    {{ app_description_input }}

    {% if category_hint %}
    CATEGORY HINT: {{ category_hint }}
    (Use this to inform your category choice, but adjust if another category fits better)
    {% endif %}

    {% if vibe_style %}
    VISUAL STYLE/VIBE: {{ vibe_style }}
    (Use this to influence color theme and icon design)
    {% endif %}

    TASK: Create a fictional app based on this user's description. Generate a short catchy name, App Store category, professional description, icon prompt, and color theme that matches the concept.
    {% elif style_config %}
    STYLE TO SHOWCASE:
    - Name: {{ style_name }}
    - Background: {{ style_config.background_color }}
    - Details: {{ style_config.details }}
    - Text Style: {{ style_config.text_style }}
    - Device Style: {{ style_config.device_style }}

    {% if category_hint %}
    CATEGORY HINT: {{ category_hint }}
    {% endif %}

    {% if vibe_style %}
    VISUAL STYLE/VIBE: {{ vibe_style }}
    {% endif %}

    TASK: Create a fictional app with name, category, description, icon prompt, and color theme that would look great in this style.
    {% endif %}

    ## 1. APP NAME

    Create a short, catchy app name (1-3 words max):
    - Examples: "FitQuest", "ZenJournal", "BeatFlow", "ShadowVault", "NightGuard"
    - Should match the style's mood:
      * Playful/bright styles → fun, energetic names
      * Zen/minimal styles → calm, simple names
      * Dark/cyberpunk styles → edgy, mysterious names
    - NO hyphens, NO long phrases, NO descriptions in the name

    ## 2. APP SUBTITLE

    Create an App Store subtitle (30 characters MAX):
    - **CRITICAL: Must be 30 characters or less, including spaces**
    - A single punchy phrase capturing the app's core value
    - Examples (all ≤30 chars):
      * "Fitness made fun" (18 chars)
      * "Your mindful companion" (23 chars)
      * "Track workouts, earn rewards" (29 chars)
      * "Gamify your fitness journey" (28 chars)
      * "Find calm in chaos" (18 chars)
    - Be concise and impactful
    - Avoid articles ("a", "the") to save space
    - Should complement the app name, not repeat it

    ## 3. APP CATEGORY

    Choose the most appropriate App Store category from this list:
    - **Games** - Gaming apps of all types
    - **Productivity** - Task management, notes, calendars, organization tools
    - **Lifestyle** - General lifestyle, hobbies, interests
    - **Education** - Learning, courses, study tools
    - **Health & Fitness** - Wellness, workouts, meditation, health tracking
    - **Business** - Professional tools, team collaboration, enterprise
    - **Social Networking** - Communication, social media, messaging
    - **Entertainment** - Media consumption, fun content
    - **Photo & Video** - Camera, editing, creative tools
    - **Travel** - Maps, booking, trip planning
    - **Food & Drink** - Recipes, restaurants, cooking
    - **Finance** - Banking, budgeting, investing, payments
    - **News** - News aggregation, journalism
    - **Sports** - Sports tracking, scores, fan engagement
    - **Weather** - Weather forecasts and tracking
    - **Music** - Music streaming, creation, discovery
    - **Shopping** - E-commerce, retail
    - **Utilities** - System tools, widgets, extensions
    - **Medical** - Healthcare, medical tools (professional)
    - **Reference** - Dictionaries, encyclopedias, information lookup

    Pick ONE category that best matches the app's PRIMARY purpose.
    {% if category_hint %}Consider the user's hint: {{ category_hint }}{% endif %}

    ## 4. APP DESCRIPTION

    Write an App Store style description (3-5 sentences, 40-80 words):
    - Explain what the app does and its core purpose
    - List 2-3 key features or benefits
    - Make it sound exciting and professional
    - Match the style's mood and target audience
    - Example: "Transform your fitness journey into an epic adventure. FitQuest gamifies your workouts with challenges, achievements, and rewards. Track your progress, compete with friends, and unlock new levels as you get stronger. Perfect for anyone who wants to stay motivated and make exercise fun."

    ## 5. APP ICON PROMPT

    Generate a text-to-image prompt for creating the app icon (50-100 words):
    - **CRITICAL: Keep it SIMPLE - use ONE large, bold central symbol**
    - **AVOID: Small details, thin lines, complex patterns, circuit boards, tiny text**
    - Format: 1024x1024 square iOS icon (rounded square)
    - Use bold, chunky shapes that work at small sizes
    - Match the style's color palette from background_color
    - Professional, modern, App Store quality
    - Examples of GOOD icons:
      * "iOS app icon. Large bold shield symbol in center, bright gradient (cyan to purple). Simple, clean design. Minimal details. Rounded square. 1024x1024."
      * "iOS app icon. Big crescent moon symbol, deep purple gradient background. Soft glow effect. Simple and bold. Rounded square. 1024x1024."
      * "iOS app icon. Single large bat silhouette in center, glowing purple outline on dark background. Bold and simple. Rounded square. 1024x1024."

    ## 6. COLOR THEME

    Define a color palette/theme for the app UI that will be used to generate consistent app screens:
    - Be specific about colors (e.g., "dark purple and electric cyan", "warm beige and sage green")
    - Should match the icon's color palette
    - Should complement the style's aesthetic if a style is provided
    - {% if vibe_style %}Match the vibe: {{ vibe_style }}{% endif %}
    - Include 2-4 specific colors that work well together
    - Examples:
      * "Dark purple gradient with electric cyan accents"
      * "Soft blue-green with white and pale yellow highlights"
      * "Bright vibrant yellow with hot pink and cyan accents"

    ## 7. STYLE GUIDE

    Write a 2-3 sentence visual style guide describing the UI aesthetic:
    - Cover: UI mood/aesthetic, typography approach, and overall design philosophy
    - Should align with the color theme and app concept
    - {% if vibe_style %}Match the vibe: {{ vibe_style }}{% endif %}
    - Examples:
      * "Clean minimal interface with generous whitespace and soft shadows. Uses rounded corners throughout for friendly, approachable feel. Typography: Bold sans-serif headlines paired with readable body text."
      * "Energetic interface with vibrant gradients and bold gamification elements. Dynamic typography with strong headlines and clear stats. Rounded corners and playful animations create an engaging experience."
      * "Serene minimal design with generous whitespace. Elegant serif headings paired with clean sans-serif body text. Subtle animations and organic shapes evoke calm and mindfulness."

    ## MATCHING GUIDELINES:
    - App concept should feel natural with the style's personality
    - Category should accurately reflect the app's primary purpose
    - Icon colors should match the color theme
    - Icon mood should match style energy (calm vs energetic, playful vs serious, etc.)
    - Color theme should be cohesive with the overall style aesthetic
    - Style guide should align with color theme and app purpose
    - {% if vibe_style %}Visual style/vibe should be reflected in colors, icon, and style guide: {{ vibe_style }}{% endif %}
    - All outputs (name, category, description, icon, color theme, style guide) should work together harmoniously

    {{ ctx.output_format }}
  "#
}

function ImproveAppDescription(
  draft_description: string @description("Rough or placeholder description that needs to sound polished and App Store ready"),
  vibe_hint: string? @description("Optional tone, vibe, or audience notes to weave into the copy")
) -> ImprovedDescriptionOutput {
  client ScreenshotGeneratorMed
  prompt #"
    {{ _.role("system") }}
    You are a marketing copywriter who specializes in App Store product descriptions that are clear, benefit-driven, and polished.

    **CRITICAL APP STORE FORMAT REQUIREMENTS:**
    - First sentence: Hook with the main value proposition (what the app does and why it matters)
    - Middle 2-3 sentences: Key features and benefits (specific, tangible)
    - Final sentence: Call-to-action or emotional closer
    - Length: 3-5 sentences, 50-90 words total
    - Tone: Professional but approachable, exciting but trustworthy
    - Avoid: Repetition, buzzword overload, vague claims, excessive punctuation

    **APP STORE DESCRIPTION EXAMPLES:**
    - "Transform your fitness journey into an epic adventure. Track workouts, earn achievements, and compete with friends through gamified challenges. Stay motivated with smart reminders and personalized goals. Your path to a stronger, healthier you starts here."
    - "Find calm in the chaos with guided meditation sessions designed for busy professionals. Choose from 5-minute mindfulness breaks, breathing exercises, and ambient soundscapes. Build a consistent practice with gentle reminders and progress tracking. Peace of mind, just a tap away."

    {{ _.role("user") }}
    DRAFT DESCRIPTION:
    {{ draft_description }}

    {% if vibe_hint %}
    TONE / VIBE TO REFLECT: {{ vibe_hint }}
    {% endif %}

    **YOUR TASK:**
    Return THREE outputs:
    1. improved_description: The app name + polished description
    2. improved_style: A visual style guide that matches the app
    3. inferred_category: The most appropriate App Store category

    **improved_description Format:** `AppName: Description sentence 1. Description sentence 2. Description sentence 3. [Optional sentence 4-5.]`

    **improved_description Requirements:**
    1. Start with a catchy app name (1-3 words) followed by a colon
       - If input is rough concept like "photo sharing app between batman and robin" → Create catchy name (e.g., "DynamicDuo", "Gotham Link")
       - If input mentions an app name → Extract and refine it
    2. After the colon, write the polished App Store description (3-5 sentences, 50-90 words)
    3. Match the requested tone/vibe if provided

    **improved_style Requirements:**
    1. Write 2-3 sentences describing the visual design approach
    2. Cover: UI mood/aesthetic, color palette hints, typography style, and overall design philosophy
    3. Should feel cohesive with the app's purpose and target audience
    4. Match the tone/vibe if provided

    **inferred_category Requirements:**
    1. Choose the SINGLE most relevant App Store category from this list:
       - Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference
    2. Base your choice on the app's PRIMARY purpose and functionality
    3. Return ONLY the category name (e.g., "Health & Fitness", not "the category is Health & Fitness")

    **Examples:**

    improved_description: "FitQuest: Transform your fitness journey into an epic adventure. Track workouts, earn achievements, and compete with friends through gamified challenges. Stay motivated with smart reminders and personalized goals. Your path to a stronger, healthier you starts here."
    improved_style: "Energetic interface with vibrant gradients (purple to cyan) and bold gamification elements. Dynamic typography with strong headlines and clear stats. Rounded corners and playful animations create an engaging, motivating experience."
    inferred_category: "Health & Fitness"

    improved_description: "Mindful Minutes: Discover tranquility amidst your busy schedule with guided meditations crafted for real life. Access quick sessions from 3 to 15 minutes, perfect for commutes or breaks. Build consistent practice with calming sounds and mood tracking. Reclaim your focus and peace, one minute at a time."
    improved_style: "Serene minimal design with soft blue-green palette and generous whitespace. Elegant serif headings paired with clean sans-serif body text. Subtle animations and organic shapes evoke calm and mindfulness."
    inferred_category: "Health & Fitness"

    {{ ctx.output_format }}
  "#
}

// ============================================
// APP SCREEN GENERATION
// ============================================

// Generate app structure plan (tabs, layout, screen details)
function GenerateAppStructure(
  app_name: string @description("Name of the app"),
  app_description: string @description("Description of what the app does"),
  style_guide: string @description("Complete visual style guide including colors, typography, mood, and design philosophy"),
  num_screens: int @description("Number of screens to plan (3-10)")
) -> AppStructure {
  client ScreenshotGeneratorMed
  prompt #"
    {{ _.role("user") }}

    You are creating a structural blueprint for an iPhone app. This plan will guide image generation, so be specific and detailed.

    **APP DETAILS:**
    - Name: {{ app_name }}
    - Description: {{ app_description }}
    - Style Guide: {{ style_guide }}
    - Number of screens: {{ num_screens }}

    **YOUR TASK:**
    Create a comprehensive app structure plan that defines:
    1. Navigation pattern (tabs or no tabs)
    2. Common layout elements across all screens
    3. Detailed plan for each of the {{ num_screens }} screens

    **CRITICAL REQUIREMENTS:**

    ## 1. TAB NAVIGATION ANALYSIS

    Determine if this app should use bottom navigation tabs:
    - **Use tabs if:** App has 3-5 distinct sections users switch between frequently (e.g., social apps, e-commerce, content platforms)
    - **No tabs if:** Single-purpose utility, linear workflows, games, or simple tools

    If using tabs:
    - Choose 3-5 clear tab names (e.g., "Home", "Explore", "Messages", "Profile")
    - Describe each tab's icon (outline style, 24px size)
    - Define tab styling using colors from style_guide (active color, inactive color, positioning)

    ## 2. COMMON LAYOUT ELEMENTS

    Define elements that appear on EVERY screen:
    - Status bar style (time, battery, signal at top edge)
    - Background color (from style_guide)
    - Header patterns (if any common headers)
    - Overall spacing and margins
    - Any persistent UI elements

    ## 3. SCREEN DETAILS

    For each of the {{ num_screens }} screens, define:

    **screen_name:** Descriptive name (e.g., "Home Dashboard", "Video Chat", "Settings")

    **purpose:** What this screen accomplishes in 1-2 sentences

    **layout_type:** Choose from:
    - "dashboard" - Stats, cards, summaries, overview
    - "list" - Scrollable list of items (messages, products, articles)
    - "grid" - Grid of images/cards (photos, products, media)
    - "detail" - Single item detail view (profile, article, product page)
    - "form" - Input fields, settings, creation flows
    - "media" - Large media display (video, photo viewer)
    - "chat" - Messaging interface
    - "map" - Location-based interface

    **unique_elements:** Specific UI components for THIS screen:
    - Headers, titles, labels (with text examples)
    - Buttons and CTAs (what they say, where positioned)
    - Cards, lists, grids (what content they contain)
    - Input fields (what data they collect)
    - Images, icons, illustrations (what they depict)
    - Stats, progress bars, graphs (what metrics)
    - Be concrete and specific!

    **active_tab_index:** If using tabs, which tab (0-based index) is active on this screen? If screen doesn't map to a tab or no tabs exist, use null.

    **SCREEN VARIETY:**
    - Include diverse screen types (mix of dashboard, list, detail, form)
    - Each screen should serve a distinct purpose
    - Cover main user flows of the app
    - For {{ num_screens }} screens, typical breakdown:
      * 1-2 landing/home screens
      * 2-3 feature screens (core functionality)
      * 1 profile/account screen
      * 1 settings/preferences screen

    {{ ctx.output_format }}
  "#
}

// Generate image prompt for a single screen based on app structure
function GenerateScreenImagePrompt(
  app_name: string @description("Name of the app"),
  style_guide: string @description("Complete visual style guide including colors, typography, mood"),
  common_layout: string @description("Common layout elements from AppStructure"),
  tabs: TabStructure @description("Tab structure from AppStructure"),
  screen_detail: ScreenDetail @description("Details for this specific screen"),
  has_reference_image: bool @description("Whether a visual reference screen image is provided (true for screens 2+, false for screen 1)")
) -> ScreenImagePrompt {
  client ScreenshotGeneratorMed
  prompt #"
    {{ _.role("user") }}

    Generate a canvas-editing prompt for Gemini Flash to create an iPhone app screen.

    **APP CONTEXT:**
    - App Name: {{ app_name }}
    - Style Guide: {{ style_guide }}

    **COMMON LAYOUT (applies to all screens):**
    {{ common_layout }}

    **TAB NAVIGATION:**
    {% if tabs.has_tabs %}
    This app uses bottom navigation with {{ tabs.tab_names | length }} tabs:
    {% for tab_name in tabs.tab_names %}
    - Tab {{ loop.index0 }}: "{{ tab_name }}" ({{ tabs.tab_icon_descriptions[loop.index0] }})
    {% endfor %}

    Tab Styling: {{ tabs.tab_styling }}
    {% else %}
    This app does not use bottom navigation tabs.
    {% endif %}

    **THIS SCREEN:**
    - Name: {{ screen_detail.screen_name }}
    - Purpose: {{ screen_detail.purpose }}
    - Layout Type: {{ screen_detail.layout_type }}
    - Unique Elements: {{ screen_detail.unique_elements }}
    {% if screen_detail.active_tab_index is defined and screen_detail.active_tab_index is not none %}
    - Active Tab: {{ tabs.tab_names[screen_detail.active_tab_index] }} (index {{ screen_detail.active_tab_index }})
    {% endif %}

    **IMAGE EDITING INSTRUCTIONS:**
    {% if has_reference_image %}
    You will receive TWO images:
    1. **Canvas image (image 1)**: Blank iPhone-sized canvas to edit/paint on
    2. **Reference image (image 2)**: Previously generated screen showing the visual style

    **CRITICAL:** Match the reference image's visual consistency:
    - Use the EXACT same colors for backgrounds, buttons, text
    - Match the EXACT tab bar styling (icons, colors, spacing, positioning)
    - Keep the same typography (font sizes, weights, colors)
    - Maintain the same design system (shadows, corner radius, spacing)
    - Paint onto the canvas (image 1), using reference (image 2) as your style guide

    Only change what's unique to THIS screen: content, headers, main UI elements specific to "{{ screen_detail.screen_name }}".
    {% else %}
    You will receive ONE image:
    - **Canvas image**: Blank iPhone-sized canvas to edit/paint on

    Paint the app UI directly onto this canvas based on the style guide provided above.
    {% endif %}

    **GENERATE THE PROMPT:**

    Create a complete canvas-editing prompt that:
    1. Starts with: "IMAGE EDITING TASK: The provided image is a blank iPhone-sized canvas..."
    2. Specifies the screen name: "SCREEN: {{ screen_detail.screen_name }}"
    3. Lists all UI elements to paint (from common_layout + unique_elements + tabs if applicable)
    4. Includes critical canvas-editing requirements (edge-to-edge fill, no margins, etc.)
    {% if tabs.has_tabs and screen_detail.active_tab_index is defined and screen_detail.active_tab_index is not none %}
    5. Shows the tab bar with "{{ tabs.tab_names[screen_detail.active_tab_index] }}" tab ACTIVE and all others INACTIVE
    {% elif tabs.has_tabs %}
    5. Shows the tab bar with all tabs INACTIVE (no active tab for this screen)
    {% endif %}
    6. Uses colors and styling from the style guide
    {% if has_reference_image %}
    7. Emphasizes matching the reference image's visual consistency
    {% endif %}

    Make the prompt detailed and specific with exact positioning, sizes, colors (hex codes from style_guide), and element descriptions.

    {{ ctx.output_format }}
  "#
}

// ============================================
// DEMO APP TEST CASES
// ============================================

test DemoFromDescription {
  functions [GenerateDemoApp]
  args {
    app_description_input "A meditation and mindfulness app for busy professionals. Helps users find calm moments throughout their day with 5-minute guided sessions, breathing exercises, and ambient soundscapes."
    style_config null
    style_name null
  }
}

test ImproveDescriptionFromDraft {
  functions [ImproveAppDescription]
  args {
    draft_description "This app helps you track workouts and offers some motivation features. It has reminders, a few templates, and a social feed, but the copy feels flat."
    vibe_hint "Energetic fitness mentor"
  }
}

test CyberpunkDemoApp {
  functions [GenerateDemoApp]
  args {
    app_description_input null
    style_config {
      background_color "radial gradient from dark navy (#0A0E27) center to bright magenta (#FF006E) edges"
      details "Futuristic cyberpunk style with holographic circuit patterns (cyan, 60-80px, 4-5 scattered). Glowing pink grid squares (40-60px, 6-8 pieces). Neon hexagons with cyan outline (50-70px, 3-4 at edges). Elements concentrated in outer 12-15% border area."
      text_style "Futuristic bold sans-serif font, 800 weight, white color with bright cyan (#00F0FF) outline (4-5px) and neon glow effect"
      device_style "Glossy midnight black frame with vibrant cyan (#00F0FF) neon glow effect around edges and thin modern bezels"
    }
    style_name "Cyberpunk Neon"
  }
}

test ZenMinimalistDemoApp {
  functions [GenerateDemoApp]
  args {
    app_description_input null
    style_config {
      background_color "soft sage green solid color (#E8F2E8)"
      details "Minimalist zen aesthetic with subtle organic elements. 3-4 small earthy white (#F5F1E8) circular shapes (30-50px), 2-3 warm cream (#F5E6D3) abstract leaf silhouettes (40-60px). Simple muted gold (#D4AF37) line accents (2-3px thick, 60-100px long, 2-3 lines). All elements scattered lightly in outer edges, emphasizing negative space and calm."
      text_style "Clean sans-serif font (Poppins or Inter style), 700 weight, earthy white color (#F5F1E8) with subtle drop shadow (0px 1px 2px rgba(0,0,0,0.08))"
      device_style "Warm natural wood finish frame (light oak or bamboo texture) with matte surface and subtle grain texture"
    }
    style_name "Zen Minimal"
  }
}

test PlayfulPopArtDemoApp {
  functions [GenerateDemoApp]
  args {
    app_description_input null
    style_config {
      background_color "bright yellow solid color (#FFD60A)"
      details "Playful pop art style with vibrant emoji-like decorations. 4-5 large colorful emojis (😊🎉⭐❤️, 80-120px). 3-4 bold geometric shapes: cyan circles, magenta triangles, orange stars (60-100px). 5-6 thick black comic-style lines/lightning bolts (5-8px thick, 80-140px). Halftone dot patterns in corners (cyan dots on yellow). High energy, scattered placement."
      text_style "Extra bold rounded sans-serif font (Impact or similar), 900 weight, white color with thick 5-7px black outline stroke and subtle drop shadow"
      device_style "Colorful gradient frame with cyan-to-green fade on left edge transitioning to orange-to-pink fade on bottom right, glossy finish"
    }
    style_name "Snap Style"
  }
}

// NOTE: Old GenerateScreensForApp function removed - replaced by two-stage approach:
// 1. GenerateAppStructure (creates plan with tabs, layout, screen details)
// 2. GenerateScreenImagePrompt (generates prompts from structure)

test CyberpunkDemoApp {
  functions [GenerateDemoApp]
  args {
    app_description_input null
    style_config {
      background_color "radial gradient from dark navy (#0A0E27) center to bright magenta (#FF006E) edges"
      details "Futuristic cyberpunk style with holographic circuit patterns (cyan, 60-80px, 4-5 scattered). Glowing pink grid squares (40-60px, 6-8 pieces). Neon hexagons with cyan outline (50-70px, 3-4 at edges). Elements concentrated in outer 12-15% border area."
      text_style "Futuristic bold sans-serif font, 800 weight, white color with bright cyan (#00F0FF) outline (4-5px) and neon glow effect"
      device_style "Glossy midnight black frame with vibrant cyan (#00F0FF) neon glow effect around edges and thin modern bezels"
    }
    style_name "Cyberpunk Neon"
  }
}

test ZenMinimalistDemoApp {
  functions [GenerateDemoApp]
  args {
    app_description_input null
    style_config {
      background_color "soft gradient from warm beige (#F5F1E8) to pale sage green (#E8F2E8)"
      details "Minimalist zen style with delicate watercolor brush strokes (soft greens and browns, 40-60px, 3-4 at corners). Subtle organic leaf silhouettes (30-50px, 4-5 scattered). Small zen circle enso symbols (35-45px, 2-3 pieces). Elements very sparse, outer 10% border only."
      text_style "Elegant serif font (Playfair Display or similar), 600 weight, deep forest green (#2D4A3E) with subtle cream shadow for depth"
      device_style "Matte warm wood texture frame with natural bamboo aesthetic and organic rounded edges"
    }
    style_name "Zen Minimalist"
  }
}

test PlayfulPopArtDemoApp {
  functions [GenerateDemoApp]
  args {
    app_description_input null
    style_config {
      background_color "bright vibrant yellow (#FFDD00) solid color"
      details "Playful pop art style with smiley face emojis (80-100px, 4-5 at edges). Star sparkles in hot pink and cyan (60-80px, 6-8 scattered). Lightning bolts in bright orange (55-75px, 3-4 pieces). Comic book style explosion shapes (70-90px, 2-3 at corners). Elements concentrated in outer 12-18% border area, center clear."
      text_style "Extra bold rounded sans-serif font (Impact or similar), 900 weight, white color with thick 5-7px black outline stroke and subtle drop shadow"
      device_style "Colorful gradient frame with cyan-to-green fade on left edge transitioning to orange-to-pink fade on bottom right, glossy finish"
    }
    style_name "Snap Style"
  }
}

test DemoFromDescription {
  functions [GenerateDemoApp]
  args {
    app_description_input "A meditation and mindfulness app for busy professionals. Helps users find calm moments throughout their day with 5-minute guided sessions, breathing exercises, and ambient soundscapes."
    style_config null
    style_name null
  }
}

test ImproveDescriptionFromDraft {
  functions [ImproveAppDescription]
  args {
    draft_description "This app helps you track workouts and offers some motivation features. It has reminders, a few templates, and a social feed, but the copy feels flat."
    vibe_hint "Energetic fitness mentor" 
  }
}

// ============================================
// SCREEN GENERATION TEST CASES
// ============================================

test GenerateScreensCustomInstructions {
  functions [GenerateScreensForApp]
  args {
    app_name "FitQuest"
    app_description "Gamified fitness tracking app with challenges, achievements, and social features"
    screen_instructions "Generate: 1) Today's workout dashboard with progress rings and stats, 2) Exercise library with video previews and categories, 3) Social feed showing friend activities and challenges, 4) Achievement showcase with unlocked badges and trophies"
    num_screens 4
    style_guide "Energetic and motivating design with vibrant purple gradient backgrounds (#6B46C1 to #9333EA), electric cyan accents (#06B6D4) for active states and call-to-action buttons. Bold rounded sans-serif typography (700-900 weight) with high contrast white text. Modern card-based layouts with 16px corner radius and subtle elevation shadows. Playful achievement badges and progress visualizations using the purple-cyan color scheme."
  }
}

test GenerateScreensAuto {
  functions [GenerateScreensForApp]
  args {
    app_name "CalmFlow"
    app_description "Meditation and mindfulness app for busy professionals with guided sessions and breathing exercises"
    screen_instructions null
    num_screens 5
    style_guide "Calming and serene design with soft blue-green gradient backgrounds (#E0F2F1 to #B2DFDB), pale yellow highlights (#FFF9C4) for subtle emphasis and mindfulness prompts. Gentle rounded sans-serif typography (400-500 weight) with soft gray text (#546E7A). Minimalist card layouts with large 24px corner radius and soft shadows. Breathing circle animations and progress indicators using the blue-green palette with smooth transitions."
  }
}
