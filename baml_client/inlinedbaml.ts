/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// OpenRouter client configuration for BAML\n// Using openai-generic provider with OpenRouter's base URL\n\n// Fast model - GPT-5 Nano (same as AI SDK's \"tiny\" preset)\nclient<llm> OpenRouterTest {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5-nano\"  // Fast and cheap for testing\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Smart model - GPT-5 (same as AI SDK's \"large\" preset)\nclient<llm> OpenRouterSmart {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5\"  // High reasoning capability\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}",
  "generators.baml": "// Generator configuration for TypeScript\n// This tells BAML where to output the generated TypeScript client\n\ngenerator target {\n  output_type \"typescript\"\n  output_dir \"..\"  // Outputs to project root\n  version \"0.76.2\"\n}",
  "test.baml": "// Simple test prompts to verify BAML works with OpenRouter\n\n// Test 1: Simple string in, string out\nfunction SimpleTest(input: string) -> string {\n  client OpenRouterTest\n  prompt #\"\n    Respond to this: {{ input }}\n\n    Be concise and direct.\n  \"#\n}\n\n// Test 2: Structured output with a class\nclass BasicResponse {\n  answer string @description(\"The direct answer to the question\")\n  confidence float @description(\"Confidence level from 0.0 to 1.0\")\n}\n\nfunction StructuredTest(question: string) -> BasicResponse {\n  client OpenRouterTest\n  prompt #\"\n    Answer this question: {{ question }}\n\n    Also rate your confidence in your answer from 0.0 (not confident) to 1.0 (very confident).\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test 3: Array output\nfunction ListTest(topic: string) -> string[] {\n  client OpenRouterTest\n  prompt #\"\n    List 3 examples of: {{ topic }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test 4: Optional fields\nclass DetailedResponse {\n  answer string\n  confidence float\n  explanation string? @description(\"Optional explanation if needed\")\n  sources string[]? @description(\"Optional list of sources\")\n}\n\nfunction DetailedTest(query: string) -> DetailedResponse {\n  client OpenRouterSmart  // Use smarter model for this\n  prompt #\"\n    Query: {{ query }}\n\n    Provide an answer with confidence level.\n    Include explanation only if the answer needs clarification.\n    Include sources only if you're referencing specific information.\n\n    {{ ctx.output_format }}\n  \"#\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}