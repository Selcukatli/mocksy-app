/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog } from
"@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {AppConcept, AppConceptsOutput, AppScreenPromptsOutput, AppStructure, CoverImagePrompt, CoverVideoPrompt, DemoAppOutput, ImprovedDescriptionOutput, ModelTestResponse, ScreenDetail, ScreenImagePrompt, StyleColors, StyleEffects, StyleTypography, TabStructure, VisionTestResponse} from "./types"
import type TypeBuilder from "./type_builder"
import type * as events from "./events"

type TickReason = "Unknown";

type BamlCallOptions<EventsT = never> = {
tb?: TypeBuilder
clientRegistry?: ClientRegistry
env?: Record<string, string | undefined>
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
  events?: EventsT
  }

  export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async GenerateApp(
  app_description_input?: string | null,category_hint?: string | null,ui_style?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateApp",
      {
      "app_description_input": app_description_input?? null,"category_hint": category_hint?? null,"ui_style": ui_style?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateAppConcepts(
  app_description_input: string,category_hint?: string | null,num_concepts: number,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateAppConcepts",
      {
      "app_description_input": app_description_input,"category_hint": category_hint?? null,"num_concepts": num_concepts
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateAppCoverImagePrompt(
  app_name: string,app_description: string,app_category?: string | null,style_guide?: string | null,screen_names: string[],user_feedback?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateAppCoverImagePrompt",
      {
      "app_name": app_name,"app_description": app_description,"app_category": app_category?? null,"style_guide": style_guide?? null,"screen_names": screen_names,"user_feedback": user_feedback?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateAppDesignPlan(
  app_name: string,app_description: string,app_category: string,style_guide: string,num_screens: number,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateAppDesignPlan",
      {
      "app_name": app_name,"app_description": app_description,"app_category": app_category,"style_guide": style_guide,"num_screens": num_screens
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateCoverVideoPrompt(
  cover_image_url: string,app_name: string,app_description: string,user_motion_prompt?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateCoverVideoPrompt",
      {
      "cover_image_url": cover_image_url,"app_name": app_name,"app_description": app_description,"user_motion_prompt": user_motion_prompt?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateFirstScreenImagePrompt(
  app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateFirstScreenImagePrompt",
      {
      "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateScreenImagePromptWithReference(
  app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateScreenImagePromptWithReference",
      {
      "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async ImproveAppDescription(
  draft_description: string,vibe_hint?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ImproveAppDescription",
      {
      "draft_description": draft_description,"vibe_hint": vibe_hint?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async ReformatAppDescription(
  app_name: string,current_description: string,app_category?: string | null,style_guide?: string | null,user_feedback?: string | null,app_screenshots?: Image[] | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ReformatAppDescription",
      {
      "app_name": app_name,"current_description": current_description,"app_category": app_category?? null,"style_guide": style_guide?? null,"user_feedback": user_feedback?? null,"app_screenshots": app_screenshots?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestClaudeHaiku(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestClaudeHaiku",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestClaudeSonnet4(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestClaudeSonnet4",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGPT5(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGPT5",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGPT5Mini(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGPT5Mini",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGPT5Nano(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGPT5Nano",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGemini20FlashExp(
  image: Image,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGemini20FlashExp",
      {
      "image": image
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGemini25Flash(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGemini25Flash",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGemini25FlashLite(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGemini25FlashLite",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGemini25Pro(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGemini25Pro",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestLlama32Vision(
  image: Image,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestLlama32Vision",
      {
      "image": image
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestMistralLarge(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestMistralLarge",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestMistralSmall(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestMistralSmall",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestQwen25VL(
  image: Image,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestQwen25VL",
      {
      "image": image
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
      }

      export class AsyncHttpStreamRequest {
      constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

      
      async GenerateApp(
      app_description_input?: string | null,category_hint?: string | null,ui_style?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateApp",
          {
          "app_description_input": app_description_input?? null,"category_hint": category_hint?? null,"ui_style": ui_style?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateAppConcepts(
      app_description_input: string,category_hint?: string | null,num_concepts: number,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateAppConcepts",
          {
          "app_description_input": app_description_input,"category_hint": category_hint?? null,"num_concepts": num_concepts
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateAppCoverImagePrompt(
      app_name: string,app_description: string,app_category?: string | null,style_guide?: string | null,screen_names: string[],user_feedback?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateAppCoverImagePrompt",
          {
          "app_name": app_name,"app_description": app_description,"app_category": app_category?? null,"style_guide": style_guide?? null,"screen_names": screen_names,"user_feedback": user_feedback?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateAppDesignPlan(
      app_name: string,app_description: string,app_category: string,style_guide: string,num_screens: number,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateAppDesignPlan",
          {
          "app_name": app_name,"app_description": app_description,"app_category": app_category,"style_guide": style_guide,"num_screens": num_screens
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateCoverVideoPrompt(
      cover_image_url: string,app_name: string,app_description: string,user_motion_prompt?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateCoverVideoPrompt",
          {
          "cover_image_url": cover_image_url,"app_name": app_name,"app_description": app_description,"user_motion_prompt": user_motion_prompt?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateFirstScreenImagePrompt(
      app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateFirstScreenImagePrompt",
          {
          "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateScreenImagePromptWithReference(
      app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateScreenImagePromptWithReference",
          {
          "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async ImproveAppDescription(
      draft_description: string,vibe_hint?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ImproveAppDescription",
          {
          "draft_description": draft_description,"vibe_hint": vibe_hint?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async ReformatAppDescription(
      app_name: string,current_description: string,app_category?: string | null,style_guide?: string | null,user_feedback?: string | null,app_screenshots?: Image[] | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ReformatAppDescription",
          {
          "app_name": app_name,"current_description": current_description,"app_category": app_category?? null,"style_guide": style_guide?? null,"user_feedback": user_feedback?? null,"app_screenshots": app_screenshots?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestClaudeHaiku(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestClaudeHaiku",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestClaudeSonnet4(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestClaudeSonnet4",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGPT5(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGPT5",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGPT5Mini(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGPT5Mini",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGPT5Nano(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGPT5Nano",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGemini20FlashExp(
      image: Image,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGemini20FlashExp",
          {
          "image": image
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGemini25Flash(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGemini25Flash",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGemini25FlashLite(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGemini25FlashLite",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGemini25Pro(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGemini25Pro",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestLlama32Vision(
      image: Image,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestLlama32Vision",
          {
          "image": image
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestMistralLarge(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestMistralLarge",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestMistralSmall(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestMistralSmall",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestQwen25VL(
      image: Image,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestQwen25VL",
          {
          "image": image
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
          }