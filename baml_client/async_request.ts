/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog } from
"@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {AppConcept, AppConceptsOutput, AppScreenPromptsOutput, AppStructure, Avatar, Background, BasicResponse, Character, CharacterInScene, Composition, CoverImagePrompt, DemoAppOutput, DetailedResponse, DeviceImageScore, DeviceSpec, FontStyle, HeaderText, ImprovedDescriptionOutput, LayoutConfig, ModelTestResponse, Outfit, PromptStructure, PromptStyle, PromptTechnical, Scene, ScreenDetail, ScreenImagePrompt, ScreenshotConfig, ScreenshotPromptStructured, ScreenshotSetInput, ScreenshotTreatment, StyleColors, StyleConfig, StyleDemoOutput, StyleDemoScreenshotConfig, StyleEffects, StyleGenerationOutput, StyleRevisionOutput, StyleTypography, Subject, TabStructure, TextConfig, VisionTestResponse} from "./types"
import type TypeBuilder from "./type_builder"
import type * as events from "./events"

type TickReason = "Unknown";

type BamlCallOptions<EventsT = never> = {
tb?: TypeBuilder
clientRegistry?: ClientRegistry
env?: Record<string, string | undefined>
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
  events?: EventsT
  }

  export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async AnalyzeAvatar(
  image: Image,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "AnalyzeAvatar",
      {
      "image": image
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async DetailedAnalysisGPT5(
  query: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "DetailedAnalysisGPT5",
      {
      "query": query
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async DetailedAnalysisGPT5Nano(
  query: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "DetailedAnalysisGPT5Nano",
      {
      "query": query
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateApp(
  app_description_input?: string | null,category_hint?: string | null,ui_style?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateApp",
      {
      "app_description_input": app_description_input?? null,"category_hint": category_hint?? null,"ui_style": ui_style?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateAppConcepts(
  app_description_input: string,category_hint?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateAppConcepts",
      {
      "app_description_input": app_description_input,"category_hint": category_hint?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateAppCoverImagePrompt(
  app_name: string,app_description: string,app_category?: string | null,style_guide?: string | null,screen_names: string[],user_feedback?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateAppCoverImagePrompt",
      {
      "app_name": app_name,"app_description": app_description,"app_category": app_category?? null,"style_guide": style_guide?? null,"screen_names": screen_names,"user_feedback": user_feedback?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateAppDesignPlan(
  app_name: string,app_description: string,app_category: string,style_guide: string,num_screens: number,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateAppDesignPlan",
      {
      "app_name": app_name,"app_description": app_description,"app_category": app_category,"style_guide": style_guide,"num_screens": num_screens
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateFirstScreenImagePrompt(
  app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateFirstScreenImagePrompt",
      {
      "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateScene(
  scene_prompt: string,art_style: string,characters: types.Character[],
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateScene",
      {
      "scene_prompt": scene_prompt,"art_style": art_style,"characters": characters
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateScreenImagePromptWithReference(
  app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateScreenImagePromptWithReference",
      {
      "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateScreenshotPrompt(
  text: types.TextConfig,layout: types.LayoutConfig,style: types.StyleConfig,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateScreenshotPrompt",
      {
      "text": text,"layout": layout,"style": style
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateScreenshotSet(
  input: types.ScreenshotSetInput,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateScreenshotSet",
      {
      "input": input
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateStyleDemoScreenshots(
  style_config: types.StyleConfig,style_name: string,screenshot_count?: number | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateStyleDemoScreenshots",
      {
      "style_config": style_config,"style_name": style_name,"screenshot_count": screenshot_count?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async GenerateStyleFromDescription(
  description: string,style_name?: string | null,reference_image?: Image | null,background_style?: string | null,text_style?: string | null,device_style?: string | null,decorative_elements?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "GenerateStyleFromDescription",
      {
      "description": description,"style_name": style_name?? null,"reference_image": reference_image?? null,"background_style": background_style?? null,"text_style": text_style?? null,"device_style": device_style?? null,"decorative_elements": decorative_elements?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async ImproveAppDescription(
  draft_description: string,vibe_hint?: string | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ImproveAppDescription",
      {
      "draft_description": draft_description,"vibe_hint": vibe_hint?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async ListGeneratorGPT5(
  topic: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ListGeneratorGPT5",
      {
      "topic": topic
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async ListGeneratorGPT5Nano(
  topic: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ListGeneratorGPT5Nano",
      {
      "topic": topic
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async ReviseStyle(
  current_style: types.StyleGenerationOutput,revision_prompt: string,new_style_name?: string | null,reference_image?: Image | null,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ReviseStyle",
      {
      "current_style": current_style,"revision_prompt": revision_prompt,"new_style_name": new_style_name?? null,"reference_image": reference_image?? null
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async ScoreDeviceReferenceImage(
  device_image: Image,expected_frame_style: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "ScoreDeviceReferenceImage",
      {
      "device_image": device_image,"expected_frame_style": expected_frame_style
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async SimpleStringGPT5(
  input: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "SimpleStringGPT5",
      {
      "input": input
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async SimpleStringGPT5Nano(
  input: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "SimpleStringGPT5Nano",
      {
      "input": input
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async StructuredResponseGPT5(
  question: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "StructuredResponseGPT5",
      {
      "question": question
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async StructuredResponseGPT5Nano(
  question: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "StructuredResponseGPT5Nano",
      {
      "question": question
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestClaudeHaiku(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestClaudeHaiku",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestClaudeSonnet4(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestClaudeSonnet4",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGPT5(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGPT5",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGPT5Mini(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGPT5Mini",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGPT5Nano(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGPT5Nano",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGemini20FlashExp(
  image: Image,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGemini20FlashExp",
      {
      "image": image
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGemini25Flash(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGemini25Flash",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGemini25FlashLite(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGemini25FlashLite",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestGemini25Pro(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestGemini25Pro",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestLlama32Vision(
  image: Image,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestLlama32Vision",
      {
      "image": image
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestMistralLarge(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestMistralLarge",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestMistralSmall(
  
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestMistralSmall",
      {
      
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
  async TestQwen25VL(
  image: Image,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "TestQwen25VL",
      {
      "image": image
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
      }

      export class AsyncHttpStreamRequest {
      constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

      
      async AnalyzeAvatar(
      image: Image,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "AnalyzeAvatar",
          {
          "image": image
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async DetailedAnalysisGPT5(
      query: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "DetailedAnalysisGPT5",
          {
          "query": query
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async DetailedAnalysisGPT5Nano(
      query: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "DetailedAnalysisGPT5Nano",
          {
          "query": query
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateApp(
      app_description_input?: string | null,category_hint?: string | null,ui_style?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateApp",
          {
          "app_description_input": app_description_input?? null,"category_hint": category_hint?? null,"ui_style": ui_style?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateAppConcepts(
      app_description_input: string,category_hint?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateAppConcepts",
          {
          "app_description_input": app_description_input,"category_hint": category_hint?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateAppCoverImagePrompt(
      app_name: string,app_description: string,app_category?: string | null,style_guide?: string | null,screen_names: string[],user_feedback?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateAppCoverImagePrompt",
          {
          "app_name": app_name,"app_description": app_description,"app_category": app_category?? null,"style_guide": style_guide?? null,"screen_names": screen_names,"user_feedback": user_feedback?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateAppDesignPlan(
      app_name: string,app_description: string,app_category: string,style_guide: string,num_screens: number,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateAppDesignPlan",
          {
          "app_name": app_name,"app_description": app_description,"app_category": app_category,"style_guide": style_guide,"num_screens": num_screens
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateFirstScreenImagePrompt(
      app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateFirstScreenImagePrompt",
          {
          "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateScene(
      scene_prompt: string,art_style: string,characters: types.Character[],
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateScene",
          {
          "scene_prompt": scene_prompt,"art_style": art_style,"characters": characters
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateScreenImagePromptWithReference(
      app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateScreenImagePromptWithReference",
          {
          "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateScreenshotPrompt(
      text: types.TextConfig,layout: types.LayoutConfig,style: types.StyleConfig,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateScreenshotPrompt",
          {
          "text": text,"layout": layout,"style": style
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateScreenshotSet(
      input: types.ScreenshotSetInput,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateScreenshotSet",
          {
          "input": input
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateStyleDemoScreenshots(
      style_config: types.StyleConfig,style_name: string,screenshot_count?: number | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateStyleDemoScreenshots",
          {
          "style_config": style_config,"style_name": style_name,"screenshot_count": screenshot_count?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async GenerateStyleFromDescription(
      description: string,style_name?: string | null,reference_image?: Image | null,background_style?: string | null,text_style?: string | null,device_style?: string | null,decorative_elements?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "GenerateStyleFromDescription",
          {
          "description": description,"style_name": style_name?? null,"reference_image": reference_image?? null,"background_style": background_style?? null,"text_style": text_style?? null,"device_style": device_style?? null,"decorative_elements": decorative_elements?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async ImproveAppDescription(
      draft_description: string,vibe_hint?: string | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ImproveAppDescription",
          {
          "draft_description": draft_description,"vibe_hint": vibe_hint?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async ListGeneratorGPT5(
      topic: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ListGeneratorGPT5",
          {
          "topic": topic
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async ListGeneratorGPT5Nano(
      topic: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ListGeneratorGPT5Nano",
          {
          "topic": topic
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async ReviseStyle(
      current_style: types.StyleGenerationOutput,revision_prompt: string,new_style_name?: string | null,reference_image?: Image | null,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ReviseStyle",
          {
          "current_style": current_style,"revision_prompt": revision_prompt,"new_style_name": new_style_name?? null,"reference_image": reference_image?? null
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async ScoreDeviceReferenceImage(
      device_image: Image,expected_frame_style: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "ScoreDeviceReferenceImage",
          {
          "device_image": device_image,"expected_frame_style": expected_frame_style
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async SimpleStringGPT5(
      input: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "SimpleStringGPT5",
          {
          "input": input
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async SimpleStringGPT5Nano(
      input: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "SimpleStringGPT5Nano",
          {
          "input": input
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async StructuredResponseGPT5(
      question: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "StructuredResponseGPT5",
          {
          "question": question
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async StructuredResponseGPT5Nano(
      question: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "StructuredResponseGPT5Nano",
          {
          "question": question
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestClaudeHaiku(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestClaudeHaiku",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestClaudeSonnet4(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestClaudeSonnet4",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGPT5(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGPT5",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGPT5Mini(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGPT5Mini",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGPT5Nano(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGPT5Nano",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGemini20FlashExp(
      image: Image,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGemini20FlashExp",
          {
          "image": image
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGemini25Flash(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGemini25Flash",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGemini25FlashLite(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGemini25FlashLite",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestGemini25Pro(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestGemini25Pro",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestLlama32Vision(
      image: Image,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestLlama32Vision",
          {
          "image": image
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestMistralLarge(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestMistralLarge",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestMistralSmall(
      
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestMistralSmall",
          {
          
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
      async TestQwen25VL(
      image: Image,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "TestQwen25VL",
          {
          "image": image
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
          }