/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "app-concepts.baml": "// Multi-Concept App Generation\n// Generates 1-4 diverse app concept variations from a single user description\n// Use num_concepts=1 for parallel generation (4x faster with Haiku)\n\n// ============================================\n// APP CONCEPT CLASSES\n// ============================================\n\nclass StyleColors {\n  primary string @description(\"Primary brand color as hex code (e.g., '#7EC8B8'). Used for buttons, CTAs, and key accents.\")\n  background string @description(\"Background color as hex code (e.g., '#FFFFFF' for white, '#1A1A1A' for dark). Main canvas color.\")\n  text string @description(\"Primary text color as hex code (e.g., '#2C3E50'). For body text and headlines.\")\n  accent string @description(\"Secondary accent color as hex code (e.g., '#E8F5F2'). For cards, highlights, or secondary elements.\")\n}\n\nclass StyleTypography {\n  headlineFont string @description(\"Font family for headlines (e.g., 'SF Pro Display', 'Inter Bold', 'Poppins')\")\n  headlineSize string @description(\"Font size for headlines (e.g., '28px', '32px', '24px')\")\n  headlineWeight string @description(\"Font weight for headlines (e.g., '700', '600', 'bold')\")\n  bodyFont string @description(\"Font family for body text (e.g., 'SF Pro Text', 'Inter', 'Roboto')\")\n  bodySize string @description(\"Font size for body text (e.g., '16px', '14px', '15px')\")\n  bodyWeight string @description(\"Font weight for body text (e.g., '400', '500', 'regular')\")\n}\n\nclass StyleEffects {\n  cornerRadius string @description(\"Border radius for UI elements (e.g., '12px', '8px', '16px'). Consistent rounding value.\")\n  shadowStyle string @description(\"Shadow specification (e.g., '0px 2px 8px rgba(0,0,0,0.1)', 'none', '0px 4px 12px rgba(0,0,0,0.15)')\")\n  designPhilosophy string @description(\"Overall aesthetic and mood in 1-2 sentences (e.g., 'Clean minimal interface with generous whitespace for a calm, approachable feel', 'Bold cyberpunk aesthetic with neon accents and futuristic vibes')\")\n}\n\nclass AppConcept {\n  app_name string @description(\"Short, catchy app name (1-3 words max, e.g., 'FitQuest', 'ZenJournal', 'ShadowVault')\")\n  app_subtitle string @description(\"App Store subtitle (30 characters MAX, including spaces). A single punchy phrase that captures the app's core value.\")\n  app_description string @description(\"Full App Store description (300-400 words, ~2,100 characters). MUST be formatted with bullet points for features and natural paragraph flow following this structure:\\n\\n[Opening Hook - 2-3 sentences capturing core value proposition]\\n\\nKEY FEATURES:\\n* Feature 1: Detailed description of what users can do\\n* Feature 2: Detailed description of what users can do\\n* Feature 3: Detailed description of what users can do\\n* Feature 4: Detailed description of what users can do\\n* Feature 5: Detailed description of what users can do (optional)\\n\\n[Benefits paragraph - naturally explain how the app improves users' lives or solves their problems without a header]\\n\\n[Target audience paragraph - naturally describe who would love this app and when they'd use it, without saying 'perfect for' or using a header]\\n\\n[Closing call-to-action sentence]\\n\\nExample:\\n'Transform your fitness journey into an epic adventure with FitQuest. Every workout becomes a quest, every rep earns experience points, and every milestone unlocks new challenges.\\n\\nKEY FEATURES:\\n* Quest-based workouts: Turn any exercise routine into an exciting adventure with themed quest lines and progressive challenges\\n* Intelligent workout logging: Track your sessions with AI that learns your routines and suggests optimal progressive overload\\n* Guild system: Join forces with friends to tackle group challenges, compete on leaderboards, and celebrate victories together\\n* Achievement system: Earn badges for consistency streaks, personal records, and completing special quest lines\\n* Avatar progression: Watch your character grow stronger as you do, unlocking new abilities and gear that mirror your real-world gains\\n\\nStay motivated with gamification that makes fitness fun and addictive. Never miss a workout when you're part of a guild counting on you. Track your progress with insights that help you improve faster and avoid plateaus.\\n\\nWhether you're a gym regular looking for accountability, a gamer who wants an active hobby, or someone who finds traditional fitness apps boring, you'll discover a new way to stay motivated. From lifting weights to running to yoga, every session becomes an adventure worth completing.\\n\\nStart your quest today and discover how fun fitness can be!'\")\n  app_category string @description(\"App Store category. Choose the single most appropriate category from: Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference. If user provided category_hint, use that as guidance but adjust if another category fits better based on the app's actual functionality.\")\n  \n  colors StyleColors\n  typography StyleTypography\n  effects StyleEffects\n  \n  style_description string @description(\"Complete visual style guide (3-5 sentences). MUST include specific design tokens: (1) COLORS: Provide exact hex codes for 2-4 key colors with usage context (e.g., 'Primary: #7EC8B8 (buttons, accents), Background: #FFFFFF, Text: #1A1A1A, Secondary: #E8F5F2 (cards)'). (2) TYPOGRAPHY: Font styles with sizes (e.g., 'Headlines: 28px/700 weight, Body: 16px/400'). (3) SPACING & EFFECTS: Corner radius (8-16px), shadows (e.g., '0px 2px 8px rgba(0,0,0,0.12)'), padding guidelines. (4) DESIGN PHILOSOPHY: Overall aesthetic and mood. Example: 'Clean minimal interface. Colors: Primary #7EC8B8 (CTAs), Background #FFFFFF, Text #2C3E50, Accent #E8F5F2 (cards). Typography: Bold sans-serif headlines 28px/700, body text 16px/400. Rounded corners 12px throughout, subtle shadows 0px 2px 8px rgba(0,0,0,0.1). Generous whitespace for calm, approachable feel.'\")\n  app_icon_prompt string @description(\"Complete text-to-image prompt for generating app icon (50-100 words). CRITICAL: Icon must be SIMPLE with LARGE, BOLD symbols recognizable at small sizes. FULL BLEED design extending to all edges with NO margins or padding. 1024x1024 square, iOS-style icon design.\")\n  cover_image_prompt string @description(\"Complete text-to-image prompt for generating promotional cover/hero image (100-150 words). Horizontal banner (1920×1080). Should capture app essence visually. CRITICAL: NO TEXT in the image - purely visual storytelling.\")\n}\n\nclass AppConceptsOutput {\n  concepts AppConcept[] @description(\"1-4 diverse app concepts based on num_concepts parameter, each with distinct visual style and approach\")\n}\n\n// ============================================\n// MULTI-CONCEPT GENERATION\n// ============================================\n\nfunction GenerateAppConcepts(\n  app_description_input: string @description(\"User-provided app description/concept to generate from\"),\n  category_hint: string? @description(\"Optional category hint from user (e.g., 'Productivity', 'Health & Fitness')\"),\n  num_concepts: int @description(\"Number of concepts to generate (1-4). Use 1 for parallel generation.\")\n) -> AppConceptsOutput {\n  client ClaudeHaiku45\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are generating {{ num_concepts }} DIVERSE app concept variation(s) from a single user idea.\n    {% if num_concepts > 1 %}\n    Each concept should explore a different visual style, mood, and design approach.\n    {% endif %}\n\n    USER'S APP IDEA:\n    {{ app_description_input }}\n\n    {% if category_hint %}\n    CATEGORY HINT: {{ category_hint }}\n    (Use this to inform your concept{% if num_concepts > 1 %}s{% endif %}, but you can vary it if appropriate)\n    {% endif %}\n\n    TASK: Create {{ num_concepts }} distinct app concept{% if num_concepts > 1 %}s{% endif %} that interpret{% if num_concepts == 1 %}s{% endif %} this idea{% if num_concepts > 1 %} in different ways{% endif %}.\n\n    ## DIVERSITY REQUIREMENTS\n    {% if num_concepts > 1 %}\n    The {{ num_concepts }} concepts should vary across these dimensions:\n    - **Visual Style**: Minimal vs Bold, Light vs Dark, Flat vs 3D, Modern vs Classic\n    - **Color Palette**: Different color schemes (e.g., pastels, neons, earth tones, monochrome)\n    - **Mood**: Professional vs Playful, Calm vs Energetic, Serious vs Fun\n    - **Design Philosophy**: Minimalist, Maximalist, Brutalist, Organic, Futuristic, etc.\n\n    **CRITICAL**: Each concept should feel distinctly different. Users should be able to tell them apart at a glance.\n    {% else %}\n    Create a single well-defined concept with a clear visual style, color palette, mood, and design philosophy.\n    {% endif %}\n\n    ## CONCEPT STRUCTURE\n\n    For each of the {{ num_concepts }} concept{% if num_concepts > 1 %}s{% endif %}, provide:\n\n    ### 1. APP NAME\n    - Short, catchy app name (1-3 words max)\n    - Should match the style's mood:\n      * Playful/bright styles → fun, energetic names\n      * Zen/minimal styles → calm, simple names\n      * Dark/tech styles → edgy, modern names\n    - NO hyphens, NO long phrases\n    - Can vary the name slightly across concepts if it fits better with the style\n\n    ### 2. APP SUBTITLE\n    - App Store subtitle (30 characters MAX, including spaces)\n    - A single punchy phrase capturing core value\n    - Examples: \"Fitness made fun\" (18 chars), \"Your mindful companion\" (23 chars)\n\n    ### 3. APP DESCRIPTION\n    - **CRITICAL: Full App Store description (300-400 words, ~2,100 characters)**\n    - **MUST use natural, conversational formatting with KEY FEATURES as the only header:**\n    \n    **FORMAT TEMPLATE:**\n    ```\n    [Opening Hook - 2-3 compelling sentences capturing core value proposition]\n\n    KEY FEATURES:\n    * Feature 1 name: Detailed description of what users can do and why it matters\n    * Feature 2 name: Detailed description of what users can do and why it matters\n    * Feature 3 name: Detailed description of what users can do and why it matters\n    * Feature 4 name: Detailed description of what users can do and why it matters\n    * Feature 5 name: Detailed description of what users can do and why it matters\n\n    [Benefits paragraph - naturally explain how the app improves lives without using \"BENEFITS:\" header]\n\n    [Target audience paragraph - naturally describe who would love this without using \"PERFECT FOR:\" header]\n\n    [Closing call-to-action sentence]\n    ```\n    \n    - **Include literal line breaks** between sections (use \\n\\n in output)\n    - Use asterisk bullets (*) for each feature\n    - Each feature should have both a name and detailed description\n    - Write benefits and target audience as NATURAL paragraphs without headers\n    - Make it persuasive, conversational, and match the style's mood\n    - Must feel like a real App Store description, not a formal document\n    \n    **EXAMPLE OF PROPERLY FORMATTED OUTPUT:**\n    ```\n    Transform your fitness journey into an epic adventure with FitQuest. Every workout becomes a quest, every rep earns experience points, and every milestone unlocks new challenges.\n\n    KEY FEATURES:\n    * Quest-based workouts: Turn any exercise routine into an exciting adventure with themed quest lines and progressive challenges\n    * Intelligent workout logging: Track your sessions with AI that learns your routines and suggests optimal progressive overload\n    * Guild system: Join forces with friends to tackle group challenges, compete on leaderboards, and celebrate victories together\n    * Achievement system: Earn badges for consistency streaks, personal records, and completing special quest lines\n    * Avatar progression: Watch your character grow stronger as you do, unlocking new abilities and gear that mirror your real-world gains\n\n    Stay motivated with gamification that makes fitness fun and addictive. Never miss a workout when you're part of a guild counting on you. Track your progress with insights that help you improve faster and avoid plateaus.\n\n    Whether you're a gym regular looking for accountability, a gamer who wants an active hobby, or someone who finds traditional fitness apps boring, you'll discover a new way to stay motivated. From lifting weights to running to yoga, every session becomes an adventure worth completing.\n\n    Start your quest today and discover how fun fitness can be!\n    ```\n\n    ### 4. APP CATEGORY\n    - Choose the single most appropriate App Store category from: Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference\n    - If category_hint was provided, use it as guidance but adjust if another category fits better based on the app's actual functionality\n    - If no hint provided, infer from the app description and core features\n\n    ### 5. STRUCTURED STYLE DESIGN SYSTEM\n    \n    **colors** object with exactly these fields:\n    - **primary**: Primary brand color hex code (e.g., '#7EC8B8'). Used for buttons, CTAs, key accents.\n    - **background**: Background/canvas color hex code (e.g., '#FFFFFF', '#1A1A1A').\n    - **text**: Primary text color hex code (e.g., '#2C3E50', '#FFFFFF').\n    - **accent**: Secondary accent color hex code (e.g., '#E8F5F2'). For cards, highlights, secondary elements.\n\n    **typography** object with exactly these fields:\n    - **headlineFont**: Font family for headlines (e.g., 'SF Pro Display', 'Inter Bold', 'Poppins')\n    - **headlineSize**: Size for headlines (e.g., '28px', '32px', '24px')\n    - **headlineWeight**: Weight for headlines (e.g., '700', '600', 'bold')\n    - **bodyFont**: Font family for body text (e.g., 'SF Pro Text', 'Inter', 'Roboto')\n    - **bodySize**: Size for body text (e.g., '16px', '14px', '15px')\n    - **bodyWeight**: Weight for body text (e.g., '400', '500', 'regular')\n\n    **effects** object with exactly these fields:\n    - **cornerRadius**: Consistent border radius (e.g., '12px', '8px', '16px', '4px')\n    - **shadowStyle**: Shadow CSS value (e.g., '0px 2px 8px rgba(0,0,0,0.1)', 'none', '0px 4px 12px rgba(0,0,0,0.15)')\n    - **designPhilosophy**: 1-2 sentence aesthetic/mood (e.g., 'Clean minimal interface with generous whitespace for calm feel', 'Bold cyberpunk with neon accents')\n\n    ### 6. STYLE DESCRIPTION (TEXT SUMMARY)\n    - **CRITICAL: 3-5 sentence comprehensive style guide combining all design tokens above**\n    - This should be a readable summary that incorporates the colors, typography, and effects\n    - Include usage context for colors and philosophy\n    - Examples of COMPLETE style descriptions:\n      * \"Clean minimal interface. Colors: Primary #7EC8B8 (CTAs, links), Background #FFFFFF, Text #2C3E50, Accent #E8F5F2 (cards, sections). Typography: Bold sans-serif headlines 28px/700 weight, body text 16px/400. Rounded corners 12px throughout, subtle shadows 0px 2px 8px rgba(0,0,0,0.1). Generous whitespace for calm, approachable feel.\"\n      * \"Bold dark interface. Colors: Primary #8B3DFF (actions, highlights), Background #0A0E27, Text #FFFFFF, Secondary #FF006E (accents, warnings). Typography: Extra bold headlines 32px/800, medium body 18px/500. Sharp corners 4px, dramatic shadows 0px 4px 16px rgba(0,0,0,0.4). High contrast and energetic vibe.\"\n      * \"Warm earthy palette. Colors: Primary #D4704A (CTAs), Background #FFF8F0, Text #3D2817, Accent #8BA888 (highlights, success). Typography: Friendly rounded headlines 26px/700, readable body 16px/400. Soft corners 16px, gentle shadows 0px 2px 12px rgba(61,40,23,0.08). Organic shapes create approachable, natural aesthetic.\"\n\n    ### 7. APP ICON PROMPT\n    - Text-to-image prompt for the app icon (50-100 words)\n    - **CRITICAL: Keep it SIMPLE - use ONE large, bold central symbol**\n    - **AVOID: Small details, thin lines, complex patterns, tiny text**\n    - Format: 1024x1024 perfect square with sharp 90-degree corners (NOT rounded)\n    - **ABSOLUTELY MANDATORY FULL BLEED REQUIREMENTS:**\n      * Color and imagery MUST extend completely to all four edges of the square\n      * NO vignetting effects (no dark/faded corners or edges)\n      * NO centered composition with fade-to-black around the edges\n      * NO letterboxing, NO margins, NO inner padding, NO frames, NO borders\n      * NO floating sticker effects, NO artificial rounded-corner cutouts\n      * Background color/gradient MUST fill corner pixels completely\n      * If using gradients, they must reach all corners without fading to empty space\n    - **STRICTLY forbid any words, letterforms, numbers, or store labels (e.g., 'App Store', initials). The symbol must be purely graphic.**\n    - **Prompt structure should explicitly state:** \"flat square artwork filling entire 1024x1024 canvas edge to edge with no empty corners\"\n    - Match the style's color palette and mood\n    - Examples of GOOD full-bleed icon prompts:\n      * \"Flat square app icon artwork, 1024x1024. Large bold shield symbol centered on solid gradient background (cyan to purple) that fills entire canvas edge to edge including all corners. Sharp 90-degree corners. No rounded edges, no vignette, no faded corners. Simple bold design. Purely graphic, no text.\"\n      * \"Flat square app icon artwork, 1024x1024. Big crescent moon symbol on deep purple to magenta gradient background filling entire square from corner to corner. Sharp edges. Background extends to all four corners with full color saturation. No fade to black, no vignette. Simple and bold. Purely graphic, no text.\"\n\n    ### 8. COVER IMAGE PROMPT\n    - Text-to-image prompt for promotional banner (100-150 words)\n    - Format: Horizontal/landscape banner (1920×1080)\n    - Purpose: Promotional hero image for app store\n    - **CRITICAL: ABSOLUTELY NO TEXT IN IMAGE**\n      * DO NOT include any text, labels, titles, typography, letters, words, or numbers\n      * Use color names (teal, violet, orange) NOT hex codes in the prompt\n      * Communicate through imagery, composition, colors, shapes only\n      * Command a true full-bleed composition: no letterboxing, no frames, no borders, no empty or faded margins, and no UI chrome surrounding the scene.\n      * End prompt with: \"No text, words, letters, numbers, or readable typography anywhere in the image.\"\n    - Decide whether to show device mockup or pure visual metaphor based on what's more effective while keeping the scene full-bleed edge to edge\n    - Match the visual style and mood of the concept\n\n    ## STYLE VARIATION EXAMPLES\n\n    **Concept 1 - Minimal & Calm:**\n    - Soft pastels (light blue, warm beige, soft green)\n    - Generous whitespace, subtle shadows\n    - Clean sans-serif typography\n    - Organic, calming aesthetic\n\n    **Concept 2 - Bold & Energetic:**\n    - Vibrant colors (hot pink, electric blue, bright yellow)\n    - Strong gradients, high contrast\n    - Thick, bold typography\n    - Dynamic, playful aesthetic\n\n    **Concept 3 - Dark & Professional:**\n    - Dark backgrounds (charcoal, deep purple, midnight blue)\n    - Neon accents (cyan, magenta, lime)\n    - Sharp, modern typography\n    - Sleek, sophisticated aesthetic\n\n    **Concept 4 - Warm & Friendly:**\n    - Earth tones (terracotta, sage green, warm cream)\n    - Rounded corners, soft shadows\n    - Friendly, approachable typography\n    - Natural, inviting aesthetic\n\n    ## OUTPUT REQUIREMENTS\n\n    Return exactly {{ num_concepts }} concept{% if num_concepts > 1 %}s{% endif %} in the `concepts` array.\n    Each concept should be complete and self-contained.\n    {% if num_concepts > 1 %}\n    Ensure clear visual diversity across all {{ num_concepts }} concepts.\n    {% endif %}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASES\n// ============================================\n\ntest GenerateMultipleConceptsForFitness {\n  functions [GenerateAppConcepts]\n  args {\n    app_description_input \"A fitness app that gamifies workouts with challenges, achievements, and social competition. Track progress, earn rewards, and stay motivated.\"\n    category_hint \"Health & Fitness\"\n    num_concepts 4\n  }\n}\n\ntest GenerateSingleConceptForMeditation {\n  functions [GenerateAppConcepts]\n  args {\n    app_description_input \"Mindfulness and meditation app for busy professionals. Quick 5-minute guided sessions, breathing exercises, and ambient soundscapes.\"\n    category_hint null\n    num_concepts 1\n  }\n}\n\n",
  "app-generation.baml": "// Demo App Generation BAML Domain\n// Generates demo apps from styles for preview/showcase purposes\n\n// ============================================\n// IMPORTS & REUSED CLASSES\n// ============================================\n\n// Note: StyleConfig is defined in screenshots.baml and reused here\n\n// ============================================\n// HELPER MACROS\n// ============================================\n\n// Macro to convert hex color codes to natural language color names\n// This prevents hex codes from appearing as visible text on generated screens\n\n// ============================================\n// DEMO APP CLASSES\n// ============================================\n\nclass DemoAppOutput {\n  app_name string @description(\"Short, catchy app name (1-3 words max, e.g., 'FitQuest', 'ZenJournal', 'ShadowVault')\")\n  app_subtitle string @description(\"App Store subtitle (30 characters MAX, including spaces). A single punchy phrase that captures the app's core value. Examples: 'Fitness made fun', 'Your mindful companion', 'Track workouts, earn rewards'. CRITICAL: Must be 30 characters or less.\")\n  app_description string @description(\"App Store style description (3-5 sentences, 40-80 words). Explain what the app does, key features, and benefits. Make it compelling and professional.\")\n  app_category string @description(\"App Store category. Choose from: Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference. Pick the single most relevant category that matches this app's primary purpose.\")\n  app_icon_prompt string @description(\"Complete text-to-image prompt for generating app icon (50-100 words). CRITICAL: Icon must be SIMPLE with LARGE, BOLD symbols recognizable at small sizes. Avoid tiny details, thin lines, or complex patterns. Should be 1024x1024 square, iOS-style icon design matching the app concept and style aesthetic.\")\n  style_guide string @description(\"Complete visual style guide describing the UI aesthetic, color palette, mood, typography approach, and design philosophy (3-5 sentences). MUST include specific color values (hex codes or names). Example: 'Clean minimal interface with soft sage green background (#E8F2E8) and muted gold accents (#D4AF37). Generous whitespace and subtle shadows (0px 2px 8px rgba(0,0,0,0.12)). Rounded corners throughout (12-16px) for friendly, approachable feel. Typography: Bold sans-serif headlines (28px/700 weight) paired with readable body text (16px/400 weight).' Should be comprehensive enough to generate consistent screens.\")\n}\n\nclass ImprovedDescriptionOutput {\n  improved_description string @description(\"Combined app name and description in a single cohesive text. Format: 'AppName: Description here.' The app name should be 1-3 catchy words followed by a colon, then a polished App Store style description (3-5 sentences, 50-90 words). Example: 'DynamicDuo: Connect and share privately with your most trusted partner. Securely exchange photos and messages, keeping your communications off the public grid. Coordinate with encrypted chats and instant sharing. Your secret HQ for two.'\")\n  improved_style string @description(\"2-3 sentence visual style guide describing the UI aesthetic, mood, typography approach, and design philosophy that matches the app concept. Example: 'Modern dark interface with purple and cyan gradients. Clean typography with bold headlines and readable body text. Rounded UI elements throughout for a friendly, approachable vibe.' Should align with the app's purpose and target audience.\")\n  inferred_category string @description(\"App Store category that best matches this app. Choose from: Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference. Pick the single most relevant category.\")\n}\n\nclass AppScreenPromptsOutput {\n  app_screen_prompts string[] @description(\"Array of 3-10 iPhone screenshot prompts for different app screens. Each prompt follows the full-bleed edge-to-edge pattern.\")\n}\n\n// ============================================\n// APP STRUCTURE PLANNING (Two-Stage Generation)\n// ============================================\n\nclass TabStructure {\n  has_tabs bool @description(\"Whether this app uses bottom navigation tabs\")\n  tab_names string[] @description(\"Array of tab names in order (e.g., ['Home', 'Explore', 'Profile']). Empty if has_tabs is false.\")\n  tab_icon_descriptions string[] @description(\"Icon description for each tab (e.g., 'house outline icon', 'compass icon'). Should match tab_names length.\")\n  active_tab_color string @description(\"EXACT hex color for active tab icon and label (e.g., '#7B68EE', '#D4704A'). Must be a valid hex code.\")\n  inactive_tab_color string @description(\"EXACT hex color for inactive tab icons and labels (e.g., '#999999', '#CCCCCC'). Must be a valid hex code.\")\n  active_icon_style string @description(\"Icon style for active tab: either 'filled' or 'outline'\")\n  inactive_icon_style string @description(\"Icon style for inactive tabs: either 'filled' or 'outline' (usually opposite of active)\")\n  selection_indicator string @description(\"How active tab is shown. Choose ONE: 'underline_2px' (simple 2px line under active tab), 'pill_background' (rounded background behind active tab), or 'none'. Keep it simple - the image generator will handle styling details.\")\n  tab_bar_height int @description(\"Tab bar height in pixels (typically 72)\")\n  icon_size int @description(\"Icon size in pixels (typically 24)\")\n  label_size int @description(\"Label font size in pixels (typically 11)\")\n}\n\nclass ScreenDetail {\n  screen_name string @description(\"Name of this screen (e.g., 'Home Dashboard', 'Profile Settings')\")\n  purpose string @description(\"What this screen does in 1-2 sentences\")\n  layout_type string @description(\"Layout pattern: 'list', 'grid', 'detail', 'form', 'dashboard', etc.\")\n  unique_elements string @description(\"Specific UI elements unique to this screen (cards, buttons, images, text content, interactive components)\")\n  active_tab_index int? @description(\"Which tab is active (0-based index), null if no tabs or if screen doesn't correspond to a tab\")\n}\n\nclass AppStructure {\n  tabs TabStructure @description(\"Tab navigation structure\")\n  common_layout_elements string @description(\"UI elements common across ALL screens: status bar styling, background color, header patterns, overall spacing/margins\")\n  screens ScreenDetail[] @description(\"Detailed plan for each screen (3-10 screens)\")\n}\n\nclass ScreenImagePrompt {\n  canvas_edit_prompt string @description(\"Complete prompt for editing canvas image to create this screen\") @assert(max_length, {{ this|length <= 4500 }})\n}\n\n// ============================================\n// DEMO APP GENERATION\n// ============================================\n\n// Generate an app concept with name, description, category, icon prompt, and color theme\nfunction GenerateApp(\n  app_description_input: string? @description(\"Optional user-provided app description/concept to generate from\"),\n  category_hint: string? @description(\"Optional category hint from user (e.g., 'Productivity', 'Health & Fitness'). Use this to inform the category choice, but you can adjust if another category fits better.\"),\n  ui_style: string? @description(\"Optional UI style/aesthetic hint (e.g., 'Minimal & clean', 'Playful & vibrant', 'Dark mode with neon accents'). Use this to influence color palette, typography, and visual design.\")\n) -> DemoAppOutput {\n  client ClaudeHaiku45\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are generating a demo app concept with name, description, category, icon prompt, and color theme.\n\n    USER'S APP CONCEPT:\n    {{ app_description_input }}\n\n    {% if category_hint %}\n    CATEGORY HINT: {{ category_hint }}\n    (Use this to inform your category choice, but adjust if another category fits better)\n    {% endif %}\n\n    {% if ui_style %}\n    UI STYLE/AESTHETIC: {{ ui_style }}\n    (Use this to influence color palette, typography, and visual design)\n    {% endif %}\n\n    TASK: Create a fictional app based on this user's description. Generate a short catchy name, App Store category, professional description, icon prompt, and color theme that matches the concept.\n\n    ## 1. APP NAME\n\n    **IMPORTANT**: If the user's description already includes a specific app name, use that exact name. Do not change it or suggest alternatives.\n\n    If no app name is provided, create a short, catchy app name (1-3 words max):\n    - Examples: \"FitQuest\", \"ZenJournal\", \"BeatFlow\", \"ShadowVault\", \"NightGuard\"\n    - Should match the style's mood:\n      * Playful/bright styles → fun, energetic names\n      * Zen/minimal styles → calm, simple names\n      * Dark/cyberpunk styles → edgy, mysterious names\n    - NO hyphens, NO long phrases, NO descriptions in the name\n\n    ## 2. APP SUBTITLE\n\n    Create an App Store subtitle (30 characters MAX):\n    - **CRITICAL: Must be 30 characters or less, including spaces**\n    - A single punchy phrase capturing the app's core value\n    - Examples (all ≤30 chars):\n      * \"Fitness made fun\" (18 chars)\n      * \"Your mindful companion\" (23 chars)\n      * \"Track workouts, earn rewards\" (29 chars)\n      * \"Gamify your fitness journey\" (28 chars)\n      * \"Find calm in chaos\" (18 chars)\n    - Be concise and impactful\n    - Avoid articles (\"a\", \"the\") to save space\n    - Should complement the app name, not repeat it\n\n    ## 3. APP CATEGORY\n\n    Choose the most appropriate App Store category from this list:\n    - **Games** - Gaming apps of all types\n    - **Productivity** - Task management, notes, calendars, organization tools\n    - **Lifestyle** - General lifestyle, hobbies, interests\n    - **Education** - Learning, courses, study tools\n    - **Health & Fitness** - Wellness, workouts, meditation, health tracking\n    - **Business** - Professional tools, team collaboration, enterprise\n    - **Social Networking** - Communication, social media, messaging\n    - **Entertainment** - Media consumption, fun content\n    - **Photo & Video** - Camera, editing, creative tools\n    - **Travel** - Maps, booking, trip planning\n    - **Food & Drink** - Recipes, restaurants, cooking\n    - **Finance** - Banking, budgeting, investing, payments\n    - **News** - News aggregation, journalism\n    - **Sports** - Sports tracking, scores, fan engagement\n    - **Weather** - Weather forecasts and tracking\n    - **Music** - Music streaming, creation, discovery\n    - **Shopping** - E-commerce, retail\n    - **Utilities** - System tools, widgets, extensions\n    - **Medical** - Healthcare, medical tools (professional)\n    - **Reference** - Dictionaries, encyclopedias, information lookup\n\n    Pick ONE category that best matches the app's PRIMARY purpose.\n    {% if category_hint %}Consider the user's hint: {{ category_hint }}{% endif %}\n\n    ## 4. APP DESCRIPTION\n\n    Write an App Store style description (3-5 sentences, 40-80 words):\n    - Explain what the app does and its core purpose\n    - List 2-3 key features or benefits\n    - Make it sound exciting and professional\n    - Match the style's mood and target audience\n    - Example: \"Transform your fitness journey into an epic adventure. FitQuest gamifies your workouts with challenges, achievements, and rewards. Track your progress, compete with friends, and unlock new levels as you get stronger. Perfect for anyone who wants to stay motivated and make exercise fun.\"\n\n    ## 5. APP ICON PROMPT\n\n    Generate a text-to-image prompt for creating the app icon (50-100 words):\n    - **CRITICAL: Keep it SIMPLE - use ONE large, bold central symbol**\n    - **AVOID: Small details, thin lines, complex patterns, circuit boards, tiny text**\n    - Format: 1024x1024 square iOS icon (rounded square)\n    - Use bold, chunky shapes that work at small sizes\n    - Match the style's color palette from background_color\n    - Professional, modern, App Store quality\n    - Examples of GOOD icons:\n      * \"iOS app icon. Large bold shield symbol in center, bright gradient (cyan to purple). Simple, clean design. Minimal details. Rounded square. 1024x1024.\"\n      * \"iOS app icon. Big crescent moon symbol, deep purple gradient background. Soft glow effect. Simple and bold. Rounded square. 1024x1024.\"\n      * \"iOS app icon. Single large bat silhouette in center, glowing purple outline on dark background. Bold and simple. Rounded square. 1024x1024.\"\n\n    ## 6. COLOR THEME\n\n    Define a color palette/theme for the app UI that will be used to generate consistent app screens:\n    - Be specific about colors (e.g., \"dark purple and electric cyan\", \"warm beige and sage green\")\n    - Should match the icon's color palette\n    - Should complement the style's aesthetic if a style is provided\n    - {% if ui_style %}Match the vibe: {{ ui_style }}{% endif %}\n    - Include 2-4 specific colors that work well together\n    - Examples:\n      * \"Dark purple gradient with electric cyan accents\"\n      * \"Soft blue-green with white and pale yellow highlights\"\n      * \"Bright vibrant yellow with hot pink and cyan accents\"\n\n    ## 7. STYLE GUIDE\n\n    Write a 2-3 sentence visual style guide describing the UI aesthetic:\n    - Cover: UI mood/aesthetic, typography approach, and overall design philosophy\n    - Should align with the color theme and app concept\n    - {% if ui_style %}Match the vibe: {{ ui_style }}{% endif %}\n    - Examples:\n      * \"Clean minimal interface with generous whitespace and soft shadows. Uses rounded corners throughout for friendly, approachable feel. Typography: Bold sans-serif headlines paired with readable body text.\"\n      * \"Energetic interface with vibrant gradients and bold gamification elements. Dynamic typography with strong headlines and clear stats. Rounded corners and playful animations create an engaging experience.\"\n      * \"Serene minimal design with generous whitespace. Elegant serif headings paired with clean sans-serif body text. Subtle animations and organic shapes evoke calm and mindfulness.\"\n\n    ## MATCHING GUIDELINES:\n    - App concept should feel natural with the style's personality\n    - Category should accurately reflect the app's primary purpose\n    - Icon colors should match the color theme\n    - Icon mood should match style energy (calm vs energetic, playful vs serious, etc.)\n    - Color theme should be cohesive with the overall style aesthetic\n    - Style guide should align with color theme and app purpose\n    - {% if ui_style %}Visual style/vibe should be reflected in colors, icon, and style guide: {{ ui_style }}{% endif %}\n    - All outputs (name, category, description, icon, color theme, style guide) should work together harmoniously\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction ImproveAppDescription(\n  draft_description: string @description(\"Rough or placeholder description that needs to sound polished and App Store ready\"),\n  vibe_hint: string? @description(\"Optional tone, vibe, or audience notes to weave into the copy\")\n) -> ImprovedDescriptionOutput {\n  client Gemini25Flash\n  prompt #\"\n    {{ _.role(\"system\") }}\n    You are a marketing copywriter who specializes in App Store product descriptions that are clear, benefit-driven, and polished.\n\n    **CRITICAL APP STORE FORMAT REQUIREMENTS:**\n    - First sentence: Hook with the main value proposition (what the app does and why it matters)\n    - Middle 2-3 sentences: Key features and benefits (specific, tangible)\n    - Final sentence: Call-to-action or emotional closer\n    - Length: 3-5 sentences, 50-90 words total\n    - Tone: Professional but approachable, exciting but trustworthy\n    - Avoid: Repetition, buzzword overload, vague claims, excessive punctuation\n\n    **APP STORE DESCRIPTION EXAMPLES:**\n    - \"Transform your fitness journey into an epic adventure. Track workouts, earn achievements, and compete with friends through gamified challenges. Stay motivated with smart reminders and personalized goals. Your path to a stronger, healthier you starts here.\"\n    - \"Find calm in the chaos with guided meditation sessions designed for busy professionals. Choose from 5-minute mindfulness breaks, breathing exercises, and ambient soundscapes. Build a consistent practice with gentle reminders and progress tracking. Peace of mind, just a tap away.\"\n\n    {{ _.role(\"user\") }}\n    DRAFT DESCRIPTION:\n    {{ draft_description }}\n\n    {% if vibe_hint %}\n    TONE / VIBE TO REFLECT: {{ vibe_hint }}\n    {% endif %}\n\n    **YOUR TASK:**\n    Return THREE outputs:\n    1. improved_description: The app name + polished description\n    2. improved_style: A visual style guide that matches the app\n    3. inferred_category: The most appropriate App Store category\n\n    **improved_description Format:** `AppName: Description sentence 1. Description sentence 2. Description sentence 3. [Optional sentence 4-5.]`\n\n    **improved_description Requirements:**\n    1. Start with a catchy app name (1-3 words) followed by a colon\n       - If input is rough concept like \"photo sharing app between batman and robin\" → Create catchy name (e.g., \"DynamicDuo\", \"Gotham Link\")\n       - If input mentions an app name → Extract and refine it\n    2. After the colon, write the polished App Store description (3-5 sentences, 50-90 words)\n    3. Match the requested tone/vibe if provided\n\n    **improved_style Requirements:**\n    1. Write 2-3 sentences describing the visual design approach\n    2. Cover: UI mood/aesthetic, color palette hints, typography style, and overall design philosophy\n    3. Should feel cohesive with the app's purpose and target audience\n    4. Match the tone/vibe if provided\n\n    **inferred_category Requirements:**\n    1. Choose the SINGLE most relevant App Store category from this list:\n       - Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference\n    2. Base your choice on the app's PRIMARY purpose and functionality\n    3. Return ONLY the category name (e.g., \"Health & Fitness\", not \"the category is Health & Fitness\")\n\n    **Examples:**\n\n    improved_description: \"FitQuest: Transform your fitness journey into an epic adventure. Track workouts, earn achievements, and compete with friends through gamified challenges. Stay motivated with smart reminders and personalized goals. Your path to a stronger, healthier you starts here.\"\n    improved_style: \"Energetic interface with vibrant gradients (purple to cyan) and bold gamification elements. Dynamic typography with strong headlines and clear stats. Rounded corners and playful animations create an engaging, motivating experience.\"\n    inferred_category: \"Health & Fitness\"\n\n    improved_description: \"Mindful Minutes: Discover tranquility amidst your busy schedule with guided meditations crafted for real life. Access quick sessions from 3 to 15 minutes, perfect for commutes or breaks. Build consistent practice with calming sounds and mood tracking. Reclaim your focus and peace, one minute at a time.\"\n    improved_style: \"Serene minimal design with soft blue-green palette and generous whitespace. Elegant serif headings paired with clean sans-serif body text. Subtle animations and organic shapes evoke calm and mindfulness.\"\n    inferred_category: \"Health & Fitness\"\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// APP DESCRIPTION REFORMATTING\n// ============================================\n\n// Reformat existing app descriptions to use modern App Store formatting\n// with KEY FEATURES as the only header and natural conversational flow\nfunction ReformatAppDescription(\n  app_name: string @description(\"The app's name\"),\n  current_description: string @description(\"The existing app description that needs reformatting\"),\n  app_category: string? @description(\"Optional app category (e.g., 'Health & Fitness', 'Productivity')\"),\n  style_guide: string? @description(\"Optional style guide describing the app's visual design\"),\n  user_feedback: string? @description(\"Optional user feedback for customization (e.g., 'Make it more playful', 'Emphasize productivity features')\"),\n  app_screenshots: image[]? @description(\"Optional screenshots showing the app's interface and features\")\n) -> string {\n  client ClaudeHaiku45\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are reformatting an existing app description to match modern App Store best practices with natural, conversational writing.\n\n    APP NAME: {{ app_name }}\n    {% if app_category %}\n    CATEGORY: {{ app_category }}\n    {% endif %}\n    {% if style_guide %}\n    STYLE GUIDE: {{ style_guide }}\n    {% endif %}\n    {% if user_feedback %}\n    USER FEEDBACK: {{ user_feedback }}\n    (Incorporate this feedback into the reformatted description - adjust tone, emphasis, or specific details as requested)\n    {% endif %}\n    \n    {% if app_screenshots %}\n    APP SCREENSHOTS:\n    The following screenshots show the actual app interface and features. Use these to understand what the app does and ensure your description accurately reflects the visible functionality:\n    {% for screenshot in app_screenshots %}\n    {{ _.role(\"user\") }}\n    {{ screenshot }}\n    {% endfor %}\n    {% endif %}\n\n    CURRENT DESCRIPTION:\n    {{ current_description }}\n\n    TASK: Reformat this description to use natural App Store formatting with KEY FEATURES as the only header.\n\n    ## FORMATTING REQUIREMENTS\n\n    Your output MUST follow this natural, conversational structure:\n\n    ```\n    [Opening Hook - 2-3 compelling sentences capturing core value proposition]\n\n    KEY FEATURES:\n    * Feature 1 name: Detailed description of what users can do and why it matters\n    * Feature 2 name: Detailed description of what users can do and why it matters\n    * Feature 3 name: Detailed description of what users can do and why it matters\n    * Feature 4 name: Detailed description of what users can do and why it matters\n    * Feature 5 name: Detailed description of what users can do and why it matters (if applicable)\n\n    [Benefits paragraph - naturally explain how the app improves users' lives, NO \"BENEFITS:\" header]\n\n    [Target audience paragraph - naturally describe who would love this, NO \"PERFECT FOR:\" header]\n\n    [Closing call-to-action sentence]\n    ```\n\n    ## INSTRUCTIONS\n\n    1. **Preserve Core Content**: Keep all the key features, benefits, and selling points from the original description\n    2. **Extract Features**: Identify 4-5 main features from the current description and format them as bullet points\n    3. **Natural Benefits**: Write a conversational paragraph about benefits WITHOUT using \"BENEFITS:\" header\n    4. **Natural Target Audience**: Describe who would love this app naturally WITHOUT using \"PERFECT FOR:\" header\n    5. **Add Proper Formatting**: Include literal line breaks between sections (use \\n\\n)\n    6. **Maintain Tone**: Keep the same writing style and mood as the original\n    7. **Length**: Aim for 300-400 words (~2,100 characters)\n\n    ## CRITICAL RULES\n\n    - **Only use \"KEY FEATURES:\" as a header** - everything else should be natural paragraphs\n    - **Use asterisk bullets** (*) for features\n    - **Include line breaks** between sections\n    - **Each feature** should have a name followed by colon and description\n    - **Preserve the app's unique selling points** and personality\n    - **Don't invent new features** - only use what's in the original description (but expand on them)\n    - **Make it conversational** and feel like a real App Store page, not a formal document\n    - **Never say \"This game is perfect for...\"** - instead write naturally like \"Whether you're X or Y, you'll love...\"\n\n    Return ONLY the reformatted description. Do not include any explanations or meta-commentary.\n  \"#\n}\n\n// ============================================\n// APP DESIGN PLANNING\n// ============================================\n\n// Generate app design plan (tabs, layout, screen details) - NO image generation\n// Uses high-quality reasoning model (Sonnet 4.5) for complex structural planning\nfunction GenerateAppDesignPlan(\n  app_name: string @description(\"Name of the app\"),\n  app_description: string @description(\"Description of what the app does\"),\n  app_category: string @description(\"App Store category (e.g., 'Games', 'Productivity', 'Social Networking'). Used to determine appropriate screen types.\"),\n  style_guide: string @description(\"Complete visual style guide including colors, typography, mood, and design philosophy\"),\n  num_screens: int @description(\"Number of screens to plan (3-10)\")\n) -> AppStructure {\n  client ClaudeHaiku45\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are creating a structural blueprint for an iPhone app. This plan will guide image generation, so be specific and detailed.\n\n    **APP DETAILS:**\n    - Name: {{ app_name }}\n    - Category: {{ app_category }}\n    - Description: {{ app_description }}\n    - Style Guide: {{ style_guide }}\n    - Number of screens: {{ num_screens }}\n\n    **YOUR TASK:**\n    Create a comprehensive app structure plan that defines:\n    1. Navigation pattern (tabs or no tabs)\n    2. Common layout elements across all screens\n    3. Detailed plan for each of the {{ num_screens }} screens\n\n    **CRITICAL REQUIREMENTS:**\n\n    ## 1. TAB NAVIGATION ANALYSIS\n\n    Determine if this app should use bottom navigation tabs:\n    - **Use tabs if:** App has 3-5 distinct sections users switch between frequently (e.g., social apps, e-commerce, content platforms)\n    - **No tabs if:** Single-purpose utility, linear workflows, games, or simple tools\n\n    If using tabs:\n    - Choose 3-5 clear tab names (e.g., \"Home\", \"Explore\", \"Messages\", \"Profile\")\n    - Describe each tab's icon (simple description, e.g., \"house outline icon\", \"compass icon\")\n    - **CRITICAL: Extract EXACT colors as hex codes:**\n      * **active_tab_color**: EXACT hex code for active tab icon and label (e.g., '#7B68EE', '#D4704A', '#FF6B6B'). Extract from style_guide colors.\n      * **inactive_tab_color**: EXACT hex code for inactive tabs (e.g., '#999999', '#CCCCCC', '#888888'). Usually a muted gray.\n      * **IMPORTANT NOTE**: These hex codes are for INTERNAL STRUCTURE USE ONLY. They will be converted to natural language descriptions when generating image prompts to prevent them from appearing as visible text on screens.\n      * **active_icon_style**: Either \"filled\" or \"outline\" - which looks better for the active tab?\n      * **inactive_icon_style**: Either \"filled\" or \"outline\" - usually opposite of active (if active is filled, inactive is outline)\n    - **CRITICAL: Define selection indicator (SIMPLE):**\n      * **selection_indicator**: Pick ONE simple approach:\n        - \"underline_2px\" - A 2px line under the active tab (most common)\n        - \"pill_background\" - A rounded background behind the active tab\n        - \"none\" - Just use color/fill style to distinguish active tab\n      * Don't over-specify - the image generator will handle the visual details\n      * Most apps use \"underline_2px\" or \"pill_background\"\n    - **Tab bar measurements:**\n      * **tab_bar_height**: Typically 72px\n      * **icon_size**: Typically 24px\n      * **label_size**: Typically 11px\n    - Call out safe area behavior: tab bar hugs absolute bottom edge, but interactive content stays above it with at least 24px spacing\n\n    ## 2. COMMON LAYOUT ELEMENTS\n\n    Define elements that appear on EVERY screen:\n\n    **CRITICAL - FULL BLEED REQUIREMENT:**\n    - ALL screens MUST be full-bleed (edge-to-edge) with NO white margins or borders\n    - Background fills from coordinates (0, 0) to (full canvas width, full canvas height)\n    - Status bar starts at y=0 (absolute top edge, no gap above)\n    - Tab bar (if exists) ends at y=canvas_height (absolute bottom edge, no gap below)\n    - Content can extend to all four edges of the screen\n\n    **Common elements to define:**\n    - **Status bar:** ALWAYS at absolute top edge (y=0, no gap above). Styling: text color (light/dark based on background), icons (battery, signal, time)\n    - **Background color:** Main background color from style_guide that fills ENTIRE screen edge-to-edge\n    - **Content start position:** Where main content begins (immediately below status bar, around 44-60px from top)\n    - **Header patterns:** If any common headers appear across screens (style, positioning)\n    - **Overall spacing:** Internal padding for content (NOT edge margins - backgrounds fill to edges)\n    - **Safe area guidance:** Define where scrollable content ends and safe area begins. When tabs exist: all interactive content (CTAs, buttons, cards) must end at least 24-32px ABOVE the tab bar. Floating action buttons should be positioned in this safe area zone (e.g., \"bottom: 96px\" for 72px tab bar + 24px spacing). When no tabs: maintain 24-32px from bottom edge for home indicator.\n    - **Any persistent UI elements:** Elements that appear on all screens\n\n    ## 3. SCREEN DETAILS\n\n    For each of the {{ num_screens }} screens, define:\n\n    **screen_name:** Descriptive name (e.g., \"Home Dashboard\", \"Video Chat\", \"Settings\")\n\n    **purpose:** What this screen accomplishes in 1-2 sentences\n\n    **layout_type:** Choose from:\n\n    GENERAL (all apps):\n    - \"dashboard\" - Stats, cards, summaries, overview\n    - \"list\" - Scrollable list of items (messages, products, articles)\n    - \"grid\" - Grid of images/cards (photos, products, media)\n    - \"detail\" - Single item detail view (profile, article, product page)\n    - \"form\" - Input fields, settings, creation flows\n    - \"media\" - Large media display (video, photo viewer)\n    - \"chat\" - Messaging interface\n    - \"map\" - Location-based interface\n\n    GAMES ONLY (use these for Games category):\n    - \"gameplay\" - Main game action screen showing actual gameplay (player view, HUD, interactive scene, game environment)\n    - \"level\" - Level/mission selection or progress screen\n    - \"inventory\" - Character equipment, items, upgrades, gear\n    - \"dialogue\" - Story scenes, character conversations, narrative moments\n\n    **unique_elements:** Specific UI components for THIS screen:\n    - Headers, titles, labels (with text examples)\n    - Buttons and CTAs (what they say, where positioned)\n    - Cards, lists, grids (what content they contain)\n    - Input fields (what data they collect)\n    - Images, icons, illustrations (what they depict)\n    - Stats, progress bars, graphs (what metrics)\n    - **CRITICAL: Use REALISTIC placeholder content, NOT bracketed placeholders:**\n      * ✅ GOOD: \"Username: Sarah Chen\", \"Post title: My Morning Routine\", \"Score: 1,250 points\", \"Profile photo: woman with glasses\"\n      * ❌ BAD: \"[Username]\", \"[Post Title]\", \"[User Photo]\", \"[Image #1]\", \"[Score]\"\n      * Generate believable names, titles, numbers, descriptions\n    - Be concrete and specific!\n\n    **active_tab_index:** If using tabs, which tab (0-based index) is active on this screen? If screen doesn't map to a tab or no tabs exist, use null.\n\n    **SCREEN VARIETY:**\n\n    **CRITICAL - Category-Specific Screen Types:**\n\n    {% if app_category == \"Games\" %}\n    **THIS IS A GAME (Category: {{ app_category }}):**\n    Focus on GAMEPLAY screens, NOT menu screens. Players want to see the actual game experience.\n\n    For {{ num_screens }} screens, breakdown:\n    - **{{ num_screens - 1 }} screens: GAMEPLAY-FOCUSED**\n      * Use layout_type: \"gameplay\", \"level\", \"inventory\", \"dialogue\"\n      * Examples: \"Desert Highway Chase\", \"Bar Fight Scene\", \"Character Inventory\", \"Boss Battle\", \"Story Dialogue with Villain\"\n      * Show actual game environments, characters, action, HUD elements\n    - **Maximum 1 screen: Menu/UI screen**\n      * Only if needed: main menu, settings, or pause screen\n      * Use layout_type: \"dashboard\" or \"form\"\n\n    ❌ **AVOID for games:**\n    - Multiple settings/preferences screens\n    - Save game screens\n    - Credits screens\n    - \"Quit to title\" screens\n    - Loading screens\n\n    ✅ **SHOW for games:**\n    - Different game locations/levels\n    - Character interactions\n    - Combat/action scenes\n    - Puzzle/challenge screens\n    - Inventory/equipment management\n    - Story/narrative moments\n\n    {% else %}\n    **THIS IS A REGULAR APP (Category: {{ app_category }}):**\n    - Include diverse screen types (mix of dashboard, list, detail, form)\n    - Each screen should serve a distinct purpose\n    - Cover main user flows of the app\n    - For {{ num_screens }} screens, typical breakdown:\n      * 1-2 landing/home screens\n      * 2-3 feature screens (core functionality)\n      * 1 profile/account screen\n      * 1 settings/preferences screen\n    {% endif %}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// IMAGE PROMPT GENERATION\n// ============================================\n\n// Generate image prompt for the FIRST screen (establishes visual style foundation)\nfunction GenerateFirstScreenImagePrompt(\n  app_name: string @description(\"Name of the app\"),\n  style_guide: string @description(\"Complete visual style guide including colors, typography, mood\"),\n  common_layout: string @description(\"Common layout elements from AppStructure\"),\n  tabs: TabStructure @description(\"Tab structure from AppStructure\"),\n  screen_detail: ScreenDetail @description(\"Details for this specific screen\")\n) -> ScreenImagePrompt {\n  client ClaudeHaiku45\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Generate a canvas-editing prompt for Gemini Flash to create the FIRST iPhone app screen.\n    This screen establishes the visual style foundation for all subsequent screens.\n\n    **APP CONTEXT:**\n    - App Name: {{ app_name }}\n    - Style Guide: {{ style_guide }}\n\n    **COMMON LAYOUT (applies to all screens):**\n    {{ common_layout }}\n\n    **TAB NAVIGATION:**\n    {% if tabs.has_tabs %}\n    This app uses bottom navigation with {{ tabs.tab_names | length }} tabs:\n    {% for tab_name in tabs.tab_names %}\n    - Tab {{ loop.index0 }}: \"{{ tab_name }}\" ({{ tabs.tab_icon_descriptions[loop.index0] }})\n    {% endfor %}\n\n    **TAB STYLING:**\n    - Active tab color: Use the primary accent color from style guide (based on {{ tabs.active_tab_color }})\n    - Active tab icons: {{ tabs.active_icon_style }} style\n    - Inactive tab color: Light gray (based on {{ tabs.inactive_tab_color }})\n    - Inactive tab icons: {{ tabs.inactive_icon_style }} style\n    - Selection indicator: {{ tabs.selection_indicator }}{% if tabs.selection_indicator == 'underline_2px' %} (thin line under active tab){% endif %}{% if tabs.selection_indicator == 'pill_background' %} (rounded background behind active tab){% endif %}\n    - Tab bar: Standard height, icons above labels with small gap, evenly spaced\n\n    **CRITICAL: These color codes ({{ tabs.active_tab_color }}, {{ tabs.inactive_tab_color }}) are for styling reference ONLY. DO NOT render them as visible text on the screen.**\n    {% else %}\n    This app does not use bottom navigation tabs.\n    {% endif %}\n\n    **THIS SCREEN:**\n    - Name: {{ screen_detail.screen_name }}\n    - Purpose: {{ screen_detail.purpose }}\n    - Layout Type: {{ screen_detail.layout_type }}\n    - Unique Elements: {{ screen_detail.unique_elements }}\n    {% if screen_detail.active_tab_index is defined and screen_detail.active_tab_index is not none %}\n    - Active Tab: {{ tabs.tab_names[screen_detail.active_tab_index] }} (index {{ screen_detail.active_tab_index }})\n    {% endif %}\n\n    **IMAGE EDITING INSTRUCTIONS:**\n    You will receive ONE image:\n    - **Canvas image**: Blank iPhone-sized canvas to paint on\n\n    Paint the app UI directly onto this canvas.\n\n    **CRITICAL FULL-BLEED REQUIREMENTS:**\n    - Background fills entire canvas edge-to-edge. NO white borders around edges.\n    - Status bar at top edge (y=0)\n    {% if tabs.has_tabs %}- Tab bar at bottom edge{% endif %}\n    - Paint OVER entire canvas. IGNORE any device frame you see. Fill EVERY pixel.\n\n    **CRITICAL: DO NOT RENDER TECHNICAL SPECS AS TEXT**\n    - DO NOT write color codes (like #7B68EE, #999999, etc.) as visible text on the screen\n    - DO NOT write pixel values (like 72px, 24px, etc.) as visible text\n    - DO NOT write hex codes, RGB values, or any technical specifications as text\n    - These are STYLING INSTRUCTIONS ONLY - not content to display to users\n    - Use the colors and sizes specified, but never show the codes/values themselves\n\n    **GENERATE THE PROMPT:**\n\n    **CRITICAL: Output MUST be under 4000 characters. Use extreme brevity.**\n\n    Create a concise canvas-editing prompt:\n    1. Start: \"EDIT TASK: Paint DIRECTLY ONTO entire canvas image. CRITICAL: Fill EVERY pixel edge-to-edge from top-left corner to bottom-right corner. NO margins, NO white space, NO borders around edges. Paint over entire canvas area.\"\n    2. Screen: \"{{ screen_detail.screen_name }}\"\n    3. **BACKGROUND**: Extract bg color from common_layout. Fill entire canvas edge-to-edge with this color.\n    4. **STATUS BAR** (y=0, top edge): Time left, wifi/battery/icons right, styling from common_layout\n    {% if tabs.has_tabs %}\n    5. **TAB BAR** (bottom edge, standard height):\n    Tabs: {{ tabs.tab_names | join(', ') }}\n    {% if screen_detail.active_tab_index is defined and screen_detail.active_tab_index is not none %}\n    - Active \"{{ tabs.tab_names[screen_detail.active_tab_index] }}\": {{ tabs.active_icon_style }} icon in accent color + label{% if tabs.selection_indicator == 'underline_2px' %} + thin underline below{% endif %}{% if tabs.selection_indicator == 'pill_background' %} + rounded pill background{% endif %}\n    - Others: {{ tabs.inactive_icon_style }} icon in light gray + label\n    {% else %}\n    - Active \"{{ tabs.tab_names[0] }}\": {{ tabs.active_icon_style }} icon in accent color + label{% if tabs.selection_indicator == 'underline_2px' %} + thin underline{% endif %}{% if tabs.selection_indicator == 'pill_background' %} + rounded pill background{% endif %}\n    - Others: {{ tabs.inactive_icon_style }} icon in light gray + label\n    {% endif %}\n    Evenly spaced. Icons above labels, small gap.\n    6. **CONTENT**: {{ screen_detail.unique_elements }}. All buttons/interactive elements must end well above tab bar.\n    {% else %}\n    5. **CONTENT**: {{ screen_detail.unique_elements }}. Buttons/CTAs near bottom should leave margin from bottom edge.\n    {% endif %}\n    7. Colors: Extract color names from style_guide, apply as visual styling (NOT as text)\n\n    **BREVITY RULES:**\n    - Use abbreviations: \"y=\" not \"y-coordinate\", \"bg\", \"px\"\n    - Combine related info\n    - Target 2500-3500 chars MAX\n\n    **MUST INCLUDE:**\n    - Paint entire canvas edge-to-edge. ZERO margins. Fill EVERY pixel to all 4 edges.\n    - Status bar at top edge{% if tabs.has_tabs %}, tab bar at bottom edge{% endif %}\n    {% if tabs.has_tabs %}- All buttons/CTAs must end well above tab bar{% endif %}\n    - Background color fills entire canvas corner to corner\n    - If you see white space or device frame, paint OVER it completely\n    - CRITICAL: Never render color codes, hex values, or pixel measurements as visible text\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Generate image prompt for screens 2+ WITH reference image (maintains visual consistency)\nfunction GenerateScreenImagePromptWithReference(\n  app_name: string @description(\"Name of the app\"),\n  style_guide: string @description(\"Complete visual style guide including colors, typography, mood\"),\n  common_layout: string @description(\"Common layout elements from AppStructure\"),\n  tabs: TabStructure @description(\"Tab structure from AppStructure\"),\n  screen_detail: ScreenDetail @description(\"Details for this specific screen\")\n) -> ScreenImagePrompt {\n  client ClaudeHaiku45\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Generate a canvas-editing prompt for Gemini Flash. This screen MUST match the reference image's visual style.\n\n    **APP CONTEXT:**\n    - App Name: {{ app_name }}\n    - Style Guide: {{ style_guide }}\n\n    **COMMON LAYOUT:**\n    {{ common_layout }}\n\n    **TAB NAVIGATION:**\n    {% if tabs.has_tabs %}\n    Tabs: {% for tab_name in tabs.tab_names %}\"{{ tab_name }}\"{% if not loop.last %}, {% endif %}{% endfor %}\n\n    **TAB STYLING:**\n    - Active tab color: Use the primary accent color from style guide (based on {{ tabs.active_tab_color }})\n    - Active tab icons: {{ tabs.active_icon_style }} style\n    - Inactive tab color: Light gray (based on {{ tabs.inactive_tab_color }})\n    - Inactive tab icons: {{ tabs.inactive_icon_style }} style\n    - Selection indicator: {{ tabs.selection_indicator }}\n\n    **CRITICAL: These color codes ({{ tabs.active_tab_color }}, {{ tabs.inactive_tab_color }}) are for styling reference ONLY. DO NOT render them as visible text on the screen.**\n    {% else %}\n    No tabs.\n    {% endif %}\n\n    **THIS SCREEN:**\n    - Name: {{ screen_detail.screen_name }}\n    - Layout: {{ screen_detail.layout_type }}\n    - Elements: {{ screen_detail.unique_elements }}\n    {% if screen_detail.active_tab_index is defined and screen_detail.active_tab_index is not none %}\n    - Active Tab: \"{{ tabs.tab_names[screen_detail.active_tab_index] }}\" (index {{ screen_detail.active_tab_index }})\n    {% endif %}\n\n    **IMAGE EDITING:**\n    TWO images provided:\n    1. Reference image (image 1) - match this visual style EXACTLY\n    2. Blank canvas (image 2) - paint on this\n\n    **MATCH REFERENCE:**\n    - Copy EXACT colors, fonts, shadows, spacing, corner radius from reference (image 1)\n    - Status bar positioning and background fill - no gap at top\n    - Paint on blank canvas (image 2) using reference (image 1) as style guide\n\n    {% if tabs.has_tabs and screen_detail.active_tab_index is defined and screen_detail.active_tab_index is not none %}\n    **TAB ADAPTATION (CRITICAL):**\n    Reference may show different active tab. For THIS screen, recreate tab bar from scratch using these specs:\n    - Active \"{{ tabs.tab_names[screen_detail.active_tab_index] }}\": {{ tabs.active_icon_style }} icon in accent color + label\n    - Inactive (all others): {{ tabs.inactive_icon_style }} icon in light gray + label\n    - Selection indicator: {{ tabs.selection_indicator }}{% if tabs.selection_indicator == 'underline_2px' %} (thin line under active){% endif %}{% if tabs.selection_indicator == 'pill_background' %} (rounded pill behind active){% endif %}\n    - Match reference tab bar's exact sizing, spacing, and positioning - only change which tab is active\n    {% endif %}\n\n    Only change: screen-specific content for \"{{ screen_detail.screen_name }}\".\n\n    **FULL-BLEED:**\n    - Paint entire canvas edge-to-edge. NO white borders around edges.\n    - Status bar at top edge{% if tabs.has_tabs %}, tab bar at bottom edge{% endif %}\n    - Paint OVER entire canvas. IGNORE device frame. Fill EVERY pixel.\n\n    **CRITICAL: DO NOT RENDER TECHNICAL SPECS AS TEXT**\n    - DO NOT write color codes (like #7B68EE, #999999, etc.) as visible text on the screen\n    - DO NOT write pixel values (like 72px, 24px, etc.) as visible text\n    - DO NOT write hex codes, RGB values, or any technical specifications as text\n    - These are STYLING INSTRUCTIONS ONLY - not content to display to users\n    - Use the colors and sizes specified, but never show the codes/values themselves\n\n    **GENERATE PROMPT:**\n\n    **CRITICAL: Under 4000 chars. Extreme brevity.**\n\n    1. Start: \"EDIT TASK: Paint on blank canvas (image 2). Match reference (image 1) style EXACTLY. Fill EVERY pixel edge-to-edge from corner to corner. NO margins, NO white space.\"\n    2. Screen: \"{{ screen_detail.screen_name }}\"\n    3. **BG**: Match reference gradient/color exactly. Fill entire canvas edge-to-edge.\n    4. **STATUS BAR** (top edge): Match reference positioning exactly\n    {% if tabs.has_tabs %}\n    5. **TAB BAR** (bottom edge, standard height): Recreate from specs. Match reference sizing/spacing. ONLY change which tab is active.\n    Tabs: {{ tabs.tab_names | join(', ') }}\n    {% if screen_detail.active_tab_index is defined and screen_detail.active_tab_index is not none %}\n    - Active \"{{ tabs.tab_names[screen_detail.active_tab_index] }}\": {{ tabs.active_icon_style }} icon in accent color + label{% if tabs.selection_indicator == 'underline_2px' %} + thin underline{% endif %}{% if tabs.selection_indicator == 'pill_background' %} + rounded pill background (match reference pill sizing){% endif %}\n    - Others: {{ tabs.inactive_icon_style }} icon in light gray + label\n    {% else %}\n    - Active \"{{ tabs.tab_names[0] }}\": {{ tabs.active_icon_style }} icon in accent color + label{% if tabs.selection_indicator == 'underline_2px' %} + thin underline{% endif %}{% if tabs.selection_indicator == 'pill_background' %} + pill background{% endif %}\n    - Others: {{ tabs.inactive_icon_style }} icon in light gray + label\n    {% endif %}\n    6. **CONTENT**: {{ screen_detail.unique_elements }}. All buttons/CTAs well above tab bar.\n    {% else %}\n    5. **CONTENT**: {{ screen_detail.unique_elements }}. Buttons/CTAs near bottom leave margin from bottom edge.\n    {% endif %}\n    7. Match reference: colors, fonts, shadows, spacing, corner radii (NOT as text)\n\n    **BREVITY:**\n    - Abbreviations: y=, bg, px\n    - Combine info\n    - 2500-3500 chars\n\n    **MUST INCLUDE:**\n    - Match reference (image 1). Paint on canvas (image 2). Fill EVERY pixel edge-to-edge to all 4 corners. ZERO white space.\n    - Background fills entire canvas corner to corner\n    {% if tabs.has_tabs %}- Tab bar: Recreate using specified color styling. Match reference sizing/spacing. ONLY change which tab is active: \"{{ tabs.tab_names[screen_detail.active_tab_index] if screen_detail.active_tab_index is defined and screen_detail.active_tab_index is not none else tabs.tab_names[0] }}\" gets accent color{% if tabs.selection_indicator == 'underline_2px' %} + underline{% endif %}{% if tabs.selection_indicator == 'pill_background' %} + pill{% endif %}, others get light gray{% endif %}\n    - Status bar at top edge{% if tabs.has_tabs %}, tabs at bottom edge{% endif %}\n    - CRITICAL: Never render color codes, hex values, or pixel measurements as visible text\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// COVER IMAGE GENERATION\n// ============================================\n\nclass CoverImagePrompt {\n  image_prompt string @description(\"Complete text-to-image prompt for generating a promotional cover image (100-150 words). Should capture the app's essence, visual style, and key features in a single compelling hero image.\")\n  style_notes string @description(\"Visual style guidance: composition, color palette, mood, and design approach for the cover image\")\n}\n\nclass CoverVideoPrompt {\n  video_prompt string @description(\"Image-to-video prompt for Hailuo (max 2000 chars). Describes subtle motion, camera movement, and animation that creates a seamless loop from the cover image.\")\n}\n\nfunction GenerateAppCoverImagePrompt(\n  app_name: string @description(\"Name of the app\"),\n  app_description: string @description(\"App description and subtitle\"),\n  app_category: string? @description(\"App Store category\"),\n  style_guide: string? @description(\"Visual style guide if available\"),\n  screen_names: string[] @description(\"Names of the app screens (e.g., 'Home Dashboard', 'Profile Settings', 'Chat View'). These names are often descriptive of the screen's purpose.\"),\n  user_feedback: string? @description(\"Optional user guidance or feedback for the cover image generation (e.g., 'focus on gameplay', 'show the social features', 'make it minimal')\")\n) -> CoverImagePrompt {\n  client ClaudeHaiku45\n  prompt #\"\n    {{ _.role(\"user\") }}\n    \n    You are creating a text-to-image prompt for a promotional COVER IMAGE for an app.\n    This is like the hero/banner images you see in app stores - NOT the app icon.\n    \n    **APP DETAILS:**\n    - Name: {{ app_name }}\n    - Description: {{ app_description }}\n    {% if app_category %}- Category: {{ app_category }}{% endif %}\n    {% if style_guide %}- Style Guide: {{ style_guide }}{% endif %}\n    \n    **APP SCREENS:**\n    The app has the following screens:\n    {% for screen_name in screen_names %}\n    - {{ screen_name }}\n    {% endfor %}\n    \n    {% if user_feedback %}\n    **USER GUIDANCE:**\n    {{ user_feedback }}\n    (Consider this feedback when deciding on composition, device mockup usage, visual elements, and overall approach)\n    {% endif %}\n    \n    **COVER IMAGE REQUIREMENTS:**\n    \n    1. **Format:** 2:1 aspect ratio landscape banner (1920×960 or 2048×1024)\n    2. **Purpose:** Promotional hero image for app store listings - eye-catching, professional, cinematic\n    3. **Content:** Should showcase the app's personality and key features visually\n    4. **NOT an icon:** This is a large promotional banner, not a small icon\n    5. **Device mockups:** Use smartphone mockup(s) strategically - positioned in upper portion or angled to leave bottom area clear. For abstract concepts, consider pure visual storytelling without devices.\n    \n    **CRITICAL COMPOSITION REQUIREMENT - BOTTOM OVERLAY ZONE:**\n    The cover image will be displayed with:\n    - Bottom 35-40% fading to transparent with a gradient mask\n    - App icon and title overlaid at the bottom left\n    - Therefore: Keep the bottom 35% relatively clear or with subtle elements\n    - Primary focal points should be in the top 60-65% of the image\n    - Composition should naturally flow downward or leave breathing room at bottom\n    - Think: Hero shot with sky/top focus, angled devices pointing down, abstract elements rising from bottom\n    - Bad: Important content centered vertically (will be obscured by overlay)\n    - Good: Important content in upper 2/3, gradient backgrounds, devices angled to leave bottom clear\n    \n    **CRITICAL: ABSOLUTELY NO TEXT IN IMAGE**\n    - DO NOT include any text, labels, titles, typography, letters, words, or numbers in the image prompt\n    - NO app name overlays, NO screen labels, NO UI text mockups, NO readable text of any kind\n    - NO hex codes or color values (use \"bright teal\" instead of hex codes)\n    - NO UI elements with visible text (buttons with text, labels, captions, etc.)\n    - The cover image should be purely visual - no readable text, codes, or typography whatsoever\n    - Communicate the app through imagery, composition, colors, shapes, and visual elements only\n    - Use color names (teal, violet, orange) NOT hex codes in the prompt\n    - When describing device mockups, specify \"no visible text on screen\" or \"abstract UI elements without text\"\n    \n    **DECISION FRAMEWORK - Use device mockup when:**\n    - The app's UI is a key selling point (design tools, games, productivity apps with unique interfaces)\n    - Showing specific screens helps explain functionality (multi-screen flows, unique interactions)\n    - The app category is UI-focused (Photo & Video, Productivity, Games with visible UI)\n    \n    **Skip device mockup when:**\n    - Abstract concept is more powerful (meditation, wellness, simple utilities)\n    - Lifestyle imagery better conveys the benefit (fitness outcomes, travel experiences, social connection)\n    - The app is more about outcomes than interface (habits, tracking, minimal tools)\n    - Pure visual metaphor tells the story better\n    \n    **PROMPT STRUCTURE:**\n    \n    Your image_prompt should describe:\n    - Main visual concept (what's the hero image showing?)\n    - Composition (layout, perspective, focal points)\n    - Color scheme (should align with style_guide if provided)\n    - Mood and atmosphere\n    - Key visual elements that represent the app's functionality\n    - Style (modern UI mockup, lifestyle shot, abstract concept, etc.)\n    - **NO TEXT** - purely visual storytelling\n    \n    **EXAMPLES OF GOOD PROMPTS (all follow 2:1 ratio with bottom-clear composition):**\n    \n    WITH device mockup (fitness app - devices positioned in upper portion):\n    \"2:1 cinematic fitness app banner. Vibrant gradient background (deep purple at top flowing to electric cyan at bottom). Two iPhone mockups in upper-center area, slightly angled, showing colorful abstract workout interfaces with progress rings and stat visualizations—no readable text on screens. Floating 3D UI elements (achievement badges, heart rate icons, trophy symbols) scattered around devices in upper 60%. Bottom 40% has clean gradient fade for overlay space. Dynamic energy with diagonal composition pointing upward. Professional product photography with dramatic lighting. High-energy, motivational aesthetic. 1920×960. No text, labels, or typography anywhere.\"\n    \n    WITHOUT device (meditation app - top-focused abstract concept):\n    \"2:1 serene meditation banner. Ethereal abstract composition with expanding concentric ripples emanating from top-center. Soft gradient sky (pale lavender to warm peach to sage green flowing down). Floating organic elements in upper area: soft glowing orbs, gentle wave patterns, delicate particle effects in muted pastels. Bottom third fades to pure gradient for clean overlay space. Dreamy, tranquil atmosphere with subtle glow and depth. Minimal, zen aesthetic emphasizing negative space. Purely visual mindfulness metaphor. 1920×960. No text, numbers, or readable typography.\"\n    \n    WITH device mockup (social app - angled composition):\n    \"2:1 vibrant social networking banner. Bright gradient background (sunny yellow at top transitioning to hot pink at bottom). Single iPhone mockup positioned in upper-right, tilted 15 degrees, displaying colorful abstract chat bubbles and profile cards—no visible text on screen. Floating 3D emoji reactions, notification icons, and message bubbles creating depth around device in top 65%. Bottom area has breathing room with pure gradient for icon/title overlay. Playful, energetic composition with dynamic perspective. Modern, fun, connected vibe. 1920×960. No text overlays or readable words.\"\n    \n    WITHOUT device (travel app - landscape hero shot):\n    \"2:1 epic travel adventure banner. Stunning mountain landscape hero shot with dramatic sky occupying top 70%. Warm golden hour lighting with orange-to-purple sunset gradient. Stylized abstract overlay elements in upper area: floating compass icons, subtle route lines, glowing location pins creating sense of journey. Lower 30% transitions to atmospheric haze and gradient for clean bottom space. Inspiring, wanderlust atmosphere with cinematic depth. Clean, adventurous aesthetic prioritizing the vista. 1920×960. No text, labels, or typography.\"\n    \n    **YOUR TASK:**\n    Generate image_prompt (100-150 words) and style_notes (2-3 sentences) for {{ app_name }}.\n    \n    **CRITICAL REMINDER - REPEAT THESE IN YOUR OUTPUT:**\n    - USE 2:1 aspect ratio (1920×960 or 2048×1024) - this is wider than typical 16:9\n    - KEEP bottom 35-40% relatively clear - primary focal points in top 60-65%\n    - DO NOT include text, titles, labels, numbers, letters, words, or any readable typography in the image prompt\n    - DO NOT include hex codes or color values (use \"bright teal\" not hex codes)\n    - Reference visual scenes and elements, but don't ask for text labels on them\n    - The image should communicate purely through visuals, colors, shapes, and composition\n    - Colors should be described as names/adjectives: \"vibrant teal\", \"deep violet\", \"bright orange\"\n    - When using device mockups, position them in upper portion or angle them to leave bottom clear\n    - END YOUR PROMPT with: \"1920×960. Bottom third clear for overlay. No text, words, letters, numbers, or readable typography anywhere in the image.\"\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// COVER VIDEO GENERATION\n// ============================================\n\n// Generate image-to-video prompt for converting cover image to seamless looping video\nfunction GenerateCoverVideoPrompt(\n  cover_image_url: string @description(\"URL of the cover image to animate\"),\n  app_name: string @description(\"Name of the app\"),\n  app_description: string @description(\"App description\"),\n  user_motion_prompt: string? @description(\"Optional user guidance for specific motion/animation (e.g., 'focus on subtle parallax', 'emphasize breathing effect', 'minimal camera movement')\")\n) -> CoverVideoPrompt {\n  client ClaudeHaiku45\n  prompt #\"\n    {{ _.role(\"user\") }}\n    \n    You are creating an image-to-video prompt for Minimax Hailuo-02 Fast model.\n    This will animate a static cover image into a seamless 6-second looping video.\n    \n    **APP CONTEXT:**\n    - App Name: {{ app_name }}\n    - Description: {{ app_description }}\n    - Cover Image URL: {{ cover_image_url }}\n    \n    {% if user_motion_prompt %}\n    **USER MOTION GUIDANCE:**\n    {{ user_motion_prompt }}\n    (Incorporate this guidance while maintaining the seamless loop and smooth motion requirements)\n    {% endif %}\n    \n    **VIDEO REQUIREMENTS:**\n    \n    1. **Duration**: 6 seconds (perfect for seamless loops)\n    2. **Purpose**: Add SUBTLE life to the cover - not dominate it\n    3. **Loop Quality**: ⚠️ ABSOLUTELY CRITICAL ⚠️ - PERFECT SEAMLESS LOOP - start and end frames MUST be IDENTICAL\n    4. **Style**: Professional, elegant, understated - background enhancement only\n    5. **Distraction Level**: MINIMAL - viewers should barely notice motion at first glance\n    6. **Animation Quality**: SMOOTH only - NO abrupt movements, NO sudden changes, NO jarring transitions\n    \n    **MOTION PHILOSOPHY:**\n    \n    The video should feel like the cover image is \"breathing\" or has ambient life, NOT like an animation.\n    Motion should be so subtle that it takes 2-3 seconds of viewing to even notice it's moving.\n    Think: living wallpaper, not animated ad. Ambient, not active. Atmospheric, not theatrical.\n    ABSOLUTELY NO abrupt, sudden, or jerky movements - everything must be butter smooth.\n    \n    **🚨 CRITICAL - PERFECT SEAMLESS LOOP 🚨:**\n    \n    THIS IS THE MOST IMPORTANT REQUIREMENT - THE VIDEO MUST LOOP PERFECTLY:\n    - The motion MUST start and end at the EXACT same position/state/frame\n    - Use ONLY cyclical movements: breathing effects, gentle oscillations, returning movements\n    - NEVER EVER use linear movements (pans, tilts, zooms) unless they reverse completely and smoothly\n    - Think: expand-contract, rotate-return, float-up-float-down, pulse-fade-pulse\n    - The loop restart should be COMPLETELY INVISIBLE - no \"jump\", no \"reset\", no discontinuity\n    - Every element that moves MUST return to its exact starting position\n    - Test mentally: \"If I watch this loop 100 times, will I see any jump or reset?\" Answer MUST be NO\n    \n    **Motion Quality (NO ABRUPT MOVEMENTS):**\n    - **Smoothness**: BUTTER SMOOTH only - use easing, not linear motion\n    - **Acceleration**: Gradual acceleration and deceleration - NEVER sudden starts or stops\n    - **Transitions**: Seamless, flowing, continuous - NO snaps, NO pops, NO jerks\n    - **Speed consistency**: Maintain consistent gentle speed throughout\n    - **Keywords**: \"smooth\", \"flowing\", \"gradual\", \"seamless\", \"continuous\", \"eased\"\n    \n    **Motion Intensity (KEEP IT MINIMAL):**\n    - **Maximum movement**: 2-3% of total size/position (reduced from 3-5%)\n    - **Speed**: VERY slow - full cycle over 6 seconds with smooth easing\n    - **Subtlety**: Motion should be barely perceptible\n    - **Professional**: Enhances elegance, doesn't demand attention\n    - **Keywords**: \"extremely subtle\", \"barely noticeable\", \"gentle\", \"soft\", \"minimal\", \"smooth\"\n    \n    **Common Cover Image Compositions:**\n    \n    **With Device Mockups:**\n    - Parallax: Devices in foreground, background moves slower\n    - Screen glow: Subtle pulsing light from screens\n    - Float: Devices gently rise and fall\n    - Rotation: Slight 3D rotation showing depth\n    \n    **Abstract/Gradient Backgrounds:**\n    - Gradient flow: Colors slowly shift and blend\n    - Particle float: Bokeh or light particles drift\n    - Breathing: Entire comp gently scales in/out\n    - Shimmer: Light sweep across surface\n    \n    **Landscape/Scene Imagery:**\n    - Camera push: Very subtle zoom in/out (returning to start)\n    - Atmospheric: Clouds, fog, or haze drift slowly\n    - Light shift: Lighting subtly changes and returns\n    - Parallax: Foreground and background depths\n    \n    **PROMPT STRUCTURE:**\n    \n    Your video_prompt should describe:\n    1. **Starting description**: What the image shows (briefly)\n    2. **Motion description**: Specific movements and their character\n    3. **Loop instruction**: Explicitly state it must loop seamlessly\n    4. **Technical notes**: Camera, lighting, atmosphere changes\n    5. **Pacing**: \"Slow\", \"smooth\", \"subtle\", \"gentle\"\n    \n    **EXAMPLE PROMPTS (all loop seamlessly with smooth motion):**\n    \n    Device mockup cover:\n    \"The promotional banner shows iPhone mockups displaying a colorful fitness app interface against a vibrant purple-to-cyan gradient. Extremely subtle parallax motion with smooth easing: background gradient barely shifts 2% deeper into purple then gradually, smoothly returns to exact original state. iPhone mockups float upward less than 3% with smooth acceleration and deceleration, then return to exact starting position. Screen interfaces have minimal glow pulse, brightness changing only 3-4% with gradual transitions. All motion is barely perceptible and butter smooth. Perfect seamless loop - exact start/end match with zero discontinuity. Very slow, smooth, atmospheric. Camera completely static. Professional living wallpaper feel. 6-second invisible loop with absolutely no jump or reset.\"\n    \n    Abstract gradient:\n    \"Abstract promotional banner with flowing purple, cyan, and pink gradients. Gradient colors breathe extremely gently with smooth easing - colors shift 2-3% warmer/cooler creating barely noticeable ambient flow, gradually cycling back to exact original state. Soft bokeh particles drift very slowly upward with consistent gentle speed, motion almost imperceptible, seamlessly wrapping around. Entire composition subtly pulses scale 98% to 101% and smoothly back over 6 seconds with gradual acceleration/deceleration. Minimal motion - atmospheric background feel. Perfect seamless invisible loop with zero discontinuity. Extremely smooth, barely noticeable, no abrupt movements. Living wallpaper aesthetic. 6 seconds, flawless loop.\"\n    \n    Landscape hero:\n    \"Epic mountain landscape at golden hour with warm orange-to-purple gradient sky. Almost imperceptible camera push with smooth easing - extremely slowly, gradually zooms from 100% to 102% scale then smoothly back to exact 100%. Atmospheric haze drifts subtly with consistent gentle motion, barely visible movement, seamlessly wrapping. Light intensity changes 5% over 6 seconds with gradual transitions then smoothly returns to exact original state. All motion minimal, atmospheric, and butter smooth with no sudden changes. Perfect seamless invisible loop with zero jump. Slow, elegant, understated, flowing. Living cover feel, not animation. 6-second flawless loop.\"\n    \n    **YOUR TASK:**\n    \n    Generate a video_prompt (max 2000 characters) for {{ app_name }}.\n    \n    **CRITICAL REQUIREMENTS:**\n    \n    🚨 LOOP QUALITY IS PARAMOUNT 🚨\n    \n    - Describe WHAT the image shows (briefly - device mockup? abstract? landscape?)\n    - Describe MINIMAL motion (barely noticeable parallax? gentle breathing? soft float?)\n    - **EMPHASIZE PERFECT SEAMLESS LOOP** - movements must return to EXACT start position/state\n    - **EMPHASIZE SMOOTH MOTION** - gradual easing, no abrupt changes, butter smooth\n    - Use \"extremely subtle\", \"barely noticeable\", \"minimal\", \"gentle\", \"soft\", \"smooth\", \"gradual\" language\n    - Keep motion ATMOSPHERIC and non-distracting - living wallpaper feel\n    - Perfect invisible 6-second loop with ZERO discontinuity\n    - NO dramatic movements - everything 2-3% maximum\n    - NO abrupt starts, stops, or transitions - gradual acceleration/deceleration only\n    - NO camera pans/tilts unless they smoothly return to exact start\n    - Motion should be AMBIENT background enhancement, not a feature\n    - Test: \"If looped 100 times, is there ANY visible jump/reset?\" Answer MUST be NO\n    - Goal: Viewers should think \"is this even moving?\" AND \"this loops perfectly!\"\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n\n// ============================================\n// DEMO APP TEST CASES\n// ============================================\n\ntest AppFromDescription {\n  functions [GenerateApp]\n  args {\n    app_description_input \"A meditation and mindfulness app for busy professionals. Helps users find calm moments throughout their day with 5-minute guided sessions, breathing exercises, and ambient soundscapes.\"\n    style_config null\n    style_name null\n  }\n}\n\ntest ImproveDescriptionFromDraft {\n  functions [ImproveAppDescription]\n  args {\n    draft_description \"This app helps you track workouts and offers some motivation features. It has reminders, a few templates, and a social feed, but the copy feels flat.\"\n    vibe_hint \"Energetic fitness mentor\"\n  }\n}\n\ntest BatSignalAppDesignPlan {\n  functions [GenerateAppDesignPlan]\n  args {\n    app_name \"BatSignal\"\n    app_description \"Emergency Batman summoning app. Fire the iconic bat signal into the Gotham sky with a tap. Track Batman's response time and view your signal history.\"\n    app_category \"Utilities\"\n    style_guide \"Dark noir aesthetic with deep blacks (#0A0A0A) and bright yellow accents (#FFD700) for the bat signal glow. Dramatic shadows and bold typography. Status bar in light color for dark background. Glowing effects on interactive elements.\"\n    num_screens 5\n  }\n}\n\ntest CyberpunkApp {\n  functions [GenerateApp]\n  args {\n    app_description_input null\n    style_config {\n      background_color \"radial gradient from dark navy (#0A0E27) center to bright magenta (#FF006E) edges\"\n      details \"Futuristic cyberpunk style with holographic circuit patterns (cyan, 60-80px, 4-5 scattered). Glowing pink grid squares (40-60px, 6-8 pieces). Neon hexagons with cyan outline (50-70px, 3-4 at edges). Elements concentrated in outer 12-15% border area.\"\n      text_style \"Futuristic bold sans-serif font, 800 weight, white color with bright cyan (#00F0FF) outline (4-5px) and neon glow effect\"\n      device_style \"Glossy midnight black frame with vibrant cyan (#00F0FF) neon glow effect around edges and thin modern bezels\"\n    }\n    style_name \"Cyberpunk Neon\"\n  }\n}\n\ntest ZenMinimalistApp {\n  functions [GenerateApp]\n  args {\n    app_description_input null\n    style_config {\n      background_color \"soft sage green solid color (#E8F2E8)\"\n      details \"Minimalist zen aesthetic with subtle organic elements. 3-4 small earthy white (#F5F1E8) circular shapes (30-50px), 2-3 warm cream (#F5E6D3) abstract leaf silhouettes (40-60px). Simple muted gold (#D4AF37) line accents (2-3px thick, 60-100px long, 2-3 lines). All elements scattered lightly in outer edges, emphasizing negative space and calm.\"\n      text_style \"Clean sans-serif font (Poppins or Inter style), 700 weight, earthy white color (#F5F1E8) with subtle drop shadow (0px 1px 2px rgba(0,0,0,0.08))\"\n      device_style \"Warm natural wood finish frame (light oak or bamboo texture) with matte surface and subtle grain texture\"\n    }\n    style_name \"Zen Minimal\"\n  }\n}\n\ntest PlayfulPopArtApp {\n  functions [GenerateApp]\n  args {\n    app_description_input null\n    style_config {\n      background_color \"bright yellow solid color (#FFD60A)\"\n      details \"Playful pop art style with vibrant emoji-like decorations. 4-5 large colorful emojis (😊🎉⭐❤️, 80-120px). 3-4 bold geometric shapes: cyan circles, magenta triangles, orange stars (60-100px). 5-6 thick black comic-style lines/lightning bolts (5-8px thick, 80-140px). Halftone dot patterns in corners (cyan dots on yellow). High energy, scattered placement.\"\n      text_style \"Extra bold rounded sans-serif font (Impact or similar), 900 weight, white color with thick 5-7px black outline stroke and subtle drop shadow\"\n      device_style \"Colorful gradient frame with cyan-to-green fade on left edge transitioning to orange-to-pink fade on bottom right, glossy finish\"\n    }\n    style_name \"Snap Style\"\n  }\n}\n\n// NOTE: Old GenerateScreensForApp function removed - replaced by two-stage approach:\n// 1. GenerateAppStructure (creates plan with tabs, layout, screen details)\n// 2. GenerateScreenImagePrompt (generates prompts from structure)\n",
  "clients.baml": "// OpenRouter client configuration for BAML\n// Using openai-generic provider with OpenRouter's base URL\n\n// Fast model - GPT-5 Nano (same as AI SDK's \"tiny\" preset)\nclient<llm> GPT5Nano {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5-nano\"  // Fast and cheap for testing\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Smart model - GPT-5 (same as AI SDK's \"large\" preset)\nclient<llm> GPT5 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5\"  // High reasoning capability\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Balanced model - GPT-5 Mini\nclient<llm> GPT5Mini {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5-mini\"  // Balanced performance\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Qwen 2.5 VL - Vision model\nclient<llm> Qwen25VL {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"qwen/qwen2.5-vl-72b-instruct\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.0 Flash Exp - Free vision model\nclient<llm> Gemini20FlashExp {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.0-flash-exp:free\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Llama 3.2 90B Vision - Vision model\nclient<llm> Llama32Vision {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"meta-llama/llama-3.2-90b-vision-instruct\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Pro - Premium reasoning model\nclient<llm> Gemini25Pro {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-pro\"  // High capability, premium model\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Flash - Fast and efficient\nclient<llm> Gemini25Flash {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-flash\"  // Balanced speed and quality\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Flash Lite - Ultra-lightweight\nclient<llm> Gemini25FlashLite {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-flash-lite\"  // Fastest, most lightweight\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// ===========================================\n// ANTHROPIC MODELS (via OpenRouter)\n// ===========================================\n\n// Claude Sonnet 4.5 - Highest quality reasoning\nclient<llm> ClaudeSonnet45 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-sonnet-4.5\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Claude Sonnet 4 - High-quality reasoning\nclient<llm> ClaudeSonnet4 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-sonnet-4\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Claude 3.5 Haiku - Fast and efficient\nclient<llm> ClaudeHaiku {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-3-5-haiku-20241022\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Claude Haiku 4.5 - Latest fast model\nclient<llm> ClaudeHaiku45 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-haiku-4.5\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// ===========================================\n// MISTRAL MODELS (via OpenRouter)\n// ===========================================\n\n// Mistral Large - Premium reasoning\nclient<llm> MistralLarge {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"mistralai/mistral-large-2411\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Mistral Small - Fast and efficient\nclient<llm> MistralSmall {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"mistralai/mistral-small-2412\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}",
  "clients.tests.baml": "// ============================================\n// CLIENT INFRASTRUCTURE TESTS\n// ============================================\n// Tests to verify AI model clients are working correctly\n\n// ============================================\n// TEST RESPONSE CLASSES\n// ============================================\n\nclass ModelTestResponse {\n  model_name string @description(\"Name of the model being tested\")\n  response_text string @description(\"The model's response to the test prompt\")\n  character_count int @description(\"Number of characters in the response\")\n  passed bool @description(\"Whether the model responded successfully\")\n}\n\nclass VisionTestResponse {\n  model_name string @description(\"Name of the vision model being tested\")\n  can_see_image bool @description(\"Whether the model can process the image\")\n  description string @description(\"Brief description of what the model sees\")\n  object_count int @description(\"Number of distinct objects/people identified\")\n}\n\n// ============================================\n// TEXT MODEL TEST FUNCTIONS\n// ============================================\n\nfunction TestGPT5Nano() -> ModelTestResponse {\n  client GPT5Nano\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5Nano is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGPT5() -> ModelTestResponse {\n  client GPT5\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5 is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGPT5Mini() -> ModelTestResponse {\n  client GPT5Mini\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5Mini is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25Pro() -> ModelTestResponse {\n  client Gemini25Pro\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25Pro is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25Flash() -> ModelTestResponse {\n  client Gemini25Flash\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25Flash is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25FlashLite() -> ModelTestResponse {\n  client Gemini25FlashLite\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25FlashLite is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestClaudeSonnet4() -> ModelTestResponse {\n  client ClaudeSonnet4\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"ClaudeSonnet4 is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestClaudeHaiku() -> ModelTestResponse {\n  client ClaudeHaiku\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"ClaudeHaiku is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestMistralLarge() -> ModelTestResponse {\n  client MistralLarge\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"MistralLarge is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestMistralSmall() -> ModelTestResponse {\n  client MistralSmall\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"MistralSmall is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// VISION MODEL TEST FUNCTIONS\n// ============================================\n\nfunction TestQwen25VL(image: image) -> VisionTestResponse {\n  client Qwen25VL\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Qwen25VL vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini20FlashExp(image: image) -> VisionTestResponse {\n  client Gemini20FlashExp\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Gemini20FlashExp vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestLlama32Vision(image: image) -> VisionTestResponse {\n  client Llama32Vision\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Llama32Vision vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASES\n// ============================================\n\ntest GPT5NanoTest {\n  functions [TestGPT5Nano]\n  args {}\n}\n\ntest GPT5Test {\n  functions [TestGPT5]\n  args {}\n}\n\ntest GPT5MiniTest {\n  functions [TestGPT5Mini]\n  args {}\n}\n\ntest Gemini25ProTest {\n  functions [TestGemini25Pro]\n  args {}\n}\n\ntest Gemini25FlashTest {\n  functions [TestGemini25Flash]\n  args {}\n}\n\ntest Gemini25FlashLiteTest {\n  functions [TestGemini25FlashLite]\n  args {}\n}\n\ntest ClaudeSonnet4Test {\n  functions [TestClaudeSonnet4]\n  args {}\n}\n\ntest ClaudeHaikuTest {\n  functions [TestClaudeHaiku]\n  args {}\n}\n\ntest MistralLargeTest {\n  functions [TestMistralLarge]\n  args {}\n}\n\ntest MistralSmallTest {\n  functions [TestMistralSmall]\n  args {}\n}\n\ntest Qwen25VLTest {\n  functions [TestQwen25VL]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}\n\ntest Gemini20FlashExpTest {\n  functions [TestGemini20FlashExp]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}\n\ntest Llama32VisionTest {\n  functions [TestLlama32Vision]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}\n\n",
  "generators.baml": "// Generator configuration for TypeScript\n// This tells BAML where to output the generated TypeScript client\n\ngenerator target {\n  output_type \"typescript\"\n  output_dir \"..\"  // Outputs to project root\n  version \"0.211.2\"\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}