/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, FunctionResult, BamlCtxManager, Image, Audio, Pdf, Video, ClientRegistry, Collector, FunctionLog } from "@boundaryml/baml"
import { toBamlError, BamlAbortError, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type * as types from "./types"
import type {AppConcept, AppConceptsOutput, AppScreenPromptsOutput, AppStructure, Avatar, Background, BasicResponse, Character, CharacterInScene, Composition, CoverImagePrompt, DemoAppOutput, DetailedResponse, DeviceImageScore, DeviceSpec, FontStyle, HeaderText, ImprovedDescriptionOutput, LayoutConfig, ModelTestResponse, Outfit, PromptStructure, PromptStyle, PromptTechnical, Scene, ScreenDetail, ScreenImagePrompt, ScreenshotConfig, ScreenshotPromptStructured, ScreenshotSetInput, ScreenshotTreatment, StyleColors, StyleConfig, StyleDemoOutput, StyleDemoScreenshotConfig, StyleEffects, StyleGenerationOutput, StyleRevisionOutput, StyleTypography, Subject, TabStructure, TextConfig, VisionTestResponse} from "./types"
import type TypeBuilder from "./type_builder"
import { HttpRequest, HttpStreamRequest } from "./sync_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 * Example:
 * ```ts
 * import { RecursivePartialNull } from './baml_client/types'
 * ```
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

type TickReason = "Unknown";

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
  env?: Record<string, string | undefined>
  tags?: Record<string, string>
  signal?: AbortSignal
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
}

export class BamlSyncClient {
  private httpRequest: HttpRequest
  private httpStreamRequest: HttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.httpRequest = new HttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new HttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlSyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  /*
  * @deprecated NOT IMPLEMENTED as streaming must by async. We
  * are not providing an async version as we want to reserve the
  * right to provide a sync version in the future.
  */
  get stream() {
    throw new Error("stream is not available in BamlSyncClient. Use `import { b } from 'baml_client/async_client")
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  AnalyzeAvatar(
      image: Image,
      __baml_options__?: BamlCallOptions
  ): types.Avatar {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "AnalyzeAvatar",
        {
          "image": image
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.Avatar
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DetailedAnalysisGPT5(
      query: string,
      __baml_options__?: BamlCallOptions
  ): types.DetailedResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "DetailedAnalysisGPT5",
        {
          "query": query
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.DetailedResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  DetailedAnalysisGPT5Nano(
      query: string,
      __baml_options__?: BamlCallOptions
  ): types.DetailedResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "DetailedAnalysisGPT5Nano",
        {
          "query": query
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.DetailedResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateApp(
      app_description_input?: string | null,category_hint?: string | null,ui_style?: string | null,
      __baml_options__?: BamlCallOptions
  ): types.DemoAppOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateApp",
        {
          "app_description_input": app_description_input?? null,"category_hint": category_hint?? null,"ui_style": ui_style?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.DemoAppOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateAppConcepts(
      app_description_input: string,category_hint?: string | null,
      __baml_options__?: BamlCallOptions
  ): types.AppConceptsOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateAppConcepts",
        {
          "app_description_input": app_description_input,"category_hint": category_hint?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.AppConceptsOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateAppCoverImagePrompt(
      app_name: string,app_description: string,app_category?: string | null,style_guide?: string | null,screen_names: string[],user_feedback?: string | null,
      __baml_options__?: BamlCallOptions
  ): types.CoverImagePrompt {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateAppCoverImagePrompt",
        {
          "app_name": app_name,"app_description": app_description,"app_category": app_category?? null,"style_guide": style_guide?? null,"screen_names": screen_names,"user_feedback": user_feedback?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.CoverImagePrompt
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateAppDesignPlan(
      app_name: string,app_description: string,app_category: string,style_guide: string,num_screens: number,
      __baml_options__?: BamlCallOptions
  ): types.AppStructure {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateAppDesignPlan",
        {
          "app_name": app_name,"app_description": app_description,"app_category": app_category,"style_guide": style_guide,"num_screens": num_screens
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.AppStructure
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateFirstScreenImagePrompt(
      app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
      __baml_options__?: BamlCallOptions
  ): types.ScreenImagePrompt {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateFirstScreenImagePrompt",
        {
          "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ScreenImagePrompt
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateScene(
      scene_prompt: string,art_style: string,characters: types.Character[],
      __baml_options__?: BamlCallOptions
  ): types.Scene {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateScene",
        {
          "scene_prompt": scene_prompt,"art_style": art_style,"characters": characters
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.Scene
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateScreenImagePromptWithReference(
      app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
      __baml_options__?: BamlCallOptions
  ): types.ScreenImagePrompt {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateScreenImagePromptWithReference",
        {
          "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ScreenImagePrompt
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateScreenshotPrompt(
      text: types.TextConfig,layout: types.LayoutConfig,style: types.StyleConfig,
      __baml_options__?: BamlCallOptions
  ): types.ScreenshotPromptStructured {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateScreenshotPrompt",
        {
          "text": text,"layout": layout,"style": style
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ScreenshotPromptStructured
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateScreenshotSet(
      input: types.ScreenshotSetInput,
      __baml_options__?: BamlCallOptions
  ): types.ScreenshotConfig[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateScreenshotSet",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ScreenshotConfig[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateStyleDemoScreenshots(
      style_config: types.StyleConfig,style_name: string,screenshot_count?: number | null,
      __baml_options__?: BamlCallOptions
  ): types.StyleDemoOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateStyleDemoScreenshots",
        {
          "style_config": style_config,"style_name": style_name,"screenshot_count": screenshot_count?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.StyleDemoOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateStyleFromDescription(
      description: string,style_name?: string | null,reference_image?: Image | null,background_style?: string | null,text_style?: string | null,device_style?: string | null,decorative_elements?: string | null,
      __baml_options__?: BamlCallOptions
  ): types.StyleGenerationOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "GenerateStyleFromDescription",
        {
          "description": description,"style_name": style_name?? null,"reference_image": reference_image?? null,"background_style": background_style?? null,"text_style": text_style?? null,"device_style": device_style?? null,"decorative_elements": decorative_elements?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.StyleGenerationOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ImproveAppDescription(
      draft_description: string,vibe_hint?: string | null,
      __baml_options__?: BamlCallOptions
  ): types.ImprovedDescriptionOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "ImproveAppDescription",
        {
          "draft_description": draft_description,"vibe_hint": vibe_hint?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ImprovedDescriptionOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ListGeneratorGPT5(
      topic: string,
      __baml_options__?: BamlCallOptions
  ): string[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "ListGeneratorGPT5",
        {
          "topic": topic
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ListGeneratorGPT5Nano(
      topic: string,
      __baml_options__?: BamlCallOptions
  ): string[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "ListGeneratorGPT5Nano",
        {
          "topic": topic
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ReviseStyle(
      current_style: types.StyleGenerationOutput,revision_prompt: string,new_style_name?: string | null,reference_image?: Image | null,
      __baml_options__?: BamlCallOptions
  ): types.StyleRevisionOutput {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "ReviseStyle",
        {
          "current_style": current_style,"revision_prompt": revision_prompt,"new_style_name": new_style_name?? null,"reference_image": reference_image?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.StyleRevisionOutput
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ScoreDeviceReferenceImage(
      device_image: Image,expected_frame_style: string,
      __baml_options__?: BamlCallOptions
  ): types.DeviceImageScore {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "ScoreDeviceReferenceImage",
        {
          "device_image": device_image,"expected_frame_style": expected_frame_style
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.DeviceImageScore
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SimpleStringGPT5(
      input: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "SimpleStringGPT5",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SimpleStringGPT5Nano(
      input: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "SimpleStringGPT5Nano",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  StructuredResponseGPT5(
      question: string,
      __baml_options__?: BamlCallOptions
  ): types.BasicResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "StructuredResponseGPT5",
        {
          "question": question
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.BasicResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  StructuredResponseGPT5Nano(
      question: string,
      __baml_options__?: BamlCallOptions
  ): types.BasicResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "StructuredResponseGPT5Nano",
        {
          "question": question
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.BasicResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestClaudeHaiku(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestClaudeHaiku",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestClaudeSonnet4(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestClaudeSonnet4",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGPT5(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestGPT5",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGPT5Mini(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestGPT5Mini",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGPT5Nano(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestGPT5Nano",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGemini20FlashExp(
      image: Image,
      __baml_options__?: BamlCallOptions
  ): types.VisionTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestGemini20FlashExp",
        {
          "image": image
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.VisionTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGemini25Flash(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestGemini25Flash",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGemini25FlashLite(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestGemini25FlashLite",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestGemini25Pro(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestGemini25Pro",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestLlama32Vision(
      image: Image,
      __baml_options__?: BamlCallOptions
  ): types.VisionTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestLlama32Vision",
        {
          "image": image
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.VisionTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestMistralLarge(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestMistralLarge",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestMistralSmall(
      
      __baml_options__?: BamlCallOptions
  ): types.ModelTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestMistralSmall",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.ModelTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestQwen25VL(
      image: Image,
      __baml_options__?: BamlCallOptions
  ): types.VisionTestResponse {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestQwen25VL",
        {
          "image": image
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
      )
      return raw.parsed(false) as types.VisionTestResponse
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)