/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "avatars.baml": "// Avatar Analysis BAML Domain\n// Takes a person's photo and returns avatar attributes similar to Bitmoji customization level\n\n// ============================================\n// AVATAR MODEL\n// ============================================\n\nclass Avatar {\n  // Summary\n  summary string @description(\"Neutral physical description without expressions or emotions\")\n\n  // Core Demographics\n  apparent_age string @description(\"Age range (e.g., 18-25, 25-35, 35-45)\")\n  gender_presentation string @description(\"How the person presents (male, female, androgynous)\")\n\n  // Face Structure\n  face_shape string @description(\"Face shape (oval, round, square, heart, diamond, oblong, triangular)\")\n  face_width string @description(\"Face width relative to average (narrow, average, wide)\")\n  jawline string @description(\"Jawline type (soft, defined, angular, square, rounded)\")\n  cheekbones string @description(\"Cheekbone prominence (flat, average, prominent, high)\")\n  chin_shape string @description(\"Chin shape (pointed, rounded, square, cleft)\")\n\n  // Skin\n  skin_tone string @description(\"Skin tone (porcelain, fair, light, medium, olive, tan, brown, dark)\")\n  skin_undertone string @description(\"Undertone (cool, warm, neutral)\")\n  complexion_details string? @description(\"Notable skin features like freckles, beauty marks (if visible)\")\n\n  // Hair\n  hair_color string @description(\"Specific hair color (jet black, dark brown, chestnut brown, light brown, ash blonde, golden blonde, strawberry blonde, auburn, ginger, salt and pepper, silver, white)\")\n  hair_color_variation string? @description(\"Secondary colors or effects (highlights, lowlights, ombre, balayage, frosted tips, roots showing)\")\n  hair_length string @description(\"Hair length (buzz cut, very short, short, chin-length, shoulder-length, mid-back, long, very long)\")\n  hair_style string @description(\"Specific hairstyle (crew cut, pompadour, quiff, undercut, side part, slicked back, tousled, layered bob, pixie cut, shag, straight down, pulled back, man bun, etc.)\")\n  hair_texture string @description(\"Hair texture (pin-straight, straight, slightly wavy, wavy, loose curls, tight curls, coily, kinky, afro-textured)\")\n  hair_volume string @description(\"Hair volume (thin/fine, medium, thick, very thick/dense)\")\n  hairline_shape string @description(\"Hairline shape (straight across, widow's peak, rounded, M-shaped/receding, high forehead)\")\n  hair_parting string? @description(\"Hair parting if visible (center part, deep side part left, deep side part right, no visible part, zigzag part)\")\n\n  // Eyes\n  eye_color string @description(\"Eye color (dark brown, brown, light brown, hazel, green, blue, gray)\")\n  eye_shape string @description(\"Eye shape (almond, round, hooded, monolid, upturned, downturned, deep-set)\")\n  eye_size string @description(\"Eye size relative to face (small, average, large)\")\n  eye_spacing string @description(\"Eye spacing (close-set, average, wide-set)\")\n  eyelash_visibility string @description(\"Eyelash prominence (short, average, long, very long)\")\n\n  // Eyebrows\n  eyebrow_shape string @description(\"Eyebrow shape (straight, soft arch, high arch, rounded, s-shaped)\")\n  eyebrow_thickness string @description(\"Eyebrow thickness (thin, medium, thick, very thick)\")\n  eyebrow_color string @description(\"Eyebrow color (may differ from hair)\")\n\n  // Nose\n  nose_shape string @description(\"Overall nose shape (straight, curved, upturned, downturned, button, broad, narrow)\")\n  nose_bridge string @description(\"Bridge type (straight, curved, bumped, wide, narrow)\")\n  nose_tip string @description(\"Nose tip shape (pointed, rounded, bulbous, upturned)\")\n  nose_width string @description(\"Nose width relative to face (narrow, average, wide)\")\n  nostril_visibility string @description(\"Nostril visibility from front (minimal, moderate, prominent)\")\n\n  // Mouth & Lips\n  lip_shape string @description(\"Overall lip shape (thin, medium, full, heart-shaped, wide)\")\n  upper_lip_fullness string @description(\"Upper lip fullness (thin, medium, full)\")\n  lower_lip_fullness string @description(\"Lower lip fullness (thin, medium, full)\")\n  mouth_width string @description(\"Mouth width relative to face (small, average, wide)\")\n  cupids_bow string @description(\"Cupid's bow definition (flat, subtle, defined, prominent)\")\n\n  // Facial Hair (optional)\n  facial_hair_type string? @description(\"Type if present (none, mustache, goatee, beard, full beard, stubble)\")\n  facial_hair_style string? @description(\"Specific style (handlebar, soul patch, chin strap, etc.)\")\n  facial_hair_density string? @description(\"Density (light, medium, thick, very thick)\")\n  facial_hair_color string? @description(\"Color if different from hair\")\n\n  // Distinctive Features\n  glasses bool @description(\"Whether person wears glasses\")\n  glasses_style string? @description(\"Frame style (rectangular, round, square, cat-eye, aviator, wayfarers)\")\n  glasses_frame_color string? @description(\"Frame color (black, brown, tortoise, clear, metal, etc.)\")\n  glasses_lens_type string? @description(\"Lens type if notable (clear, tinted, thick)\")\n\n  // Face Details\n  freckles bool @description(\"Visible freckles\")\n  freckle_intensity string? @description(\"If freckles present (light, moderate, heavy)\")\n  beauty_marks string[]? @description(\"Notable moles or beauty marks and locations\")\n  dimples string? @description(\"Dimple presence (none, left cheek, right cheek, both cheeks, chin)\")\n\n  // Additional Features\n  ear_size string @description(\"Ear size relative to head (small, average, large)\")\n  ear_prominence string @description(\"How ears sit (flat, average, protruding)\")\n  piercings string[]? @description(\"Visible piercings (earlobes, cartilage, nose, eyebrow, etc.)\")\n\n  // Metadata\n  confidence float @description(\"Confidence in analysis (0.0-1.0)\")\n  avatar_style string @description(\"Recommended avatar style (realistic, classic cartoon, anime-style)\")\n  key_features string[] @description(\"Top 5 most distinctive physical features for avatar creation\")\n}\n\n// ============================================\n// AVATAR ANALYSIS FUNCTION\n// ============================================\n\nfunction AnalyzeAvatar(image: image) -> Avatar {\n  client Gemini25Pro\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Analyze this person's photo to extract detailed avatar attributes for creating a Bitmoji-style avatar.\n\n    Image to analyze:\n    {{ image }}\n\n    CRITICAL RULES - MUST FOLLOW:\n    1. Focus ONLY on permanent physical features\n    2. NEVER mention expressions (no smile, frown, laugh, etc.)\n    3. NEVER describe emotions, mood, or demeanor\n    4. NEVER describe clothing or accessories (except glasses)\n    5. NEVER describe pose, gestures, or body position\n    6. NEVER use emotional descriptors (warm, friendly, serious, etc.)\n    7. The summary must be purely physical description\n\n    For the summary field:\n    ✅ GOOD: \"A person with curly black hair, brown eyes, rectangular glasses, and a goatee\"\n    ❌ BAD: \"A friendly person with a warm smile and curly black hair\"\n\n    IMPORTANT - Be SPECIFIC with descriptions:\n    - For hair_style: Give the actual hairstyle name (e.g., \"side part with slight quiff\", \"tousled layers\", \"slicked back undercut\") NOT generic terms like \"medium\"\n    - For hair_length: Be precise (e.g., \"shoulder-length\", \"chin-length\", \"buzz cut\") NOT just \"short/medium/long\"\n    - For hair_color: Use specific shades (e.g., \"chestnut brown\", \"ash blonde\", \"jet black\") NOT just \"brown\" or \"black\"\n    - For all features: Use descriptive terms that an avatar artist could understand and recreate\n\n    For key_features, list the 5 most distinctive PERMANENT physical traits.\n\n    Be specific enough that an artist could recreate this person's appearance as an avatar.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASE\n// ============================================\n\ntest AvatarTest {\n  functions [AnalyzeAvatar]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}",
  "clients.baml": "// OpenRouter client configuration for BAML\n// Using openai-generic provider with OpenRouter's base URL\n\n// Fast model - GPT-5 Nano (same as AI SDK's \"tiny\" preset)\nclient<llm> GPT5Nano {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5-nano\"  // Fast and cheap for testing\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Smart model - GPT-5 (same as AI SDK's \"large\" preset)\nclient<llm> GPT5 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5\"  // High reasoning capability\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Vision model for avatar analysis - Primary (Qwen 2.5 VL)\nclient<llm> AvatarVision {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"qwen/qwen2.5-vl-72b-instruct\"  // Primary vision model\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy Avatar Analysis\"\n    }\n  }\n}\n\n// Vision fallback 1 - Gemini Flash\nclient<llm> AvatarVisionGemini {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.0-flash-exp:free\"  // Fast and capable vision model\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy Avatar Analysis\"\n    }\n  }\n}\n\n// Vision fallback 2 - Llama Vision\nclient<llm> AvatarVisionLlama {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"meta-llama/llama-3.2-90b-vision-instruct\"  // Llama vision model\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy Avatar Analysis\"\n    }\n  }\n}\n\n// Gemini 2.5 Pro - Premium reasoning model\nclient<llm> Gemini25Pro {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-pro\"  // High capability, premium model\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Flash - Fast and efficient\nclient<llm> Gemini25Flash {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-flash\"  // Balanced speed and quality\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Flash Lite - Ultra-lightweight\nclient<llm> Gemini25FlashLite {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-flash-lite\"  // Fastest, most lightweight\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Fallback chain for avatar vision analysis\nclient<llm> AvatarVisionWithFallback {\n  provider \"fallback\"\n  options {\n    strategy [\n      AvatarVision,\n      AvatarVisionGemini,\n      AvatarVisionLlama\n    ]\n  }\n}",
  "generators.baml": "// Generator configuration for TypeScript\n// This tells BAML where to output the generated TypeScript client\n\ngenerator target {\n  output_type \"typescript\"\n  output_dir \"..\"  // Outputs to project root\n  version \"0.208.5\"\n}",
  "helloworld.baml": "// Hello World BAML Domain\n// Basic examples for getting started with BAML and OpenRouter integration\n// Tests are co-located with their functions for better maintainability\n\n// ============================================\n// MODELS\n// ============================================\n\nclass BasicResponse {\n  answer string @description(\"The direct answer to the question\")\n  confidence float @description(\"Confidence level from 0.0 to 1.0\")\n}\n\nclass DetailedResponse {\n  answer string\n  confidence float\n  explanation string? @description(\"Optional explanation if needed\")\n  sources string[]? @description(\"Optional list of sources\")\n}\n\n// ============================================\n// SIMPLE STRING FUNCTIONS WITH TESTS\n// ============================================\n\nfunction SimpleStringGPT5Nano(input: string) -> string {\n  client GPT5Nano\n  prompt #\"\n    Respond to this: {{ input }}\n\n    Be concise and direct.\n  \"#\n}\n\ntest NanoGreeting {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"Say hello if you can hear me\"\n  }\n}\n\ntest NanoMath {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"What is 2+2?\"\n  }\n}\n\nfunction SimpleStringGPT5(input: string) -> string {\n  client GPT5\n  prompt #\"\n    Respond to this: {{ input }}\n\n    Be concise and direct.\n  \"#\n}\n\ntest GPT5Greeting {\n  functions [SimpleStringGPT5]\n  args {\n    input \"Write a poetic greeting\"\n  }\n}\n\ntest GPT5Philosophy {\n  functions [SimpleStringGPT5]\n  args {\n    input \"What is the meaning of life in one sentence?\"\n  }\n}\n\n// ============================================\n// STRUCTURED RESPONSE FUNCTIONS WITH TESTS\n// ============================================\n\nfunction StructuredResponseGPT5Nano(question: string) -> BasicResponse {\n  client GPT5Nano\n  prompt #\"\n    Answer this question: {{ question }}\n\n    Also rate your confidence in your answer from 0.0 (not confident) to 1.0 (very confident).\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoCapital {\n  functions [StructuredResponseGPT5Nano]\n  args {\n    question \"What is the capital of France?\"\n  }\n}\n\ntest NanoScience {\n  functions [StructuredResponseGPT5Nano]\n  args {\n    question \"What is H2O?\"\n  }\n}\n\nfunction StructuredResponseGPT5(question: string) -> BasicResponse {\n  client GPT5\n  prompt #\"\n    Answer this question: {{ question }}\n\n    Also rate your confidence in your answer from 0.0 (not confident) to 1.0 (very confident).\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5History {\n  functions [StructuredResponseGPT5]\n  args {\n    question \"When did World War II end?\"\n  }\n}\n\ntest GPT5Complex {\n  functions [StructuredResponseGPT5]\n  args {\n    question \"Explain quantum entanglement\"\n  }\n}\n\n// ============================================\n// LIST GENERATOR FUNCTIONS WITH TESTS\n// ============================================\n\nfunction ListGeneratorGPT5Nano(topic: string) -> string[] {\n  client GPT5Nano\n  prompt #\"\n    List 3 examples of: {{ topic }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoProgramming {\n  functions [ListGeneratorGPT5Nano]\n  args {\n    topic \"programming languages\"\n  }\n}\n\ntest NanoColors {\n  functions [ListGeneratorGPT5Nano]\n  args {\n    topic \"primary colors\"\n  }\n}\n\nfunction ListGeneratorGPT5(topic: string) -> string[] {\n  client GPT5\n  prompt #\"\n    List 5 examples of: {{ topic }}\n\n    Provide detailed, high-quality examples.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5Frameworks {\n  functions [ListGeneratorGPT5]\n  args {\n    topic \"modern JavaScript frameworks\"\n  }\n}\n\ntest GPT5AIModels {\n  functions [ListGeneratorGPT5]\n  args {\n    topic \"popular large language models\"\n  }\n}\n\n// ============================================\n// DETAILED ANALYSIS FUNCTIONS WITH TESTS\n// ============================================\n\nfunction DetailedAnalysisGPT5Nano(query: string) -> DetailedResponse {\n  client GPT5Nano\n  prompt #\"\n    Query: {{ query }}\n\n    Provide a quick answer with confidence level.\n    Be brief and to the point.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoQuickAnswer {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What is 100 divided by 4?\"\n  }\n}\n\ntest NanoSimpleFact {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What year was the iPhone released?\"\n  }\n}\n\nfunction DetailedAnalysisGPT5(query: string) -> DetailedResponse {\n  client GPT5\n  prompt #\"\n    Query: {{ query }}\n\n    Provide a comprehensive answer with confidence level.\n    Include explanation only if the answer needs clarification.\n    Include sources only if you're referencing specific information.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5SkyQuestion {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Why is the sky blue? Explain the physics behind it.\"\n  }\n}\n\ntest GPT5MathExplanation {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"What is the square root of 144 and how do you calculate it manually?\"\n  }\n}\n\ntest GPT5SpaceHistory {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Who was the first person to walk on the moon and what was significant about the mission?\"\n  }\n}\n\ntest GPT5Photosynthesis {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Explain photosynthesis in detail with the chemical equations\"\n  }\n}\n\n// ============================================\n// COMPARISON TESTS\n// ============================================\n// These tests run the same prompt on different models for comparison\n\ntest CompareSimple_Nano {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"Explain AI in one sentence\"\n  }\n}\n\ntest CompareSimple_GPT5 {\n  functions [SimpleStringGPT5]\n  args {\n    input \"Explain AI in one sentence\"\n  }\n}\n\ntest CompareDetailed_Nano {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What are the benefits of TypeScript?\"\n  }\n}\n\ntest CompareDetailed_GPT5 {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"What are the benefits of TypeScript?\"\n  }\n}",
  "scene.baml": "// Scene Generation BAML Domain\n// Takes an avatar object, scene prompt, and art style to generate optimized image prompts\n\n// ============================================\n// SCENE MODEL\n// ============================================\n\nclass Scene {\n  // Core Scene Description\n  main_description string @description(\"Complete scene description in 2-3 clear sentences\")\n\n  // Character Integration\n  character_in_scene string @description(\"How the avatar appears in this specific scene with outfit and pose\")\n  character_placement string @description(\"Where the character is positioned (foreground, center, left, right, etc.)\")\n\n  // Visual Composition\n  camera_angle string @description(\"Camera angle (eye-level, low angle, high angle, profile, three-quarter)\")\n  shot_type string @description(\"Shot type (close-up, medium shot, full body, wide shot)\")\n\n  // Environment\n  setting string @description(\"Location and environment in simple terms\")\n  background string @description(\"Background elements in order of importance\")\n  time_of_day string @description(\"Time of day and its lighting effect\")\n\n  // Mood & Atmosphere\n  mood string @description(\"Emotional tone (epic, peaceful, mysterious, energetic, etc.)\")\n  color_palette string @description(\"Dominant colors (max 3-4 colors)\")\n  lighting_style string @description(\"Lighting description (dramatic, soft, golden hour, etc.)\")\n\n  // Art Style Application\n  style_keywords string[] @description(\"Key style descriptors for the art style (max 5)\")\n  quality_markers string[] @description(\"Quality indicators (masterpiece, best quality, ultra detailed, etc.)\")\n\n  // Optimized Prompts for Image Generation\n  flux_prompt string @description(\"Complete prompt for Flux (150-250 words max)\")\n  negative_prompt string @description(\"Things to avoid (bad anatomy, blurry, low quality, etc.)\")\n\n  // Generation Parameters\n  flux_guidance_scale float @description(\"Guidance scale (typically 3.5-12)\")\n  flux_steps int @description(\"Inference steps (typically 20-40)\")\n  complexity_score float @description(\"Scene complexity (0.0-1.0)\")\n\n  // Metadata\n  avatar_integration string @description(\"How well the avatar is described in the prompt\")\n  key_elements string[] @description(\"Top 3-5 most important elements to get right\")\n}\n\n// ============================================\n// SCENE GENERATION FUNCTION\n// ============================================\n\nfunction GenerateScene(\n  scene_prompt: string @description(\"User's scene description\"),\n  avatar: Avatar @description(\"Avatar object with character details\"),\n  art_style: string @description(\"Desired art style\")\n) -> Scene {\n  client Gemini25Pro\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Generate an optimized scene description for image generation.\n\n    INPUTS:\n    Scene Request: {{ scene_prompt }}\n    Art Style: {{ art_style }}\n\n    Character Description:\n    - Summary: {{ avatar.summary }}\n    - Age/Gender: {{ avatar.apparent_age }}, {{ avatar.gender_presentation }}\n    - Face: {{ avatar.face_shape }} face, {{ avatar.skin_tone }} skin\n    - Hair: {{ avatar.hair_color }}, {{ avatar.hair_length }}, {{ avatar.hair_style }}, {{ avatar.hair_texture }}\n    - Eyes: {{ avatar.eye_color }}, {{ avatar.eye_shape }}\n    - Distinctive: {{ avatar.key_features }}\n    {% if avatar.facial_hair_type %}\n    - Facial hair: {{ avatar.facial_hair_type }}\n    {% endif %}\n    {% if avatar.glasses %}\n    - Glasses: {{ avatar.glasses_style }}\n    {% endif %}\n\n    CRITICAL INSTRUCTIONS FOR flux_prompt:\n\n    1. STRUCTURE (follow this exact order):\n       - Start with art style keywords\n       - Describe the character's physical appearance clearly\n       - Describe their outfit/clothing for the scene\n       - Describe their pose and placement\n       - Describe the environment and setting\n       - Add mood, lighting, and atmosphere\n       - End with quality markers\n\n    2. CHARACTER DESCRIPTION RULES:\n       - Always include: face shape, skin tone, hair (color, length, style), eye color\n       - Use the exact descriptors from the avatar\n       - Add appropriate clothing for the scene (the avatar has no outfit data)\n       - Describe a natural pose that fits the scene\n\n    3. LENGTH & STYLE:\n       - Keep between 150-250 words\n       - Use comma-separated descriptive phrases\n       - Avoid complex sentences\n       - Include specific art style techniques\n\n    4. EXAMPLE STRUCTURE:\n       \"[art style], [character: face, skin, hair, eyes, outfit], [pose and placement], [environment], [lighting and mood], [quality markers]\"\n\n    5. NEGATIVE PROMPT:\n       - Always include: \"bad anatomy, blurry, low quality, watermark, signature\"\n       - Add style-specific negatives if needed\n\n    6. DO NOT:\n       - Don't use emotional expressions (no smiling, frowning, etc.)\n       - Don't over-describe - be concise\n       - Don't use ambiguous terms\n       - Don't forget the avatar's key features\n\n    The goal is a clear, structured prompt that will generate a consistent image with recognizable avatar features.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASE\n// ============================================\n\n// Test with epic fantasy oil painting style\ntest SceneFantasyTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"A warrior standing on a cliff overlooking a vast fantasy landscape at sunset\"\n    avatar {\n      summary \"A person with short jet black tousled hair, dark brown eyes, a trimmed full beard, and dark rectangular glasses.\"\n      apparent_age \"25-35\"\n      gender_presentation \"male\"\n      face_shape \"Round\"\n      face_width \"Wide\"\n      jawline \"Rounded\"\n      cheekbones \"Average\"\n      chin_shape \"Rounded\"\n      skin_tone \"Medium\"\n      skin_undertone \"Warm\"\n      complexion_details null\n      hair_color \"Jet black\"\n      hair_color_variation null\n      hair_length \"Short\"\n      hair_style \"Tousled layers\"\n      hair_texture \"Slightly wavy\"\n      hair_volume \"Thick\"\n      hairline_shape \"Rounded\"\n      hair_parting null\n      eye_color \"Dark brown\"\n      eye_shape \"Almond\"\n      eye_size \"Average\"\n      eye_spacing \"Average\"\n      eyelash_visibility \"Average\"\n      eyebrow_shape \"Soft arch\"\n      eyebrow_thickness \"Thick\"\n      eyebrow_color \"Jet black\"\n      nose_shape \"Broad\"\n      nose_bridge \"Straight\"\n      nose_tip \"Rounded\"\n      nose_width \"Wide\"\n      nostril_visibility \"Moderate\"\n      lip_shape \"Wide\"\n      upper_lip_fullness \"Medium\"\n      lower_lip_fullness \"Full\"\n      mouth_width \"Wide\"\n      cupids_bow \"Subtle\"\n      facial_hair_type \"Full beard\"\n      facial_hair_style \"Trimmed full beard\"\n      facial_hair_density \"Thick\"\n      facial_hair_color \"Jet black\"\n      glasses true\n      glasses_style \"Rectangular\"\n      glasses_frame_color \"Dark purple/black\"\n      glasses_lens_type \"Clear\"\n      freckles false\n      freckle_intensity null\n      beauty_marks null\n      dimples null\n      ear_size \"Average\"\n      ear_prominence \"Average\"\n      piercings [\"Right ear cartilage\"]\n      confidence 0.95\n      avatar_style \"Classic cartoon\"\n      key_features [\"Thick, tousled jet black hair\", \"Thick, dark rectangular glasses\", \"Trimmed full beard\", \"Round face shape with full cheeks\", \"Broad, rounded nose\"]\n    }\n    art_style \"epic fantasy oil painting\"\n  }\n}\n\n// Test with anime/manga style\ntest SceneAnimeTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"A scientist working in a futuristic laboratory with holographic displays\"\n    avatar {\n      summary \"A person with short jet black tousled hair, dark brown eyes, a trimmed full beard, and dark rectangular glasses.\"\n      apparent_age \"25-35\"\n      gender_presentation \"male\"\n      face_shape \"Round\"\n      face_width \"Wide\"\n      jawline \"Rounded\"\n      cheekbones \"Average\"\n      chin_shape \"Rounded\"\n      skin_tone \"Medium\"\n      skin_undertone \"Warm\"\n      complexion_details null\n      hair_color \"Jet black\"\n      hair_color_variation null\n      hair_length \"Short\"\n      hair_style \"Tousled layers\"\n      hair_texture \"Slightly wavy\"\n      hair_volume \"Thick\"\n      hairline_shape \"Rounded\"\n      hair_parting null\n      eye_color \"Dark brown\"\n      eye_shape \"Almond\"\n      eye_size \"Average\"\n      eye_spacing \"Average\"\n      eyelash_visibility \"Average\"\n      eyebrow_shape \"Soft arch\"\n      eyebrow_thickness \"Thick\"\n      eyebrow_color \"Jet black\"\n      nose_shape \"Broad\"\n      nose_bridge \"Straight\"\n      nose_tip \"Rounded\"\n      nose_width \"Wide\"\n      nostril_visibility \"Moderate\"\n      lip_shape \"Wide\"\n      upper_lip_fullness \"Medium\"\n      lower_lip_fullness \"Full\"\n      mouth_width \"Wide\"\n      cupids_bow \"Subtle\"\n      facial_hair_type \"Full beard\"\n      facial_hair_style \"Trimmed full beard\"\n      facial_hair_density \"Thick\"\n      facial_hair_color \"Jet black\"\n      glasses true\n      glasses_style \"Rectangular\"\n      glasses_frame_color \"Dark purple/black\"\n      glasses_lens_type \"Clear\"\n      freckles false\n      freckle_intensity null\n      beauty_marks null\n      dimples null\n      ear_size \"Average\"\n      ear_prominence \"Average\"\n      piercings [\"Right ear cartilage\"]\n      confidence 0.95\n      avatar_style \"Classic cartoon\"\n      key_features [\"Thick, tousled jet black hair\", \"Thick, dark rectangular glasses\", \"Trimmed full beard\", \"Round face shape with full cheeks\", \"Broad, rounded nose\"]\n    }\n    art_style \"anime manga style, Studio Ghibli inspired\"\n  }\n}\n\n// Test with pixel art style\ntest ScenePixelArtTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"A retro arcade game character in a neon-lit cyberpunk city street\"\n    avatar {\n      summary \"A person with short jet black tousled hair, dark brown eyes, a trimmed full beard, and dark rectangular glasses.\"\n      apparent_age \"25-35\"\n      gender_presentation \"male\"\n      face_shape \"Round\"\n      face_width \"Wide\"\n      jawline \"Rounded\"\n      cheekbones \"Average\"\n      chin_shape \"Rounded\"\n      skin_tone \"Medium\"\n      skin_undertone \"Warm\"\n      complexion_details null\n      hair_color \"Jet black\"\n      hair_color_variation null\n      hair_length \"Short\"\n      hair_style \"Tousled layers\"\n      hair_texture \"Slightly wavy\"\n      hair_volume \"Thick\"\n      hairline_shape \"Rounded\"\n      hair_parting null\n      eye_color \"Dark brown\"\n      eye_shape \"Almond\"\n      eye_size \"Average\"\n      eye_spacing \"Average\"\n      eyelash_visibility \"Average\"\n      eyebrow_shape \"Soft arch\"\n      eyebrow_thickness \"Thick\"\n      eyebrow_color \"Jet black\"\n      nose_shape \"Broad\"\n      nose_bridge \"Straight\"\n      nose_tip \"Rounded\"\n      nose_width \"Wide\"\n      nostril_visibility \"Moderate\"\n      lip_shape \"Wide\"\n      upper_lip_fullness \"Medium\"\n      lower_lip_fullness \"Full\"\n      mouth_width \"Wide\"\n      cupids_bow \"Subtle\"\n      facial_hair_type \"Full beard\"\n      facial_hair_style \"Trimmed full beard\"\n      facial_hair_density \"Thick\"\n      facial_hair_color \"Jet black\"\n      glasses true\n      glasses_style \"Rectangular\"\n      glasses_frame_color \"Dark purple/black\"\n      glasses_lens_type \"Clear\"\n      freckles false\n      freckle_intensity null\n      beauty_marks null\n      dimples null\n      ear_size \"Average\"\n      ear_prominence \"Average\"\n      piercings [\"Right ear cartilage\"]\n      confidence 0.95\n      avatar_style \"Classic cartoon\"\n      key_features [\"Thick, tousled jet black hair\", \"Thick, dark rectangular glasses\", \"Trimmed full beard\", \"Round face shape with full cheeks\", \"Broad, rounded nose\"]\n    }\n    art_style \"16-bit pixel art, retro video game style\"\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}