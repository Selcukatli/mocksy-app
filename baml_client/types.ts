/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface Avatar {
  summary: string
  apparent_age: string
  gender_presentation: string
  ethnic_appearance?: string | null
  face_shape: string
  jawline: string
  body_build?: string | null
  skin_tone: string
  complexion_details?: string | null
  hair_color: string
  hair_length: string
  hair_style: string
  eye_color: string
  eye_shape: string
  eyebrows: string
  nose_description: string
  lip_description: string
  facial_hair?: string | null
  glasses: boolean
  glasses_style?: string | null
  distinctive_features?: string[] | null
  confidence: number
  key_features: string[]
  
}

export interface Background {
  colors: string[]
  effects: string[]
  placement: string
  seamless_to_bottom: boolean
  forbidden: string[]
  
}

export interface BasicResponse {
  answer: string
  confidence: number
  
}

export interface Character {
  name?: string | null
  avatar: Avatar
  outfit: Outfit
  expression?: string | null
  signature_colors?: string[] | null
  
}

export interface CharacterInScene {
  character_index: number
  description: string
  pose: string
  placement: string
  outfit_modifications?: string | null
  interaction?: string | null
  
}

export interface Composition {
  priority: string
  rules: string[]
  
}

export interface DetailedResponse {
  answer: string
  confidence: number
  explanation?: string | null
  sources?: string[] | null
  
}

export interface DeviceSpec {
  type: string
  aspect_ratio: string
  frame: string
  angle: string
  scale: string
  position: string
  screenshot: ScreenshotTreatment
  
}

export interface FontStyle {
  family: string
  weight: number
  color: string
  effects: string[]
  
}

export interface HeaderText {
  copy: string
  placement: string
  font: FontStyle
  size: string
  
}

export interface LayoutConfig {
  composition: string
  device_orientation: string
  device_type: string
  
}

export interface ModelTestResponse {
  model_name: string
  response_text: string
  character_count: number
  passed: boolean
  
}

export interface Outfit {
  top?: string | null
  bottom?: string | null
  footwear?: string | null
  outerwear?: string | null
  accessories?: string[] | null
  style: string
  color_scheme?: string | null
  fabric_textures?: string[] | null
  
}

export interface PromptStructure {
  subjects: Subject[]
  group_action?: string | null
  environment: string
  style: PromptStyle
  technical: PromptTechnical
  quality: string[]
  
}

export interface PromptStyle {
  art_style: string
  color_palette: string
  mood: string
  lighting: string
  texture: string
  
}

export interface PromptTechnical {
  camera_angle: string
  shot_type: string
  composition: string
  depth_of_field: string
  
}

export interface Scene {
  main_description: string
  characters: CharacterInScene[]
  character_arrangement: string
  camera_angle: string
  shot_type: string
  setting: string
  background: string
  time_of_day: string
  mood: string
  color_palette: string
  lighting_style: string
  style_keywords: string[]
  quality_markers: string[]
  main_prompt: string
  negative_prompt: string
  structured_prompt: PromptStructure
  suggested_guidance: number
  complexity_score: number
  avatar_integration: string
  character_count: number
  key_elements: string[]
  
}

export interface ScreenshotConfig {
  text: TextConfig
  layout: LayoutConfig
  
}

export interface ScreenshotPromptStructured {
  style: string
  background: Background
  device: DeviceSpec
  header_text: HeaderText
  composition: Composition
  
}

export interface ScreenshotSetInput {
  app_description: string
  screenshot_count: number
  
}

export interface ScreenshotTreatment {
  treatment: string
  preserve: boolean
  forbidden: string[]
  
}

export interface StyleConfig {
  background_color: string
  details: string
  text_style: string
  device_style: string
  
}

export interface StyleGenerationOutput {
  style_name: string
  style_config: StyleConfig
  device_reference_prompt: string
  preview_image_prompt: string
  
}

export interface StyleRevisionOutput {
  revised_style: StyleGenerationOutput
  revision_summary: string
  
}

export interface Subject {
  description: string
  action: string
  position: string
  
}

export interface TextConfig {
  header: string
  subheader?: string | null
  
}

export interface VisionTestResponse {
  model_name: string
  can_see_image: boolean
  description: string
  object_count: number
  
}
