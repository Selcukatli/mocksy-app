/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "avatars.baml": "// Avatar Analysis BAML Domain\n// Simplified version - Takes a person's photo and returns essential avatar attributes\n\n// ============================================\n// AVATAR-SPECIFIC CLIENT CONFIGURATION\n// ============================================\n\n// Avatar analyzer with fallback chain\nclient<llm> AvatarAnalyzer {\n  provider \"fallback\"\n  options {\n    strategy [\n      Qwen25VL,           // Primary vision model\n      Gemini20FlashExp,   // Free fast fallback\n      Llama32Vision       // Final fallback\n    ]\n  }\n}\n\n// ============================================\n// AVATAR MODEL - SIMPLIFIED\n// ============================================\n\nclass Avatar {\n  // Summary\n  summary string @description(\"Neutral physical description without expressions or emotions\")\n\n  // Core Demographics\n  apparent_age string @description(\"Age range (e.g., 18-25, 25-35, 35-45)\")\n  gender_presentation string @description(\"How the person presents (male, female, androgynous)\")\n  ethnic_appearance string? @description(\"Apparent ethnic features if relevant (East Asian, South Asian, Middle Eastern, African, European, Latin American, Mixed/Multiethnic)\")\n\n  // Face & Body\n  face_shape string @description(\"Face shape (oval, round, square, heart, diamond, oblong)\")\n  jawline string @description(\"Jawline type (soft, defined, angular, square, rounded)\")\n  body_build string? @description(\"Overall build if visible (slim, athletic, average, stocky, muscular, curvy, plus-size)\")\n\n  // Skin\n  skin_tone string @description(\"Skin tone (porcelain, fair, light, medium, olive, tan, brown, dark)\")\n  complexion_details string? @description(\"Notable skin features (freckles, beauty marks, etc.)\")\n\n  // Hair\n  hair_color string @description(\"Hair color (jet black, dark brown, light brown, blonde, auburn, gray, white)\")\n  hair_length string @description(\"Hair length (buzz cut, short, medium, shoulder-length, long)\")\n  hair_style string @description(\"Hairstyle including texture (straight bob, wavy layers, curly afro, tousled undercut)\")\n\n  // Eyes\n  eye_color string @description(\"Eye color (dark brown, brown, hazel, green, blue, gray)\")\n  eye_shape string @description(\"Eye shape (almond, round, hooded, monolid, upturned, downturned)\")\n\n  // Eyebrows\n  eyebrows string @description(\"Eyebrow description (thin arched, thick straight, bushy, soft arch)\")\n\n  // Nose\n  nose_description string @description(\"Nose description (narrow straight, broad with rounded tip, upturned button)\")\n\n  // Lips\n  lip_description string @description(\"Lip description (thin, full, wide medium, heart-shaped)\")\n\n  // Facial Hair\n  facial_hair string? @description(\"Facial hair if present (clean shaven, stubble, goatee, full beard, mustache)\")\n\n  // Accessories\n  glasses bool @description(\"Whether person wears glasses\")\n  glasses_style string? @description(\"Glasses description (rectangular black, round tortoise, wire-rimmed)\")\n\n  // Notable Features\n  distinctive_features string[]? @description(\"Other notable features (dimples, piercings, etc.)\")\n\n  // Metadata\n  confidence float @description(\"Confidence in analysis (0.0-1.0)\")\n  key_features string[] @description(\"Top 5 most distinctive physical features\")\n}\n\n// ============================================\n// AVATAR ANALYSIS FUNCTION\n// ============================================\n\nfunction AnalyzeAvatar(image: image) -> Avatar {\n  client AvatarAnalyzer\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Analyze this person's photo to extract essential avatar attributes.\n\n    Image to analyze:\n    {{ image }}\n\n    CRITICAL RULES - MUST FOLLOW:\n    1. Focus ONLY on permanent physical features\n    2. NEVER mention expressions (no smile, frown, laugh, etc.)\n    3. NEVER describe emotions, mood, or demeanor\n    4. NEVER describe clothing or accessories (except glasses)\n    5. NEVER describe pose, gestures, or body position\n    6. NEVER use emotional descriptors (warm, friendly, serious, etc.)\n    7. The summary must be purely physical description\n    8. For body_build: Try to determine from visible portions (shoulders, neck, face fullness)\n       - If full body visible: provide accurate assessment\n       - If only upper body/face visible: make reasonable inference from visible cues\n       - Only use null if absolutely no body indicators are visible (rare)\n\n    For the summary field:\n    ✅ GOOD: \"A person with curly black hair, brown eyes, rectangular glasses, and a goatee\"\n    ❌ BAD: \"A friendly person with a warm smile and curly black hair\"\n\n    IMPORTANT - Use concise, combined descriptions:\n    - For hair_style: Include texture and style together (e.g., \"wavy bob\", \"straight ponytail\", \"curly afro\")\n    - For nose_description: Combine key features (e.g., \"broad with rounded tip\", \"narrow and upturned\")\n    - For lip_description: Include size and shape (e.g., \"full and wide\", \"thin heart-shaped\")\n    - For eyebrows: Combine thickness and shape (e.g., \"thick arched\", \"thin straight\")\n\n    For key_features, list the 5 most distinctive PERMANENT physical traits.\n\n    For body_build (IMPORTANT - try to always provide):\n    - Use neutral, respectful terms: slim, athletic, average, stocky, muscular, curvy, plus-size\n    - Even with just face/shoulders visible, make reasonable inference from:\n      * Face fullness and neck width\n      * Shoulder breadth if visible\n      * Overall proportions\n    - This helps with consistent character generation across scenes\n\n    For ethnic_appearance (optional):\n    - Only include if features are clearly distinctive\n    - Use broad, respectful categories\n    - If uncertain, leave as null\n\n    For distinctive_features:\n    - List things like dimples, piercings, moles, etc.\n    - Keep as array of short descriptions\n\n    Be specific enough that an artist could recreate this person's appearance as an avatar.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASE\n// ============================================\n\ntest AvatarTest {\n  functions [AnalyzeAvatar]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}",
  "clients.baml": "// OpenRouter client configuration for BAML\n// Using openai-generic provider with OpenRouter's base URL\n\n// Fast model - GPT-5 Nano (same as AI SDK's \"tiny\" preset)\nclient<llm> GPT5Nano {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5-nano\"  // Fast and cheap for testing\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Smart model - GPT-5 (same as AI SDK's \"large\" preset)\nclient<llm> GPT5 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5\"  // High reasoning capability\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Balanced model - GPT-5 Mini\nclient<llm> GPT5Mini {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5-mini\"  // Balanced performance\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Qwen 2.5 VL - Vision model\nclient<llm> Qwen25VL {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"qwen/qwen2.5-vl-72b-instruct\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.0 Flash Exp - Free vision model\nclient<llm> Gemini20FlashExp {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.0-flash-exp:free\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Llama 3.2 90B Vision - Vision model\nclient<llm> Llama32Vision {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"meta-llama/llama-3.2-90b-vision-instruct\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Pro - Premium reasoning model\nclient<llm> Gemini25Pro {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-pro\"  // High capability, premium model\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Flash - Fast and efficient\nclient<llm> Gemini25Flash {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-flash\"  // Balanced speed and quality\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Flash Lite - Ultra-lightweight\nclient<llm> Gemini25FlashLite {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-flash-lite\"  // Fastest, most lightweight\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// ===========================================\n// ANTHROPIC MODELS (via OpenRouter)\n// ===========================================\n\n// Claude Sonnet 4.5 - Highest quality reasoning\nclient<llm> ClaudeSonnet45 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-sonnet-4.5\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Claude Sonnet 4 - High-quality reasoning\nclient<llm> ClaudeSonnet4 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-sonnet-4\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Claude 3.5 Haiku - Fast and efficient\nclient<llm> ClaudeHaiku {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-3-5-haiku-20241022\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// ===========================================\n// MISTRAL MODELS (via OpenRouter)\n// ===========================================\n\n// Mistral Large - Premium reasoning\nclient<llm> MistralLarge {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"mistralai/mistral-large-2411\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Mistral Small - Fast and efficient\nclient<llm> MistralSmall {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"mistralai/mistral-small-2412\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// ============================================\n// MODEL TESTING\n// ============================================\n\nclass ModelTestResponse {\n  model_name string @description(\"Name of the model being tested\")\n  response_text string @description(\"The model's response to the test prompt\")\n  character_count int @description(\"Number of characters in the response\")\n  passed bool @description(\"Whether the model responded successfully\")\n}\n\nclass VisionTestResponse {\n  model_name string @description(\"Name of the vision model being tested\")\n  can_see_image bool @description(\"Whether the model can process the image\")\n  description string @description(\"Brief description of what the model sees\")\n  object_count int @description(\"Number of distinct objects/people identified\")\n}\n\n// Test functions for each model\nfunction TestGPT5Nano() -> ModelTestResponse {\n  client GPT5Nano\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5Nano is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGPT5() -> ModelTestResponse {\n  client GPT5\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5 is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGPT5Mini() -> ModelTestResponse {\n  client GPT5Mini\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5Mini is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25Pro() -> ModelTestResponse {\n  client Gemini25Pro\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25Pro is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25Flash() -> ModelTestResponse {\n  client Gemini25Flash\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25Flash is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25FlashLite() -> ModelTestResponse {\n  client Gemini25FlashLite\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25FlashLite is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestClaudeSonnet4() -> ModelTestResponse {\n  client ClaudeSonnet4\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"ClaudeSonnet4 is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestClaudeHaiku() -> ModelTestResponse {\n  client ClaudeHaiku\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"ClaudeHaiku is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestMistralLarge() -> ModelTestResponse {\n  client MistralLarge\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"MistralLarge is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestMistralSmall() -> ModelTestResponse {\n  client MistralSmall\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"MistralSmall is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestQwen25VL(image: image) -> VisionTestResponse {\n  client Qwen25VL\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Qwen25VL vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini20FlashExp(image: image) -> VisionTestResponse {\n  client Gemini20FlashExp\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Gemini20FlashExp vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestLlama32Vision(image: image) -> VisionTestResponse {\n  client Llama32Vision\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Llama32Vision vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases\ntest GPT5NanoTest {\n  functions [TestGPT5Nano]\n  args {}\n}\n\ntest GPT5Test {\n  functions [TestGPT5]\n  args {}\n}\n\ntest GPT5MiniTest {\n  functions [TestGPT5Mini]\n  args {}\n}\n\ntest Gemini25ProTest {\n  functions [TestGemini25Pro]\n  args {}\n}\n\ntest Gemini25FlashTest {\n  functions [TestGemini25Flash]\n  args {}\n}\n\ntest Gemini25FlashLiteTest {\n  functions [TestGemini25FlashLite]\n  args {}\n}\n\ntest ClaudeSonnet4Test {\n  functions [TestClaudeSonnet4]\n  args {}\n}\n\ntest ClaudeHaikuTest {\n  functions [TestClaudeHaiku]\n  args {}\n}\n\ntest MistralLargeTest {\n  functions [TestMistralLarge]\n  args {}\n}\n\ntest MistralSmallTest {\n  functions [TestMistralSmall]\n  args {}\n}\n\ntest Qwen25VLTest {\n  functions [TestQwen25VL]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}\n\ntest Gemini20FlashExpTest {\n  functions [TestGemini20FlashExp]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}\n\ntest Llama32VisionTest {\n  functions [TestLlama32Vision]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}",
  "demo-apps.baml": "// Demo App Generation BAML Domain\n// Generates demo apps from styles for preview/showcase purposes\n\n// ============================================\n// IMPORTS & REUSED CLASSES\n// ============================================\n\n// Note: StyleConfig is defined in screenshots.baml and reused here\n\n// ============================================\n// DEMO APP CLASSES\n// ============================================\n\nclass DemoAppOutput {\n  app_name string @description(\"Short, catchy app name (1-3 words max, e.g., 'FitQuest', 'ZenJournal', 'ShadowVault')\")\n  app_subtitle string @description(\"App Store subtitle (30 characters MAX, including spaces). A single punchy phrase that captures the app's core value. Examples: 'Fitness made fun', 'Your mindful companion', 'Track workouts, earn rewards'. CRITICAL: Must be 30 characters or less.\")\n  app_description string @description(\"App Store style description (3-5 sentences, 40-80 words). Explain what the app does, key features, and benefits. Make it compelling and professional.\")\n  app_category string @description(\"App Store category. Choose from: Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference. Pick the single most relevant category that matches this app's primary purpose.\")\n  app_icon_prompt string @description(\"Complete text-to-image prompt for generating app icon (50-100 words). CRITICAL: Icon must be SIMPLE with LARGE, BOLD symbols recognizable at small sizes. Avoid tiny details, thin lines, or complex patterns. Should be 1024x1024 square, iOS-style icon design matching the app concept and style aesthetic.\")\n  color_theme string @description(\"Color palette/theme for the app UI (e.g., 'dark purple and electric cyan', 'warm beige and sage green', 'bright yellow with hot pink accents'). This will be used to generate consistent app screens.\")\n  style_guide string @description(\"2-3 sentence visual style guide describing the UI aesthetic, mood, typography approach, and design philosophy. Example: 'Clean minimal interface with generous whitespace and soft shadows. Uses rounded corners throughout for friendly, approachable feel. Typography: Bold sans-serif headlines paired with readable body text.' Should align with the color_theme and app concept.\")\n}\n\nclass ImprovedDescriptionOutput {\n  improved_description string @description(\"Combined app name and description in a single cohesive text. Format: 'AppName: Description here.' The app name should be 1-3 catchy words followed by a colon, then a polished App Store style description (3-5 sentences, 50-90 words). Example: 'DynamicDuo: Connect and share privately with your most trusted partner. Securely exchange photos and messages, keeping your communications off the public grid. Coordinate with encrypted chats and instant sharing. Your secret HQ for two.'\")\n  improved_style string @description(\"2-3 sentence visual style guide describing the UI aesthetic, mood, typography approach, and design philosophy that matches the app concept. Example: 'Modern dark interface with purple and cyan gradients. Clean typography with bold headlines and readable body text. Rounded UI elements throughout for a friendly, approachable vibe.' Should align with the app's purpose and target audience.\")\n  inferred_category string @description(\"App Store category that best matches this app. Choose from: Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference. Pick the single most relevant category.\")\n}\n\nclass AppScreenPromptsOutput {\n  app_screen_prompts string[] @description(\"Array of 3-10 iPhone screenshot prompts for different app screens. Each prompt follows the full-bleed edge-to-edge pattern.\")\n}\n\n// ============================================\n// DEMO APP GENERATION\n// ============================================\n\n// Generate a demo app concept with name, description, category, icon prompt, and color theme\nfunction GenerateDemoApp(\n  app_description_input: string? @description(\"Optional user-provided app description/concept to generate from\"),\n  category_hint: string? @description(\"Optional category hint from user (e.g., 'Productivity', 'Health & Fitness'). Use this to inform the category choice, but you can adjust if another category fits better.\"),\n  vibe_style: string? @description(\"Optional vibe/style hint (e.g., 'Minimal & clean', 'Playful & vibrant', 'Futuristic neon'). Use this to influence color theme and icon design.\"),\n  style_config: StyleConfig? @description(\"Optional style configuration to base the app on\"),\n  style_name: string? @description(\"Optional name of the style for context\")\n) -> DemoAppOutput {\n  client ScreenshotGeneratorMed\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are generating a demo app concept with name, description, category, icon prompt, and color theme.\n\n    {% if app_description_input %}\n    USER'S APP CONCEPT:\n    {{ app_description_input }}\n\n    {% if category_hint %}\n    CATEGORY HINT: {{ category_hint }}\n    (Use this to inform your category choice, but adjust if another category fits better)\n    {% endif %}\n\n    {% if vibe_style %}\n    VISUAL STYLE/VIBE: {{ vibe_style }}\n    (Use this to influence color theme and icon design)\n    {% endif %}\n\n    TASK: Create a fictional app based on this user's description. Generate a short catchy name, App Store category, professional description, icon prompt, and color theme that matches the concept.\n    {% elif style_config %}\n    STYLE TO SHOWCASE:\n    - Name: {{ style_name }}\n    - Background: {{ style_config.background_color }}\n    - Details: {{ style_config.details }}\n    - Text Style: {{ style_config.text_style }}\n    - Device Style: {{ style_config.device_style }}\n\n    {% if category_hint %}\n    CATEGORY HINT: {{ category_hint }}\n    {% endif %}\n\n    {% if vibe_style %}\n    VISUAL STYLE/VIBE: {{ vibe_style }}\n    {% endif %}\n\n    TASK: Create a fictional app with name, category, description, icon prompt, and color theme that would look great in this style.\n    {% endif %}\n\n    ## 1. APP NAME\n\n    Create a short, catchy app name (1-3 words max):\n    - Examples: \"FitQuest\", \"ZenJournal\", \"BeatFlow\", \"ShadowVault\", \"NightGuard\"\n    - Should match the style's mood:\n      * Playful/bright styles → fun, energetic names\n      * Zen/minimal styles → calm, simple names\n      * Dark/cyberpunk styles → edgy, mysterious names\n    - NO hyphens, NO long phrases, NO descriptions in the name\n\n    ## 2. APP SUBTITLE\n\n    Create an App Store subtitle (30 characters MAX):\n    - **CRITICAL: Must be 30 characters or less, including spaces**\n    - A single punchy phrase capturing the app's core value\n    - Examples (all ≤30 chars):\n      * \"Fitness made fun\" (18 chars)\n      * \"Your mindful companion\" (23 chars)\n      * \"Track workouts, earn rewards\" (29 chars)\n      * \"Gamify your fitness journey\" (28 chars)\n      * \"Find calm in chaos\" (18 chars)\n    - Be concise and impactful\n    - Avoid articles (\"a\", \"the\") to save space\n    - Should complement the app name, not repeat it\n\n    ## 3. APP CATEGORY\n\n    Choose the most appropriate App Store category from this list:\n    - **Games** - Gaming apps of all types\n    - **Productivity** - Task management, notes, calendars, organization tools\n    - **Lifestyle** - General lifestyle, hobbies, interests\n    - **Education** - Learning, courses, study tools\n    - **Health & Fitness** - Wellness, workouts, meditation, health tracking\n    - **Business** - Professional tools, team collaboration, enterprise\n    - **Social Networking** - Communication, social media, messaging\n    - **Entertainment** - Media consumption, fun content\n    - **Photo & Video** - Camera, editing, creative tools\n    - **Travel** - Maps, booking, trip planning\n    - **Food & Drink** - Recipes, restaurants, cooking\n    - **Finance** - Banking, budgeting, investing, payments\n    - **News** - News aggregation, journalism\n    - **Sports** - Sports tracking, scores, fan engagement\n    - **Weather** - Weather forecasts and tracking\n    - **Music** - Music streaming, creation, discovery\n    - **Shopping** - E-commerce, retail\n    - **Utilities** - System tools, widgets, extensions\n    - **Medical** - Healthcare, medical tools (professional)\n    - **Reference** - Dictionaries, encyclopedias, information lookup\n\n    Pick ONE category that best matches the app's PRIMARY purpose.\n    {% if category_hint %}Consider the user's hint: {{ category_hint }}{% endif %}\n\n    ## 4. APP DESCRIPTION\n\n    Write an App Store style description (3-5 sentences, 40-80 words):\n    - Explain what the app does and its core purpose\n    - List 2-3 key features or benefits\n    - Make it sound exciting and professional\n    - Match the style's mood and target audience\n    - Example: \"Transform your fitness journey into an epic adventure. FitQuest gamifies your workouts with challenges, achievements, and rewards. Track your progress, compete with friends, and unlock new levels as you get stronger. Perfect for anyone who wants to stay motivated and make exercise fun.\"\n\n    ## 5. APP ICON PROMPT\n\n    Generate a text-to-image prompt for creating the app icon (50-100 words):\n    - **CRITICAL: Keep it SIMPLE - use ONE large, bold central symbol**\n    - **AVOID: Small details, thin lines, complex patterns, circuit boards, tiny text**\n    - Format: 1024x1024 square iOS icon (rounded square)\n    - Use bold, chunky shapes that work at small sizes\n    - Match the style's color palette from background_color\n    - Professional, modern, App Store quality\n    - Examples of GOOD icons:\n      * \"iOS app icon. Large bold shield symbol in center, bright gradient (cyan to purple). Simple, clean design. Minimal details. Rounded square. 1024x1024.\"\n      * \"iOS app icon. Big crescent moon symbol, deep purple gradient background. Soft glow effect. Simple and bold. Rounded square. 1024x1024.\"\n      * \"iOS app icon. Single large bat silhouette in center, glowing purple outline on dark background. Bold and simple. Rounded square. 1024x1024.\"\n\n    ## 6. COLOR THEME\n\n    Define a color palette/theme for the app UI that will be used to generate consistent app screens:\n    - Be specific about colors (e.g., \"dark purple and electric cyan\", \"warm beige and sage green\")\n    - Should match the icon's color palette\n    - Should complement the style's aesthetic if a style is provided\n    - {% if vibe_style %}Match the vibe: {{ vibe_style }}{% endif %}\n    - Include 2-4 specific colors that work well together\n    - Examples:\n      * \"Dark purple gradient with electric cyan accents\"\n      * \"Soft blue-green with white and pale yellow highlights\"\n      * \"Bright vibrant yellow with hot pink and cyan accents\"\n\n    ## 7. STYLE GUIDE\n\n    Write a 2-3 sentence visual style guide describing the UI aesthetic:\n    - Cover: UI mood/aesthetic, typography approach, and overall design philosophy\n    - Should align with the color theme and app concept\n    - {% if vibe_style %}Match the vibe: {{ vibe_style }}{% endif %}\n    - Examples:\n      * \"Clean minimal interface with generous whitespace and soft shadows. Uses rounded corners throughout for friendly, approachable feel. Typography: Bold sans-serif headlines paired with readable body text.\"\n      * \"Energetic interface with vibrant gradients and bold gamification elements. Dynamic typography with strong headlines and clear stats. Rounded corners and playful animations create an engaging experience.\"\n      * \"Serene minimal design with generous whitespace. Elegant serif headings paired with clean sans-serif body text. Subtle animations and organic shapes evoke calm and mindfulness.\"\n\n    ## MATCHING GUIDELINES:\n    - App concept should feel natural with the style's personality\n    - Category should accurately reflect the app's primary purpose\n    - Icon colors should match the color theme\n    - Icon mood should match style energy (calm vs energetic, playful vs serious, etc.)\n    - Color theme should be cohesive with the overall style aesthetic\n    - Style guide should align with color theme and app purpose\n    - {% if vibe_style %}Visual style/vibe should be reflected in colors, icon, and style guide: {{ vibe_style }}{% endif %}\n    - All outputs (name, category, description, icon, color theme, style guide) should work together harmoniously\n\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction ImproveAppDescription(\n  draft_description: string @description(\"Rough or placeholder description that needs to sound polished and App Store ready\"),\n  vibe_hint: string? @description(\"Optional tone, vibe, or audience notes to weave into the copy\")\n) -> ImprovedDescriptionOutput {\n  client ScreenshotGeneratorMed\n  prompt #\"\n    {{ _.role(\"system\") }}\n    You are a marketing copywriter who specializes in App Store product descriptions that are clear, benefit-driven, and polished.\n\n    **CRITICAL APP STORE FORMAT REQUIREMENTS:**\n    - First sentence: Hook with the main value proposition (what the app does and why it matters)\n    - Middle 2-3 sentences: Key features and benefits (specific, tangible)\n    - Final sentence: Call-to-action or emotional closer\n    - Length: 3-5 sentences, 50-90 words total\n    - Tone: Professional but approachable, exciting but trustworthy\n    - Avoid: Repetition, buzzword overload, vague claims, excessive punctuation\n\n    **APP STORE DESCRIPTION EXAMPLES:**\n    - \"Transform your fitness journey into an epic adventure. Track workouts, earn achievements, and compete with friends through gamified challenges. Stay motivated with smart reminders and personalized goals. Your path to a stronger, healthier you starts here.\"\n    - \"Find calm in the chaos with guided meditation sessions designed for busy professionals. Choose from 5-minute mindfulness breaks, breathing exercises, and ambient soundscapes. Build a consistent practice with gentle reminders and progress tracking. Peace of mind, just a tap away.\"\n\n    {{ _.role(\"user\") }}\n    DRAFT DESCRIPTION:\n    {{ draft_description }}\n\n    {% if vibe_hint %}\n    TONE / VIBE TO REFLECT: {{ vibe_hint }}\n    {% endif %}\n\n    **YOUR TASK:**\n    Return THREE outputs:\n    1. improved_description: The app name + polished description\n    2. improved_style: A visual style guide that matches the app\n    3. inferred_category: The most appropriate App Store category\n\n    **improved_description Format:** `AppName: Description sentence 1. Description sentence 2. Description sentence 3. [Optional sentence 4-5.]`\n\n    **improved_description Requirements:**\n    1. Start with a catchy app name (1-3 words) followed by a colon\n       - If input is rough concept like \"photo sharing app between batman and robin\" → Create catchy name (e.g., \"DynamicDuo\", \"Gotham Link\")\n       - If input mentions an app name → Extract and refine it\n    2. After the colon, write the polished App Store description (3-5 sentences, 50-90 words)\n    3. Match the requested tone/vibe if provided\n\n    **improved_style Requirements:**\n    1. Write 2-3 sentences describing the visual design approach\n    2. Cover: UI mood/aesthetic, color palette hints, typography style, and overall design philosophy\n    3. Should feel cohesive with the app's purpose and target audience\n    4. Match the tone/vibe if provided\n\n    **inferred_category Requirements:**\n    1. Choose the SINGLE most relevant App Store category from this list:\n       - Games, Productivity, Lifestyle, Education, Health & Fitness, Business, Social Networking, Entertainment, Photo & Video, Travel, Food & Drink, Finance, News, Sports, Weather, Music, Shopping, Utilities, Medical, Reference\n    2. Base your choice on the app's PRIMARY purpose and functionality\n    3. Return ONLY the category name (e.g., \"Health & Fitness\", not \"the category is Health & Fitness\")\n\n    **Examples:**\n\n    improved_description: \"FitQuest: Transform your fitness journey into an epic adventure. Track workouts, earn achievements, and compete with friends through gamified challenges. Stay motivated with smart reminders and personalized goals. Your path to a stronger, healthier you starts here.\"\n    improved_style: \"Energetic interface with vibrant gradients (purple to cyan) and bold gamification elements. Dynamic typography with strong headlines and clear stats. Rounded corners and playful animations create an engaging, motivating experience.\"\n    inferred_category: \"Health & Fitness\"\n\n    improved_description: \"Mindful Minutes: Discover tranquility amidst your busy schedule with guided meditations crafted for real life. Access quick sessions from 3 to 15 minutes, perfect for commutes or breaks. Build consistent practice with calming sounds and mood tracking. Reclaim your focus and peace, one minute at a time.\"\n    improved_style: \"Serene minimal design with soft blue-green palette and generous whitespace. Elegant serif headings paired with clean sans-serif body text. Subtle animations and organic shapes evoke calm and mindfulness.\"\n    inferred_category: \"Health & Fitness\"\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// APP SCREEN GENERATION\n// ============================================\n\n// Generate app screen prompts for any app (demo or user-created)\nfunction GenerateScreensForApp(\n  app_name: string @description(\"Name of the app to generate screens for\"),\n  app_description: string @description(\"Description of what the app does\"),\n  screen_instructions: string? @description(\"Optional specific instructions for what screens to generate (e.g., 'generate a video chat screen, a chat messages screen, and a settings screen'). If not provided, will generate common app screens automatically.\"),\n  num_screens: int? @description(\"Number of screens to generate (3-10). Defaults to 5 if not specified.\"),\n  color_theme: string @description(\"Color palette/theme to use for all screens (e.g., 'dark purple and cyan', 'warm orange and yellow')\"),\n  style_config: StyleConfig? @description(\"Optional style configuration to match visual aesthetic\")\n) -> AppScreenPromptsOutput {\n  client ScreenshotGeneratorMed\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Generate {{ num_screens or 5 }} iPhone app screen prompts for the following app:\n\n    **APP DETAILS:**\n    - Name: {{ app_name }}\n    - Description: {{ app_description }}\n    - Color Theme: {{ color_theme }}\n    {% if style_config %}\n    - Visual Style Context: {{ style_config.text_style }}\n    {% endif %}\n\n    {% if screen_instructions %}\n    **SCREEN REQUIREMENTS:**\n    {{ screen_instructions }}\n    {% else %}\n    **SCREEN REQUIREMENTS:**\n    Generate {{ num_screens or 5 }} diverse screens showcasing different parts of the app. Include common screens like:\n    - Home/Dashboard (main entry point)\n    - Main feature screen(s) specific to this app type\n    - Profile/Account screen\n    - Settings/Preferences screen\n    - Any other relevant screens for this app's functionality\n\n    Make each screen showcase a unique aspect of the app.\n    {% endif %}\n\n    **CRITICAL PROMPT REQUIREMENTS:**\n\n    Each prompt MUST follow this exact pattern:\n    \"iPhone screenshot of [screen name]. Raw screen capture filling the entire canvas - status bar touching top edge, app background extending to all edges (left, right, bottom). [Detailed UI description: specific elements like headers, buttons, cards, lists, images, text content, interactive components]. Bottom navigation tabs/buttons with safe area spacing (NO home indicator visible). NO device frame, NO rounded corners, NO padding around edges - just the screen pixels. {{ color_theme }}.\"\n\n    **UI COLOR CONSISTENCY RULES (CRITICAL - MUST FOLLOW EXACTLY):**\n\n    First, analyze the color theme \"{{ color_theme }}\" and identify:\n    - PRIMARY_BG: The main background color (lightest or darkest base color)\n    - ACCENT_COLOR: The brightest/most vibrant color for active states, primary buttons, and highlights\n    - MUTED_COLOR: A softer, desaturated version for inactive states and secondary elements\n    - TEXT_COLOR: High contrast color for readable text\n\n    **MANDATORY: All screens must use these EXACT color assignments:**\n    - Background: PRIMARY_BG (same across all screens)\n    - Active tab/button/selected state: ACCENT_COLOR (same across all screens)\n    - Inactive tab/unselected state: MUTED_COLOR (same across all screens)\n    - Primary action buttons: ACCENT_COLOR (same across all screens)\n    - Text: TEXT_COLOR (same across all screens)\n\n    **BOTTOM NAVIGATION CONSISTENCY (CRITICAL):**\n    - ALL screens must show the EXACT SAME navigation tabs in the SAME ORDER\n    - Choose 4-5 relevant tab names for this app (e.g., \"Home\", \"Journal\", \"Moods\", \"Insights\", \"Profile\")\n    - Specify which tab is ACTIVE on each screen (highlighted in ACCENT_COLOR)\n    - All other tabs must be INACTIVE (shown in MUTED_COLOR)\n    - Tab icon style must be identical across screens (same line weight, same icon design approach)\n\n    **EXAMPLE PROMPTS WITH CONSISTENT COLORS:**\n\n    Screen 1: \"iPhone screenshot of Home Dashboard. Raw screen capture filling the entire canvas - status bar touching top edge, app background extending to all edges. Soft sage green background. Header 'Today' in earthy white. Central mood card with warm cream border. Bottom navigation: Home tab ACTIVE (highlighted in muted gold icon and text), Journal tab inactive (earthy white), Moods tab inactive (earthy white), Profile tab inactive (earthy white). NO device frame, NO rounded corners, NO padding. Soft sage green, warm cream, muted gold, earthy white.\"\n\n    Screen 2: \"iPhone screenshot of Journal Entry. Raw screen capture filling the entire canvas - status bar touching top edge, app background extending to all edges. Soft sage green background. Text input area with warm cream border. Save button in muted gold. Bottom navigation: Home tab inactive (earthy white), Journal tab ACTIVE (highlighted in muted gold icon and text), Moods tab inactive (earthy white), Profile tab inactive (earthy white). NO device frame, NO rounded corners, NO padding. Soft sage green, warm cream, muted gold, earthy white.\"\n\n    **DESIGN CONSISTENCY:**\n    - All screens MUST use the color theme EXACTLY as specified above\n    - UI components of the same type MUST use the SAME color across all screens\n    - Typography and font weights must be consistent across screens\n    - Only the ACTIVE tab should change between screens - everything else stays the same\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// DEMO APP TEST CASES\n// ============================================\n\ntest CyberpunkDemoApp {\n  functions [GenerateDemoApp]\n  args {\n    app_description_input null\n    style_config {\n      background_color \"radial gradient from dark navy (#0A0E27) center to bright magenta (#FF006E) edges\"\n      details \"Futuristic cyberpunk style with holographic circuit patterns (cyan, 60-80px, 4-5 scattered). Glowing pink grid squares (40-60px, 6-8 pieces). Neon hexagons with cyan outline (50-70px, 3-4 at edges). Elements concentrated in outer 12-15% border area.\"\n      text_style \"Futuristic bold sans-serif font, 800 weight, white color with bright cyan (#00F0FF) outline (4-5px) and neon glow effect\"\n      device_style \"Glossy midnight black frame with vibrant cyan (#00F0FF) neon glow effect around edges and thin modern bezels\"\n    }\n    style_name \"Cyberpunk Neon\"\n  }\n}\n\ntest ZenMinimalistDemoApp {\n  functions [GenerateDemoApp]\n  args {\n    app_description_input null\n    style_config {\n      background_color \"soft gradient from warm beige (#F5F1E8) to pale sage green (#E8F2E8)\"\n      details \"Minimalist zen style with delicate watercolor brush strokes (soft greens and browns, 40-60px, 3-4 at corners). Subtle organic leaf silhouettes (30-50px, 4-5 scattered). Small zen circle enso symbols (35-45px, 2-3 pieces). Elements very sparse, outer 10% border only.\"\n      text_style \"Elegant serif font (Playfair Display or similar), 600 weight, deep forest green (#2D4A3E) with subtle cream shadow for depth\"\n      device_style \"Matte warm wood texture frame with natural bamboo aesthetic and organic rounded edges\"\n    }\n    style_name \"Zen Minimalist\"\n  }\n}\n\ntest PlayfulPopArtDemoApp {\n  functions [GenerateDemoApp]\n  args {\n    app_description_input null\n    style_config {\n      background_color \"bright vibrant yellow (#FFDD00) solid color\"\n      details \"Playful pop art style with smiley face emojis (80-100px, 4-5 at edges). Star sparkles in hot pink and cyan (60-80px, 6-8 scattered). Lightning bolts in bright orange (55-75px, 3-4 pieces). Comic book style explosion shapes (70-90px, 2-3 at corners). Elements concentrated in outer 12-18% border area, center clear.\"\n      text_style \"Extra bold rounded sans-serif font (Impact or similar), 900 weight, white color with thick 5-7px black outline stroke and subtle drop shadow\"\n      device_style \"Colorful gradient frame with cyan-to-green fade on left edge transitioning to orange-to-pink fade on bottom right, glossy finish\"\n    }\n    style_name \"Snap Style\"\n  }\n}\n\ntest DemoFromDescription {\n  functions [GenerateDemoApp]\n  args {\n    app_description_input \"A meditation and mindfulness app for busy professionals. Helps users find calm moments throughout their day with 5-minute guided sessions, breathing exercises, and ambient soundscapes.\"\n    style_config null\n    style_name null\n  }\n}\n\ntest ImproveDescriptionFromDraft {\n  functions [ImproveAppDescription]\n  args {\n    draft_description \"This app helps you track workouts and offers some motivation features. It has reminders, a few templates, and a social feed, but the copy feels flat.\"\n    vibe_hint \"Energetic fitness mentor\" \n  }\n}\n\n// ============================================\n// SCREEN GENERATION TEST CASES\n// ============================================\n\ntest GenerateScreensCustomInstructions {\n  functions [GenerateScreensForApp]\n  args {\n    app_name \"FitQuest\"\n    app_description \"Gamified fitness tracking app with challenges, achievements, and social features\"\n    screen_instructions \"Generate: 1) Today's workout dashboard with progress rings and stats, 2) Exercise library with video previews and categories, 3) Social feed showing friend activities and challenges, 4) Achievement showcase with unlocked badges and trophies\"\n    num_screens 4\n    color_theme \"vibrant purple gradient with electric cyan accents\"\n    style_config null\n  }\n}\n\ntest GenerateScreensAuto {\n  functions [GenerateScreensForApp]\n  args {\n    app_name \"CalmFlow\"\n    app_description \"Meditation and mindfulness app for busy professionals with guided sessions and breathing exercises\"\n    screen_instructions null\n    num_screens 5\n    color_theme \"serene blue-green with soft white and pale yellow highlights\"\n    style_config null\n  }\n}\n",
  "device-scoring.baml": "// Device Reference Image Quality Scoring\n// Analyzes generated device images and scores them based on quality criteria\n\nclass DeviceImageScore {\n  overall_score int @description(\"Overall quality score from 0-100 (higher is better)\")\n  is_front_facing bool @description(\"Device is facing directly forward (not tilted or angled)\")\n  has_black_screen bool @description(\"Screen display area is solid black\")\n  has_black_background bool @description(\"Canvas background behind device is solid black\")\n  no_notch_or_island bool @description(\"No Dynamic Island, notch, or camera cutouts visible\")\n  proper_size bool @description(\"Device fills approximately 80-90% of the frame\")\n  all_corners_visible bool @description(\"All 4 corners of the device are visible\")\n  is_vertical bool @description(\"Device is in vertical/portrait orientation\")\n  no_text_or_labels bool @description(\"No text, labels, or markings on device or frame\")\n  frame_matches_style bool @description(\"Device frame styling matches the expected description\")\n  issues string[] @description(\"List of specific issues found (empty if perfect)\")\n  reasoning string @description(\"Brief explanation of the score (2-3 sentences)\")\n}\n\n// Score a single device reference image\nfunction ScoreDeviceReferenceImage(\n  device_image: image @description(\"The generated device reference image to score\"),\n  expected_frame_style: string @description(\"Expected frame styling description (e.g., 'glossy black frame with cyan glow')\")\n) -> DeviceImageScore {\n  client Gemini25Flash\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are a quality control expert analyzing a generated device mockup image.\n\n    EXPECTED FRAME STYLE: \"{{ expected_frame_style }}\"\n\n    IMAGE TO ANALYZE:\n    {{ device_image }}\n\n    SCORING CRITERIA:\n\n    Analyze the image and check each criterion carefully:\n\n    1. **Front-Facing (is_front_facing)**:\n       - Device should be facing DIRECTLY forward like a flat icon\n       - NOT tilted, NOT at an angle, NOT showing side edges\n       - Should look straight-on at the screen\n\n    2. **Black Screen (has_black_screen)**:\n       - Screen display area must be solid black (#000000)\n       - No content, no UI elements, just pure black\n\n    3. **Black Background (has_black_background)** - CRITICAL CHECK:\n       - Look at the CANVAS/BACKGROUND color surrounding the device\n       - The area OUTSIDE the device frame must be pure black (#000000)\n       - Common mistakes to catch:\n         * WHITE background = FAIL (deduct 20 points)\n         * GRAY background = FAIL (deduct 20 points)\n         * Light colored background = FAIL (deduct 20 points)\n       - Only PASS if the background is definitively dark black\n       - When in doubt about background color, assume it fails\n\n    4. **No Notch/Island (no_notch_or_island)**:\n       - Should NOT show Dynamic Island, notch, or camera cutouts\n       - Bezel should be completely clean and uniform\n\n    5. **Proper Size (proper_size)**:\n       - Device should fill approximately 80-90% of the image frame\n       - Not too small, not cut off at edges\n\n    6. **All Corners Visible (all_corners_visible)**:\n       - All 4 corners of the device must be visible in frame\n       - Device not cropped or cut off\n\n    7. **Vertical Orientation (is_vertical)**:\n       - Device should be in portrait/vertical orientation\n       - Taller than it is wide\n\n    8. **No Text/Labels (no_text_or_labels)**:\n       - NO text, labels, or markings anywhere on device or frame\n       - No brand names, model numbers, etc.\n\n    9. **Frame Matches Style (frame_matches_style)**:\n       - Device frame should match the expected styling description\n       - Check colors, materials, glows, textures described\n\n    OVERALL SCORE CALCULATION:\n    - Start at 100 points\n    - Deduct points for each failed criterion:\n      * Front-facing: -25 points if tilted/angled\n      * Black screen: -15 points if not solid black\n      * Black background: -20 points if not pure black (white, gray, or any other color)\n      * No notch/island: -15 points if visible\n      * Proper size: -10 points if too small/large\n      * All corners visible: -10 points if cropped\n      * Vertical orientation: -5 points if horizontal\n      * No text/labels: -5 points if text present\n      * Frame matches style: -5 points if doesn't match\n\n    IMPORTANT: Be very strict about the black background check. White backgrounds are a common mistake.\n\n    ISSUES ARRAY:\n    - List specific problems found (e.g., \"Device is tilted at 15° angle\", \"Dynamic Island visible at top\", \"Background is gray instead of black\")\n    - Leave empty if no issues found\n\n    REASONING:\n    - Provide 2-3 sentences explaining the score\n    - Highlight major issues or confirm it's good\n    - Be specific and actionable\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASES\n// ============================================\n\ntest ScoreWhiteBackgroundImage {\n  functions [ScoreDeviceReferenceImage]\n  args {\n    device_image { url \"https://v3b.fal.media/files/b/panda/Zw5iNOfktBsj9crZWLIKq_4899ace7a198486fafcf11882de4c6a5.png\" }\n    expected_frame_style \"Glossy black metallic frame with dual neon edge lighting\"\n  }\n}\n",
  "generators.baml": "// Generator configuration for TypeScript\n// This tells BAML where to output the generated TypeScript client\n\ngenerator target {\n  output_type \"typescript\"\n  output_dir \"..\"  // Outputs to project root\n  version \"0.210.0\"\n}\n",
  "helloworld.baml": "// Hello World BAML Domain\n// Basic examples for getting started with BAML and OpenRouter integration\n// Tests are co-located with their functions for better maintainability\n\n// ============================================\n// MODELS\n// ============================================\n\nclass BasicResponse {\n  answer string @description(\"The direct answer to the question\")\n  confidence float @description(\"Confidence level from 0.0 to 1.0\")\n}\n\nclass DetailedResponse {\n  answer string\n  confidence float\n  explanation string? @description(\"Optional explanation if needed\")\n  sources string[]? @description(\"Optional list of sources\")\n}\n\n// ============================================\n// SIMPLE STRING FUNCTIONS WITH TESTS\n// ============================================\n\nfunction SimpleStringGPT5Nano(input: string) -> string {\n  client GPT5Nano\n  prompt #\"\n    Respond to this: {{ input }}\n\n    Be concise and direct.\n  \"#\n}\n\ntest NanoGreeting {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"Say hello if you can hear me\"\n  }\n}\n\ntest NanoMath {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"What is 2+2?\"\n  }\n}\n\nfunction SimpleStringGPT5(input: string) -> string {\n  client GPT5\n  prompt #\"\n    Respond to this: {{ input }}\n\n    Be concise and direct.\n  \"#\n}\n\ntest GPT5Greeting {\n  functions [SimpleStringGPT5]\n  args {\n    input \"Write a poetic greeting\"\n  }\n}\n\ntest GPT5Philosophy {\n  functions [SimpleStringGPT5]\n  args {\n    input \"What is the meaning of life in one sentence?\"\n  }\n}\n\n// ============================================\n// STRUCTURED RESPONSE FUNCTIONS WITH TESTS\n// ============================================\n\nfunction StructuredResponseGPT5Nano(question: string) -> BasicResponse {\n  client GPT5Nano\n  prompt #\"\n    Answer this question: {{ question }}\n\n    Also rate your confidence in your answer from 0.0 (not confident) to 1.0 (very confident).\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoCapital {\n  functions [StructuredResponseGPT5Nano]\n  args {\n    question \"What is the capital of France?\"\n  }\n}\n\ntest NanoScience {\n  functions [StructuredResponseGPT5Nano]\n  args {\n    question \"What is H2O?\"\n  }\n}\n\nfunction StructuredResponseGPT5(question: string) -> BasicResponse {\n  client GPT5\n  prompt #\"\n    Answer this question: {{ question }}\n\n    Also rate your confidence in your answer from 0.0 (not confident) to 1.0 (very confident).\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5History {\n  functions [StructuredResponseGPT5]\n  args {\n    question \"When did World War II end?\"\n  }\n}\n\ntest GPT5Complex {\n  functions [StructuredResponseGPT5]\n  args {\n    question \"Explain quantum entanglement\"\n  }\n}\n\n// ============================================\n// LIST GENERATOR FUNCTIONS WITH TESTS\n// ============================================\n\nfunction ListGeneratorGPT5Nano(topic: string) -> string[] {\n  client GPT5Nano\n  prompt #\"\n    List 3 examples of: {{ topic }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoProgramming {\n  functions [ListGeneratorGPT5Nano]\n  args {\n    topic \"programming languages\"\n  }\n}\n\ntest NanoColors {\n  functions [ListGeneratorGPT5Nano]\n  args {\n    topic \"primary colors\"\n  }\n}\n\nfunction ListGeneratorGPT5(topic: string) -> string[] {\n  client GPT5\n  prompt #\"\n    List 5 examples of: {{ topic }}\n\n    Provide detailed, high-quality examples.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5Frameworks {\n  functions [ListGeneratorGPT5]\n  args {\n    topic \"modern JavaScript frameworks\"\n  }\n}\n\ntest GPT5AIModels {\n  functions [ListGeneratorGPT5]\n  args {\n    topic \"popular large language models\"\n  }\n}\n\n// ============================================\n// DETAILED ANALYSIS FUNCTIONS WITH TESTS\n// ============================================\n\nfunction DetailedAnalysisGPT5Nano(query: string) -> DetailedResponse {\n  client GPT5Nano\n  prompt #\"\n    Query: {{ query }}\n\n    Provide a quick answer with confidence level.\n    Be brief and to the point.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoQuickAnswer {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What is 100 divided by 4?\"\n  }\n}\n\ntest NanoSimpleFact {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What year was the iPhone released?\"\n  }\n}\n\nfunction DetailedAnalysisGPT5(query: string) -> DetailedResponse {\n  client GPT5\n  prompt #\"\n    Query: {{ query }}\n\n    Provide a comprehensive answer with confidence level.\n    Include explanation only if the answer needs clarification.\n    Include sources only if you're referencing specific information.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5SkyQuestion {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Why is the sky blue? Explain the physics behind it.\"\n  }\n}\n\ntest GPT5MathExplanation {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"What is the square root of 144 and how do you calculate it manually?\"\n  }\n}\n\ntest GPT5SpaceHistory {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Who was the first person to walk on the moon and what was significant about the mission?\"\n  }\n}\n\ntest GPT5Photosynthesis {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Explain photosynthesis in detail with the chemical equations\"\n  }\n}\n\n// ============================================\n// COMPARISON TESTS\n// ============================================\n// These tests run the same prompt on different models for comparison\n\ntest CompareSimple_Nano {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"Explain AI in one sentence\"\n  }\n}\n\ntest CompareSimple_GPT5 {\n  functions [SimpleStringGPT5]\n  args {\n    input \"Explain AI in one sentence\"\n  }\n}\n\ntest CompareDetailed_Nano {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What are the benefits of TypeScript?\"\n  }\n}\n\ntest CompareDetailed_GPT5 {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"What are the benefits of TypeScript?\"\n  }\n}",
  "scene.baml": "// Scene Generation BAML Domain\n// Takes character objects (with avatars), scene prompt, and art style to generate optimized image prompts\n// Note: Avatar class is automatically available from avatars.baml in the same directory\n\n// ============================================\n// SCENE-SPECIFIC CLIENT CONFIGURATION\n// ============================================\n\n// High Quality - Best scene generation for final/hero images\nclient<llm> SceneGeneratorHigh {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25Pro,        // Premium Gemini model\n      GPT5,               // Top-tier OpenAI\n      ClaudeSonnet4,      // High-quality Anthropic\n      MistralLarge        // Premium Mistral fallback\n    ]\n  }\n}\n\n// Medium Quality - Balanced for standard use\nclient<llm> SceneGeneratorMed {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25Flash,      // Good balance of speed/quality\n      GPT5Mini,           // Balanced OpenAI\n      ClaudeHaiku,        // Fast Claude\n      MistralSmall        // Efficient Mistral\n    ]\n  }\n}\n\n// Low Quality - Fast and cheap for drafts/testing\nclient<llm> SceneGeneratorLow {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25FlashLite,  // Ultra-fast Gemini\n      GPT5Nano,           // Cheapest OpenAI\n      ClaudeHaiku         // Fast fallback\n    ]\n  }\n}\n\n// Default scene generator (uses medium tier)\nclient<llm> SceneGenerator {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25Flash,      // Start with balanced\n      Gemini25FlashLite,  // Fallback to fast\n      Gemini25Pro         // Escalate to premium if needed\n    ]\n  }\n}\n\n// ============================================\n// SCENE MODEL\n// ============================================\n\nclass Scene {\n  // Core Scene Description\n  main_description string @description(\"Complete scene description in 2-3 clear sentences\")\n\n  // Character Integration (supports multiple characters)\n  characters CharacterInScene[] @description(\"How each avatar appears in the scene\")\n  character_arrangement string @description(\"Overall arrangement and positioning of characters\")\n\n  // Visual Composition\n  camera_angle string @description(\"Camera angle (eye-level, low angle, high angle, profile, three-quarter)\")\n  shot_type string @description(\"Shot type (close-up, medium shot, full body, wide shot)\")\n\n  // Environment\n  setting string @description(\"Location and environment in simple terms\")\n  background string @description(\"Background elements in order of importance\")\n  time_of_day string @description(\"Time of day and its lighting effect\")\n\n  // Mood & Atmosphere\n  mood string @description(\"Emotional tone (epic, peaceful, mysterious, energetic, etc.)\")\n  color_palette string @description(\"Dominant colors (max 3-4 colors)\")\n  lighting_style string @description(\"Lighting description (dramatic, soft, golden hour, etc.)\")\n\n  // Art Style Application\n  style_keywords string[] @description(\"Key style descriptors for the art style (max 5)\")\n  quality_markers string[] @description(\"Quality indicators (masterpiece, best quality, ultra detailed, etc.)\")\n\n  // Optimized Prompts for Image Generation\n  main_prompt string @description(\"Complete prompt for image generation (150-250 words max)\")\n  negative_prompt string @description(\"Things to avoid (bad anatomy, blurry, low quality, etc.)\")\n\n  // Structured Prompt Components (for JSON-capable models)\n  structured_prompt PromptStructure @description(\"Structured prompt for models that support JSON\")\n\n  // Generation Hints\n  suggested_guidance float @description(\"Suggested guidance scale (typically 3.5-12)\")\n  complexity_score float @description(\"Scene complexity (0.0-1.0)\")\n\n  // Metadata\n  avatar_integration string @description(\"How well the avatars are integrated in the prompt\")\n  character_count int @description(\"Number of characters in the scene\")\n  key_elements string[] @description(\"Top 3-5 most important elements to get right\")\n}\n\n// ============================================\n// CHARACTER DEFINITION\n// ============================================\n\nclass Character {\n  // Identity\n  name string? @description(\"Optional character name/identifier\")\n  avatar Avatar @description(\"Physical characteristics from avatar analysis\")\n\n  // Structured Outfit\n  outfit Outfit @description(\"Character's clothing and accessories\")\n\n  // Scene generation hints\n  expression string? @description(\"Default expression (confident, shy, serious, cheerful, etc.)\")\n  signature_colors string[]? @description(\"Preferred color palette for this character\")\n}\n\nclass Outfit {\n  // Clothing layers\n  top string? @description(\"Upper body clothing (t-shirt, blouse, jacket, etc.)\")\n  bottom string? @description(\"Lower body clothing (jeans, skirt, shorts, etc.)\")\n  footwear string? @description(\"Shoes, boots, sandals, etc.\")\n  outerwear string? @description(\"Coat, hoodie, vest, etc.\")\n\n  // Integrated accessories (part of the outfit)\n  accessories string[]? @description(\"Watches, jewelry, belts, hats, scarves, bags, etc.\")\n\n  // Style metadata\n  style string @description(\"Overall style (casual, formal, athletic, punk, vintage, etc.)\")\n  color_scheme string? @description(\"Main colors of the outfit\")\n  fabric_textures string[]? @description(\"Materials like denim, leather, silk, cotton\")\n}\n\n// ============================================\n// CHARACTER IN SCENE\n// ============================================\n\nclass CharacterInScene {\n  character_index int @description(\"Index of the character this refers to (0-based)\")\n  description string @description(\"Character appearance in this specific scene\")\n  pose string @description(\"Character's pose or action\")\n  placement string @description(\"Where positioned (left, center, right, foreground, background)\")\n  outfit_modifications string? @description(\"Scene-specific outfit changes (wet, torn, dirty, etc.)\")\n  interaction string? @description(\"How they interact with others or environment\")\n}\n\n// ============================================\n// STRUCTURED PROMPT FORMAT\n// ============================================\n\nclass PromptStructure {\n  // Core Elements\n  subjects Subject[] @description(\"All characters/subjects in the scene\")\n  group_action string? @description(\"What the group is doing together (if multiple)\")\n  environment string @description(\"Setting and surroundings\")\n\n  // Style Elements\n  style PromptStyle @description(\"Visual style specifications\")\n\n  // Technical Details\n  technical PromptTechnical @description(\"Camera and shot specifications\")\n\n  // Quality Markers\n  quality string[] @description(\"Quality and detail markers\")\n}\n\nclass PromptStyle {\n  art_style string @description(\"Primary art style\")\n  color_palette string @description(\"Color scheme\")\n  mood string @description(\"Emotional tone\")\n  lighting string @description(\"Lighting setup\")\n  texture string @description(\"Surface and material qualities\")\n}\n\nclass PromptTechnical {\n  camera_angle string @description(\"Camera perspective\")\n  shot_type string @description(\"Framing and distance\")\n  composition string @description(\"Visual arrangement\")\n  depth_of_field string @description(\"Focus and blur effects\")\n}\n\nclass Subject {\n  description string @description(\"Physical appearance and outfit\")\n  action string @description(\"Individual action or pose\")\n  position string @description(\"Position in frame\")\n}\n\n// ============================================\n// SCENE GENERATION FUNCTION\n// ============================================\n\nfunction GenerateScene(\n  scene_prompt: string @description(\"User's scene description\"),\n  art_style: string @description(\"Desired art style\"),\n  characters: Character[] @description(\"Array of characters with avatars and outfits (1-5 characters)\")\n) -> Scene {\n  client SceneGeneratorMed  // Change to SceneGeneratorHigh or SceneGeneratorLow as needed\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Generate an optimized scene description for image generation.\n\n    INPUTS:\n    Scene Request: {{ scene_prompt }}\n    Art Style: {{ art_style }}\n\n    Character Descriptions:\n    {% for character in characters %}\n    Character {{ loop.index }}{% if character.name %} ({{ character.name }}){% endif %}:\n\n    Physical Traits:\n    - Summary: {{ character.avatar.summary }}\n    - Age/Gender: {{ character.avatar.apparent_age }}, {{ character.avatar.gender_presentation }}\n    - Face: {{ character.avatar.face_shape }} face, {{ character.avatar.skin_tone }} skin\n    - Hair: {{ character.avatar.hair_color }}, {{ character.avatar.hair_length }}, {{ character.avatar.hair_style }}\n    - Eyes: {{ character.avatar.eye_color }}, {{ character.avatar.eye_shape }}\n    - Eyebrows: {{ character.avatar.eyebrows }}\n    - Nose: {{ character.avatar.nose_description }}\n    - Lips: {{ character.avatar.lip_description }}\n    - Distinctive: {{ character.avatar.key_features }}\n    {% if character.avatar.body_build %}\n    - Body build: {{ character.avatar.body_build }}\n    {% endif %}\n    {% if character.avatar.facial_hair %}\n    - Facial hair: {{ character.avatar.facial_hair }}\n    {% endif %}\n    {% if character.avatar.glasses %}\n    - Glasses: {{ character.avatar.glasses_style }}\n    {% endif %}\n    {% if character.avatar.ethnic_appearance %}\n    - Ethnic appearance: {{ character.avatar.ethnic_appearance }}\n    {% endif %}\n\n    Outfit:\n    - Style: {{ character.outfit.style }}\n    {% if character.outfit.top %}\n    - Top: {{ character.outfit.top }}\n    {% endif %}\n    {% if character.outfit.bottom %}\n    - Bottom: {{ character.outfit.bottom }}\n    {% endif %}\n    {% if character.outfit.outerwear %}\n    - Outerwear: {{ character.outfit.outerwear }}\n    {% endif %}\n    {% if character.outfit.footwear %}\n    - Footwear: {{ character.outfit.footwear }}\n    {% endif %}\n    {% if character.outfit.accessories %}\n    - Accessories: {{ character.outfit.accessories }}\n    {% endif %}\n    {% if character.outfit.color_scheme %}\n    - Color scheme: {{ character.outfit.color_scheme }}\n    {% endif %}\n    {% if character.expression %}\n    - Expression: {{ character.expression }}\n    {% endif %}\n    {% if character.signature_colors %}\n    - Signature colors: {{ character.signature_colors }}\n    {% endif %}\n\n    {% endfor %}\n\n    INSTRUCTIONS FOR PROMPT GENERATION:\n\n    CRITICAL: You MUST include EVERY physical trait and outfit detail provided above in your main_prompt.\n    Do not summarize or skip any features. If it's listed above, it must appear in the prompt.\n\n    1. CREATE TWO PROMPT FORMATS:\n       A. main_prompt: Natural language prompt (150-250 words)\n       B. structured_prompt: JSON-friendly structured format\n\n    2. MAIN PROMPT STRUCTURE:\n       - Lead with art style REPEATED 2-3 times for emphasis\n       - Character descriptions should be DETAILED (30-50 words per character):\n         * Include age, ethnicity, face shape, skin tone\n         * Complete hair description (color, length, style, texture if notable)\n         * Eye color AND shape\n         * ALL distinctive features\n         * Complete outfit with all items\n       - Include specific action/pose with body language\n       - Describe environment with at least 3 details\n       - End with mood, lighting, and quality markers\n       - Format: \"[style]x3, [detailed characters], [specific actions], [rich environment], [mood/lighting], [quality]\"\n       - For non-photorealistic styles, explicitly state what it is NOT\n\n    3. STRUCTURED PROMPT (for JSON-capable models like NanoBanana/Gemini):\n       - Break down into clear categories\n       - Subjects: Array of character descriptions with individual actions\n       - Group Action: What they're doing together (if multiple)\n       - Environment: Setting details\n       - Style: Art style, colors, mood, lighting\n       - Technical: Camera angle, shot type, composition\n       - Quality: Detail level markers\n\n    4. CHARACTER CONSISTENCY AND DETAIL:\n       - Include ALL provided physical traits in the main prompt:\n         * Face shape AND skin tone (e.g., \"round olive-skinned face\")\n         * Complete hair description (color + length + style)\n         * Eye color AND shape (e.g., \"dark brown almond eyes\")\n         * ALL distinctive features (glasses style, facial hair type, piercings)\n       - Describe complete outfits:\n         * Every clothing item provided (top, bottom, footwear)\n         * All accessories (watches, jewelry, belts)\n         * Fabric textures if provided\n       - Add character-specific details:\n         * Body language matching their expression\n         * How clothing fits their body type\n         * Any scene-appropriate modifications (sweat, battle damage, etc.)\n       - For multiple characters:\n         * Describe relative heights/builds if different\n         * Show personality through posture and stance\n\n       IMPORTANT - ACCESSORY CONFLICT RESOLUTION:\n       - Character outfit/accessories ALWAYS override conflicting Avatar traits (Character is scene-specific, Avatar is base description)\n       - If outfit accessories include eyewear (sunglasses, goggles, etc.) AND avatar has glasses:\n         * PRIORITIZE the outfit's eyewear as the currently worn item\n         * Mention avatar glasses only if contextually appropriate (e.g., \"wearing sunglasses over their prescription frames\" or \"sunglasses instead of their usual glasses\")\n         * If outfit says \"sunglasses on head\", show sunglasses on head and prescription glasses on face\n       - Avoid depicting characters wearing TWO pairs of glasses on their face simultaneously unless explicitly specified\n       - For any Character vs Avatar conflicts, Character wins (outfit trumps base appearance)\n\n    5. NEGATIVE PROMPT:\n       - Universal: \"bad anatomy, blurry, low quality, watermark, signature\"\n       - Style-specific: Add based on art style\n       - For non-photorealistic styles: Include \"photorealistic, photograph, 3d render, ultra realistic\"\n       - Keep concise and focused\n\n    6. MODEL ADAPTABILITY:\n       - Midjourney: Focus on artistic descriptions, avoid parameters\n       - DALL-E: Use rich, narrative language\n       - Stable Diffusion: Balance technical and artistic\n       - NanoBanana/Gemini: Leverage structured format\n       - Flux: Emphasize style and quality markers\n\n    7. BEST PRACTICES:\n       - Clear, unambiguous descriptions\n       - Avoid model-specific jargon\n       - Maintain character-scene coherence\n       - Prioritize the most important elements\n\n    The goal is to create BOTH a natural language prompt AND a structured format that can be used across different image generation models, ensuring consistent character representation and scene quality.\n\n    MULTI-CHARACTER CONSIDERATIONS:\n    - When multiple avatars provided, describe their spatial relationship\n    - Include interactions between characters if appropriate\n    - Ensure each character is distinctly describable\n    - Balance detail across all characters\n    - For group shots, describe overall composition first, then individuals\n\n    REQUIRED OUTPUT FIELDS:\n    You MUST generate ALL of the following fields for the Scene object:\n    - main_description: 2-3 sentence overview of the complete scene\n    - characters: Array of CharacterInScene objects describing how each character appears\n    - character_arrangement: Overall spatial arrangement and positioning of characters\n    - camera_angle: (eye-level, low angle, high angle, profile, three-quarter)\n    - shot_type: (close-up, medium shot, full body, wide shot)\n    - setting: Location/environment description\n    - background: Background elements in order of importance\n    - time_of_day: Time and its lighting effect\n    - mood: Emotional tone of the scene\n    - color_palette: 3-4 dominant colors\n    - lighting_style: Type of lighting (dramatic, soft, golden hour, etc.)\n    - style_keywords: 5 key style descriptors as array\n    - quality_markers: Quality indicators as array (masterpiece, best quality, etc.)\n    - main_prompt: Complete 150-250 word prompt for image generation\n    - negative_prompt: Things to avoid\n    - structured_prompt: PromptStructure object with all sub-fields\n    - suggested_guidance: Float between 3.5-12\n    - complexity_score: Float between 0.0-1.0\n    - avatar_integration: Description of how avatars are integrated\n    - character_count: Integer number of characters\n    - key_elements: Array of 3-5 most important elements\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASES\n// ============================================\n\n// Test 1: Single avatar - full body waving hello\ntest FullBodyWaveTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"A friendly person standing in a bright, clean environment, waving hello with a welcoming gesture, full body visible from head to toe\"\n    art_style \"toony anime style, bright colors, cel-shaded\"\n    characters [{\n      name \"Sam\"\n      avatar {\n        summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n        apparent_age \"25-35\"\n        gender_presentation \"male\"\n        ethnic_appearance \"Middle Eastern\"\n        face_shape \"round\"\n        jawline \"rounded\"\n        body_build \"stocky\"\n        skin_tone \"medium\"\n        complexion_details null\n        hair_color \"dark brown\"\n        hair_length \"short\"\n        hair_style \"thick and wavy, tousled\"\n        eye_color \"dark brown\"\n        eye_shape \"almond\"\n        eyebrows \"thick with a soft arch\"\n        nose_description \"broad with a rounded tip\"\n        lip_description \"medium width with a fuller lower lip\"\n        facial_hair \"short full beard\"\n        glasses true\n        glasses_style \"dark purple rectangular frames\"\n        distinctive_features [\"left ear piercing\"]\n        confidence 0.95\n        key_features [\"Thick-framed rectangular glasses\", \"Short full beard\", \"Thick, dark wavy hair\", \"Round face shape\", \"Broad nose\"]\n      }\n      outfit {\n        style \"casual modern\"\n        top \"navy blue cotton t-shirt\"\n        bottom \"dark jeans\"\n        footwear \"white sneakers\"\n        accessories [\"silver watch\"]\n        color_scheme \"navy, denim blue, white\"\n      }\n      expression \"cheerful\"\n      signature_colors [\"blue\", \"navy\", \"gray\"]\n    }]\n  }\n}\n\n// Test 2: Single avatar - action scene running\ntest ActionRunningTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"A person sprinting through a futuristic city street, dynamic running pose with motion blur, neon lights reflecting off wet pavement\"\n    art_style \"8-bit pixel art, retro video game style, limited color palette\"\n    characters [{\n      name \"Runner\"\n      avatar {\n        summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n      apparent_age \"25-35\"\n      gender_presentation \"male\"\n      ethnic_appearance \"Middle Eastern\"\n      face_shape \"round\"\n      jawline \"rounded\"\n      body_build null\n      skin_tone \"olive\"\n      complexion_details null\n      hair_color \"dark brown\"\n      hair_length \"short\"\n      hair_style \"short, thick wavy\"\n      eye_color \"dark brown\"\n      eye_shape \"almond\"\n      eyebrows \"thick with a soft arch\"\n      nose_description \"medium width with a rounded tip\"\n      lip_description \"medium fullness\"\n      facial_hair \"full beard\"\n      glasses true\n      glasses_style \"thick-framed rectangular\"\n      distinctive_features [\"left ear piercing\"]\n      confidence 0.95\n      key_features [\"thick-framed rectangular glasses\", \"full beard\", \"short, thick wavy hair\", \"round face shape\", \"olive skin tone\"]\n      }\n      outfit {\n        style \"athletic cyberpunk\"\n        top \"black tech hoodie\"\n        bottom \"cargo pants\"\n        footwear \"high-tech running shoes\"\n        accessories [\"LED wristband\", \"earbuds\"]\n        color_scheme \"black, neon blue, silver\"\n      }\n      expression \"determined\"\n      signature_colors [\"black\", \"blue\", \"silver\"]\n    }]\n  }\n}\n\n// Test 3: Multiple avatars - martial arts scene\ntest MartialArtsTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"Two characters in an epic martial arts battle stance, facing each other in a dojo with dramatic lighting, about to clash\"\n    art_style \"toony anime style, dynamic action lines, vibrant colors\"\n    characters [\n      {\n        name \"Fighter 1\"\n        avatar {\n            summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n          apparent_age \"25-35\"\n          gender_presentation \"male\"\n          ethnic_appearance \"Middle Eastern\"\n          face_shape \"round\"\n          jawline \"rounded\"\n          body_build null\n          skin_tone \"olive\"\n          complexion_details null\n          hair_color \"dark brown\"\n          hair_length \"short\"\n          hair_style \"short, thick wavy\"\n          eye_color \"dark brown\"\n          eye_shape \"almond\"\n          eyebrows \"thick with a soft arch\"\n          nose_description \"medium width with a rounded tip\"\n          lip_description \"medium fullness\"\n          facial_hair \"full beard\"\n          glasses true\n          glasses_style \"thick-framed rectangular\"\n          distinctive_features [\"left ear piercing\"]\n          confidence 0.95\n          key_features [\"thick-framed rectangular glasses\", \"full beard\", \"short, thick wavy hair\", \"round face shape\", \"olive skin tone\"]\n        }\n        outfit {\n          style \"martial arts\"\n          top \"black gi jacket with white belt\"\n          bottom \"black gi pants\"\n          footwear \"barefoot\"\n          accessories []\n          color_scheme \"black, white\"\n        }\n        expression \"focused\"\n        signature_colors [\"black\", \"white\"]\n      },\n      {\n        name \"Fighter 2\"\n        avatar {\n          summary \"A woman with long auburn hair, green eyes, and light freckles.\"\n          apparent_age \"20-30\"\n          gender_presentation \"female\"\n          ethnic_appearance \"European\"\n          face_shape \"oval\"\n          jawline \"soft\"\n          body_build \"slim\"\n          skin_tone \"light\"\n          complexion_details \"light freckles\"\n          hair_color \"auburn\"\n          hair_length \"long\"\n          hair_style \"wavy layers with red highlights\"\n          eye_color \"green\"\n          eye_shape \"round\"\n          eyebrows \"medium natural arch\"\n          nose_description \"narrow and refined\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"Light freckles\", \"Dimples on both cheeks\", \"Earlobe piercings\"]\n          confidence 0.92\n          key_features [\"Long wavy auburn hair\", \"Bright green eyes\", \"Light freckles\", \"Dimples\", \"Oval face\"]\n        }\n        outfit {\n          style \"martial arts\"\n          top \"white gi jacket with red belt\"\n          bottom \"white gi pants\"\n          footwear \"barefoot\"\n          accessories [\"hair tie pulling hair into high ponytail\"]\n          color_scheme \"white, red\"\n        }\n        expression \"fierce\"\n        signature_colors [\"white\", \"red\", \"auburn\"]\n      }\n    ]\n  }\n}\n\n// Test 4: Beach hangout - Three friends relaxing\ntest BeachHangoutTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"Three friends relaxing and hanging out on a beautiful beach during golden hour. They're sitting on a blanket, laughing and enjoying snacks, with the ocean waves in the background\"\n    art_style \"studio ghibli art style, anime style, cel-shaded, warm colors\"\n    characters [\n      {\n        name \"Alex\"\n        avatar {\n          summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n          apparent_age \"25-35\"\n          gender_presentation \"male\"\n          ethnic_appearance \"Middle Eastern\"\n          face_shape \"round\"\n          jawline \"rounded\"\n          body_build \"stocky\"\n          skin_tone \"medium\"\n          complexion_details null\n          hair_color \"dark brown\"\n          hair_length \"short\"\n          hair_style \"thick and wavy, tousled\"\n          eye_color \"dark brown\"\n          eye_shape \"almond\"\n          eyebrows \"thick with a soft arch\"\n          nose_description \"broad with a rounded tip\"\n          lip_description \"medium width with a fuller lower lip\"\n          facial_hair \"short full beard\"\n          glasses true\n          glasses_style \"dark purple rectangular frames\"\n          distinctive_features [\"left ear piercing\"]\n          confidence 0.95\n          key_features [\"Thick-framed rectangular glasses\", \"Short full beard\", \"Thick, dark wavy hair\", \"Round face shape\", \"Broad nose\"]\n        }\n        outfit {\n          style \"casual beach\"\n          top \"light blue linen shirt, unbuttoned\"\n          bottom \"khaki shorts\"\n          footwear \"barefoot\"\n          accessories [\"leather bracelet\", \"sunglasses on head\"]\n          color_scheme \"light blue, khaki, tan\"\n        }\n        expression \"relaxed and happy\"\n        signature_colors [\"blue\", \"tan\", \"white\"]\n      },\n      {\n        name \"Emma\"\n        avatar {\n          summary \"A woman with long auburn hair, green eyes, and light freckles.\"\n          apparent_age \"20-30\"\n          gender_presentation \"female\"\n          ethnic_appearance \"European\"\n          face_shape \"oval\"\n          jawline \"soft\"\n          body_build \"slim\"\n          skin_tone \"light\"\n          complexion_details \"light freckles\"\n          hair_color \"auburn\"\n          hair_length \"long\"\n          hair_style \"wavy layers with red highlights\"\n          eye_color \"green\"\n          eye_shape \"round\"\n          eyebrows \"medium natural arch\"\n          nose_description \"narrow and refined\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"Light freckles\", \"Dimples on both cheeks\", \"Earlobe piercings\"]\n          confidence 0.92\n          key_features [\"Long wavy auburn hair\", \"Bright green eyes\", \"Light freckles\", \"Dimples\", \"Oval face\"]\n        }\n        outfit {\n          style \"beach casual\"\n          top \"white sundress with floral patterns\"\n          bottom null\n          footwear \"sandals\"\n          accessories [\"straw sun hat\", \"shell necklace\"]\n          color_scheme \"white, light pink, natural straw\"\n        }\n        expression \"joyful\"\n        signature_colors [\"white\", \"pink\", \"coral\"]\n      },\n      {\n        name \"Marcus\"\n        avatar {\n          summary \"A tall young man with short curly black hair, warm brown eyes, and a bright smile.\"\n          apparent_age \"22-28\"\n          gender_presentation \"male\"\n          ethnic_appearance \"African\"\n          face_shape \"rectangular\"\n          jawline \"defined\"\n          body_build \"athletic\"\n          skin_tone \"dark\"\n          complexion_details null\n          hair_color \"black\"\n          hair_length \"short\"\n          hair_style \"tight curls, well-groomed\"\n          eye_color \"brown\"\n          eye_shape \"round\"\n          eyebrows \"medium thickness, straight\"\n          nose_description \"medium width with straight bridge\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"small scar on right eyebrow\", \"diamond stud earrings\"]\n          confidence 0.93\n          key_features [\"Short curly hair\", \"Athletic build\", \"Bright smile\", \"Diamond studs\", \"Defined jawline\"]\n        }\n        outfit {\n          style \"beach casual\"\n          top \"red tank top\"\n          bottom \"navy board shorts\"\n          footwear \"flip flops\"\n          accessories [\"silver chain necklace\", \"sports watch\"]\n          color_scheme \"red, navy, silver\"\n        }\n        expression \"cheerful and laughing\"\n        signature_colors [\"red\", \"navy\", \"white\"]\n      }\n    ]\n  }\n}\n\n// Test 5: Beach bonfire - Continuation of beach hangout at sunset\ntest BeachBonfireTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"The same three friends now gathered around a cozy beach bonfire as the sun sets. They're roasting marshmallows, telling stories, with guitars and blankets scattered around. The fire's warm glow illuminates their faces against the purple-orange twilight sky, waves gently lapping in the background\"\n    art_style \"studio ghibli art style, anime style, cel-shaded, warm sunset colors, magical lighting\"\n    characters [\n      {\n        name \"Alex\"\n        avatar {\n          summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n          apparent_age \"25-35\"\n          gender_presentation \"male\"\n          ethnic_appearance \"Middle Eastern\"\n          face_shape \"round\"\n          jawline \"rounded\"\n          body_build \"stocky\"\n          skin_tone \"medium\"\n          complexion_details null\n          hair_color \"dark brown\"\n          hair_length \"short\"\n          hair_style \"thick and wavy, tousled\"\n          eye_color \"dark brown\"\n          eye_shape \"almond\"\n          eyebrows \"thick with a soft arch\"\n          nose_description \"broad with a rounded tip\"\n          lip_description \"medium width with a fuller lower lip\"\n          facial_hair \"short full beard\"\n          glasses true\n          glasses_style \"dark purple rectangular frames\"\n          distinctive_features [\"left ear piercing\"]\n          confidence 0.95\n          key_features [\"Thick-framed rectangular glasses\", \"Short full beard\", \"Thick, dark wavy hair\", \"Round face shape\", \"Broad nose\"]\n        }\n        outfit {\n          style \"casual evening beach\"\n          top \"navy hoodie over the light blue shirt\"\n          bottom \"same khaki shorts\"\n          footwear \"barefoot\"\n          accessories [\"leather bracelet\", \"marshmallow roasting stick\"]\n          color_scheme \"navy, light blue, khaki\"\n        }\n        expression \"content, storytelling\"\n        signature_colors [\"navy\", \"blue\", \"tan\"]\n      },\n      {\n        name \"Emma\"\n        avatar {\n          summary \"A woman with long auburn hair, green eyes, and light freckles.\"\n          apparent_age \"20-30\"\n          gender_presentation \"female\"\n          ethnic_appearance \"European\"\n          face_shape \"oval\"\n          jawline \"soft\"\n          body_build \"slim\"\n          skin_tone \"light\"\n          complexion_details \"light freckles\"\n          hair_color \"auburn\"\n          hair_length \"long\"\n          hair_style \"wavy layers with red highlights\"\n          eye_color \"green\"\n          eye_shape \"round\"\n          eyebrows \"medium natural arch\"\n          nose_description \"narrow and refined\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"Light freckles\", \"Dimples on both cheeks\", \"Earlobe piercings\"]\n          confidence 0.92\n          key_features [\"Long wavy auburn hair\", \"Bright green eyes\", \"Light freckles\", \"Dimples\", \"Oval face\"]\n        }\n        outfit {\n          style \"cozy beach evening\"\n          top \"cream knit cardigan over white sundress\"\n          bottom null\n          footwear \"barefoot, sandals beside her\"\n          accessories [\"shell necklace\", \"flower crown made of beach flowers\"]\n          color_scheme \"cream, white, natural tones\"\n        }\n        expression \"listening intently, soft smile\"\n        signature_colors [\"cream\", \"white\", \"coral\"]\n      },\n      {\n        name \"Marcus\"\n        avatar {\n          summary \"A tall young man with short curly black hair, warm brown eyes, and a bright smile.\"\n          apparent_age \"22-28\"\n          gender_presentation \"male\"\n          ethnic_appearance \"African\"\n          face_shape \"rectangular\"\n          jawline \"defined\"\n          body_build \"athletic\"\n          skin_tone \"dark\"\n          complexion_details null\n          hair_color \"black\"\n          hair_length \"short\"\n          hair_style \"tight curls, well-groomed\"\n          eye_color \"brown\"\n          eye_shape \"round\"\n          eyebrows \"medium thickness, straight\"\n          nose_description \"medium width with straight bridge\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"small scar on right eyebrow\", \"diamond stud earrings\"]\n          confidence 0.93\n          key_features [\"Short curly hair\", \"Athletic build\", \"Bright smile\", \"Diamond studs\", \"Defined jawline\"]\n        }\n        outfit {\n          style \"relaxed beach evening\"\n          top \"red tank top with gray zip-up jacket\"\n          bottom \"navy board shorts\"\n          footwear \"barefoot\"\n          accessories [\"silver chain necklace\", \"acoustic guitar beside him\"]\n          color_scheme \"red, gray, navy\"\n        }\n        expression \"playing guitar, focused but happy\"\n        signature_colors [\"red\", \"gray\", \"navy\"]\n      }\n    ]\n  }\n}",
  "screenshot-sets.baml": "// Screenshot Set Generation BAML Domain\n// Generates complete sets of app store screenshots with cohesive styling\n\n// ============================================\n// IMPORTS & REUSED CLASSES\n// ============================================\n\n// Note: StyleConfig, TextConfig, and LayoutConfig are defined in screenshots.baml and reused here\n\n// ============================================\n// STYLE DEMO CLASSES\n// ============================================\n\nclass StyleDemoScreenshotConfig {\n  header_copy string @description(\"Catchy header text (3-5 words)\")\n  subheader_copy string? @description(\"Optional subheader text\")\n  header_position string @description(\"Either 'top' or 'bottom'\")\n  device_orientation string @description(\"Device angle description, e.g., 'straight-on frontal view' or 'tilted 15° right with subtle 3D perspective'\")\n  device_position string @description(\"Either 'centered', 'upper', or 'lower'\")\n  app_screen_prompt string @description(\"Complete text-to-image prompt for generating a fake app UI screen showing this feature (80-150 words)\")\n}\n\nclass StyleDemoOutput {\n  app_concept string @description(\"Brief app concept matching the style's mood (1-2 sentences, e.g., 'A fitness app for tracking runs and competing with friends')\")\n  app_icon_prompt string @description(\"Complete text-to-image prompt for generating app icon (50-100 words). Should be 1024x1024 square, iOS-style icon design matching the app concept and style aesthetic.\")\n  screenshots StyleDemoScreenshotConfig[] @description(\"3-5 screenshot configs showcasing the style with varied layouts and features\")\n}\n\n// ============================================\n// SCREENSHOT SET CLASSES\n// ============================================\n\nclass ScreenshotSetInput {\n  app_description string @description(\"App description with key features, target audience, and unique selling points\")\n  screenshot_count int @description(\"Number of screenshots to generate (typically 3-8 for app stores)\")\n}\n\nclass ScreenshotConfig {\n  text TextConfig @description(\"Header and optional subheader copy\")\n  layout LayoutConfig @description(\"Composition and device orientation\")\n}\n\n// ============================================\n// GENERATION FUNCTION\n// ============================================\n\n// Generates a complete set of screenshot configurations for app store listings\nfunction GenerateScreenshotSet(\n  input: ScreenshotSetInput @description(\"App description, style, and count configuration\")\n) -> ScreenshotConfig[] {\n  client ScreenshotGeneratorMed\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are generating a cohesive set of {{ input.screenshot_count }} app store screenshot configurations.\n\n    APP DESCRIPTION:\n    {{ input.app_description }}\n\n    TASK: Create {{ input.screenshot_count }} screenshot configurations that tell a compelling story about the app.\n\n    ## REQUIREMENTS FOR EACH SCREENSHOT:\n\n    ### 1. TEXT (header copy)\n    - header: Catchy, action-oriented copy (3-5 words maximum)\n    - Examples: \"Track Your Progress\", \"Share With Friends\", \"Discover New Goals\"\n    - Each should highlight a different feature or benefit\n    - Use active voice and benefit-focused language\n    - subheader: Optional (usually null, use sparingly for extra context)\n\n    ### 2. LAYOUT (composition and device orientation)\n    - composition: Describe element placement\n      * Vary between \"Header at top, device below\" and \"Device in upper area, header at bottom\"\n      * Always specify tight spacing (1-2% gaps) to maximize space usage\n      * Example: \"Header at top centered, device fills lower 95% of canvas with tight 1-2% gap\"\n    - device_orientation: Vary the device angle for visual interest\n      * Mix: \"straight-on frontal view\", \"slight 8-10° right tilt with 3D perspective\", \"15° left angle\"\n      * Use straight-on for professional/clean screenshots\n      * Use tilts for dynamic/energetic screenshots\n    - device_type: Always \"iPhone 16 Pro with Dynamic Island, 19.5:9 aspect ratio, tall and narrow\"\n\n    ## STORYTELLING SEQUENCE:\n\n    Create a logical flow through the screenshots:\n    1. First screenshot: Introduction/hero feature (most impressive capability)\n    2. Middle screenshots: Supporting features and benefits\n    3. Last screenshot: Call-to-action or social proof\n\n    Vary device angles and text placement to create visual rhythm:\n    - Don't put text in the same position for all screenshots\n    - Mix straight-on and tilted device orientations\n    - Create a dynamic, engaging sequence\n\n    ## WRITING STYLE:\n    - Keep copy punchy and benefit-focused\n    - Use variety in header copy - don't repeat patterns\n    - Ensure each screenshot has a clear, distinct purpose\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASES\n// ============================================\n\ntest FitnessAppScreenshotSet {\n  functions [GenerateScreenshotSet]\n  args {\n    input {\n      app_description \"FitQuest is a gamified fitness app that turns your daily workouts into an epic adventure. Track your steps, calories, and active minutes while completing quests, unlocking achievements, and competing with friends. Features include: customizable workout plans, social challenges, progress tracking with beautiful data visualizations, integration with Apple Health, and motivational rewards system. Perfect for anyone who wants to make fitness fun and stay motivated with friends.\"\n      screenshot_count 5\n    }\n  }\n}\n\ntest ProductivityAppScreenshotSet {\n  functions [GenerateScreenshotSet]\n  args {\n    input {\n      app_description \"TaskFlow is a minimalist productivity app that helps you focus on what matters most. Features include: smart task prioritization using AI, pomodoro timer with ambient sounds, daily focus goals, beautiful progress analytics, calendar integration, and distraction blocking. Designed for professionals, students, and anyone who wants to boost their productivity with a clean, distraction-free interface.\"\n      screenshot_count 4\n    }\n  }\n}\n\n// ============================================\n// STYLE DEMO GENERATION\n// ============================================\n\n// Generate demo screenshot configs from a style to showcase how it looks\nfunction GenerateStyleDemoScreenshots(\n  style_config: StyleConfig @description(\"The style configuration to showcase\"),\n  style_name: string @description(\"Name of the style for context\"),\n  screenshot_count: int? @description(\"Number of demo screenshots to generate (default: 3, max: 5)\")\n) -> StyleDemoOutput {\n  client ScreenshotGeneratorMed\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are generating a demo screenshot set to showcase a visual style.\n\n    STYLE TO SHOWCASE:\n    - Name: {{ style_name }}\n    - Background: {{ style_config.background_color }}\n    - Details: {{ style_config.details }}\n    - Text Style: {{ style_config.text_style }}\n    - Device Style: {{ style_config.device_style }}\n\n    TASK: Create a fictional app concept and {% if screenshot_count %}{{ screenshot_count }}{% else %}3{% endif %} screenshot configs that showcase this style effectively.\n\n    ## 1. APP CONCEPT\n\n    Invent a simple, modern app concept that would look great in this style:\n    - Examples: fitness tracker, recipe app, meditation app, photo editor, social app, music player, habit tracker\n    - Should match the style's mood (e.g., playful style → fun social app, zen style → meditation app, energetic style → fitness app)\n    - Keep it generic enough to not require real UI complexity\n    - 1-2 sentences max\n    - Make it sound exciting and appealing\n\n    ## 1.5. APP ICON PROMPT\n\n    Generate a complete text-to-image prompt for creating the app icon:\n    - Format: 1024x1024 square icon\n    - Style: iOS app icon design (rounded square with slight gradient lighting)\n    - Content: Should represent the app concept clearly\n    - Design: Match the overall style aesthetic (colors, mood, energy level)\n    - Simplicity: Icons should be simple and recognizable at small sizes\n    - Length: 50-100 words\n    - Example: \"Modern fitness app icon for iOS. Circular running track symbol in bright gradient (cyan to purple). Clean minimalist design with subtle depth. Central lightning bolt element suggesting energy. Rounded square format with smooth gradient background. Professional, contemporary aesthetic. 1024x1024 square format.\"\n\n    ## 2. SCREENSHOT CONFIGS ({% if screenshot_count %}{{ screenshot_count }}{% else %}3{% endif %} screenshots)\n\n    For each screenshot, provide:\n\n    **header_copy**: Punchy feature headline (3-5 words)\n    - Examples: \"Track Your Progress\", \"Share With Friends\", \"Discover New Goals\", \"Stay Motivated Daily\"\n    - Should relate to the fictional app concept\n    - Each should be different and highlight a unique aspect\n    - Action-oriented and benefit-focused\n\n    **subheader_copy**: Optional secondary text (use sparingly, usually null)\n    - Only include if you really need extra context\n    - Most screenshots should have null here\n\n    **header_position**: \"top\" or \"bottom\"\n    - Vary positions across screenshots for visual rhythm\n    - Don't use the same position for all screenshots\n\n    **device_orientation**: Device angle description\n    - Examples: \"straight-on frontal view\", \"tilted 12° right with subtle 3D perspective\", \"slight 8° left angle\"\n    - Mix orientations for variety\n    - Use straight-on for professional/clean screenshots\n    - Use tilts for dynamic/energetic screenshots\n\n    **device_position**: \"centered\", \"upper\", or \"lower\"\n    - Usually \"centered\" unless header position requires adjustment\n    - Most should be \"centered\"\n\n    **app_screen_prompt**: Complete text-to-image prompt for generating the app UI screen\n    - Generate a FULL prompt describing a modern mobile app UI screen for this feature\n    - Specify: screen type (onboarding, dashboard, profile, settings, etc.), key UI elements, colors, layout\n    - Should look like a real app screenshot when generated\n    - Use modern design patterns: iOS-style cards, gradients, clean typography, generous whitespace\n    - Length: 80-150 words\n    - Example: \"Modern fitness app dashboard screen showing circular progress rings (steps, calories, active minutes) in bright gradient colors (cyan to purple). Large numbers displaying daily stats (8,432 steps, 1,847 calories). Clean iOS-style interface with card-based layout. Bottom navigation bar with 5 icons (home, activity, social, profile, settings). Top header showing 'Today' and profile avatar in top right. White background with subtle shadows on cards. Contemporary design with generous whitespace and rounded corners.\"\n\n    ## VARIETY REQUIREMENTS:\n    - Vary header positions (mix top/bottom across all screenshots)\n    - Vary device orientations (mix straight-on and tilted)\n    - Each app screen should show a DIFFERENT screen type (e.g., onboarding, home, profile, settings, feature detail)\n    - Create visual rhythm and storytelling flow\n    - First screenshot should be the most impressive/hero feature\n\n    ## WRITING STYLE:\n    - Keep copy punchy and benefit-focused\n    - Use variety in header copy - don't repeat patterns\n    - Ensure each screenshot has a clear, distinct purpose\n    - Match the energy/mood of the style (playful vs serious, energetic vs calm, etc.)\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// STYLE DEMO TEST CASES\n// ============================================\n\ntest CyberpunkStyleDemo {\n  functions [GenerateStyleDemoScreenshots]\n  args {\n    style_config {\n      background_color \"radial gradient from dark navy (#0A0E27) center to bright magenta (#FF006E) edges\"\n      details \"Futuristic cyberpunk style with holographic circuit patterns (cyan, 60-80px, 4-5 scattered). Glowing pink grid squares (40-60px, 6-8 pieces). Neon hexagons with cyan outline (50-70px, 3-4 at edges). Elements concentrated in outer 12-15% border area.\"\n      text_style \"Futuristic bold sans-serif font, 800 weight, white color with bright cyan (#00F0FF) outline (4-5px) and neon glow effect\"\n      device_style \"Glossy midnight black frame with vibrant cyan (#00F0FF) neon glow effect around edges and thin modern bezels\"\n    }\n    style_name \"Cyberpunk Neon\"\n    screenshot_count 3\n  }\n}\n\ntest MinimalistZenStyleDemo {\n  functions [GenerateStyleDemoScreenshots]\n  args {\n    style_config {\n      background_color \"soft gradient from warm beige (#F5F1E8) to pale sage green (#E8F2E8)\"\n      details \"Minimalist zen style with delicate watercolor brush strokes (soft greens and browns, 40-60px, 3-4 at corners). Subtle organic leaf silhouettes (30-50px, 4-5 scattered). Small zen circle enso symbols (35-45px, 2-3 pieces). Elements very sparse, outer 10% border only.\"\n      text_style \"Elegant serif font (Playfair Display or similar), 600 weight, deep forest green (#2D4A3E) with subtle cream shadow for depth\"\n      device_style \"Matte warm wood texture frame with natural bamboo aesthetic and organic rounded edges\"\n    }\n    style_name \"Zen Minimalist\"\n    screenshot_count 3\n  }\n}\n\ntest PlayfulPopArtStyleDemo {\n  functions [GenerateStyleDemoScreenshots]\n  args {\n    style_config {\n      background_color \"bright vibrant yellow (#FFDD00) solid color\"\n      details \"Playful pop art style with smiley face emojis (80-100px, 4-5 at edges). Star sparkles in hot pink and cyan (60-80px, 6-8 scattered). Lightning bolts in bright orange (55-75px, 3-4 pieces). Comic book style explosion shapes (70-90px, 2-3 at corners). Elements concentrated in outer 12-18% border area, center clear.\"\n      text_style \"Extra bold rounded sans-serif font (Impact or similar), 900 weight, white color with thick 5-7px black outline stroke and subtle drop shadow\"\n      device_style \"Colorful gradient frame with cyan-to-green fade on left edge transitioning to orange-to-pink fade on bottom right, glossy finish\"\n    }\n    style_name \"Snap Style\"\n    screenshot_count 3\n  }\n}\n",
  "screenshots.baml": "// App Store Screenshot Generation BAML Domain\n// Generates AI-powered app store screenshot designs with consistent styling\n\n// ============================================\n// SCREENSHOT-SPECIFIC CLIENT CONFIGURATION\n// ============================================\n\n// High Quality - For final production screenshots\nclient<llm> ScreenshotGeneratorHigh {\n  provider \"fallback\"\n  options {\n    strategy [\n      ClaudeSonnet45,\n      Gemini25Pro,\n      GPT5,\n      ClaudeSonnet4,\n      MistralLarge\n    ]\n  }\n}\n\n// Medium Quality - Balanced for standard use\nclient<llm> ScreenshotGeneratorMed {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25Flash,\n      GPT5Mini,\n      ClaudeHaiku,\n      MistralSmall\n    ]\n  }\n}\n\n// Low Quality - Fast iterations and testing\nclient<llm> ScreenshotGeneratorLow {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25FlashLite,\n      GPT5Nano,\n      ClaudeHaiku\n    ]\n  }\n}\n\n// ============================================\n// STRUCTURED CLASSES FOR SCREENSHOT GENERATION\n// ============================================\n\n// INPUT CONFIGURATION CLASSES\n\n// Text content configuration\nclass TextConfig {\n  header string @description(\"Main headline text\")\n  subheader string? @description(\"Optional subheader text below header\")\n}\n\n// Layout configuration - describes spatial arrangement and composition\nclass LayoutConfig {\n  composition string @description(\"Overall composition description: header position (top/bottom), device position (upper/center/lower), text alignment, spacing between elements. Example: 'Header at top centered, device fills lower 95% of canvas with tight 1-2% gap, minimal spacing throughout'\")\n  device_orientation string @description(\"Device 3D perspective and rotation. Examples: 'straight-on frontal view', 'slight 8-10° right tilt with subtle 3D depth', 'dramatic 15° left angle with perspective'\")\n  device_type string @description(\"Device model and key specs. Example: 'iPhone 16 Pro with Dynamic Island, 19.5:9 aspect ratio, tall and narrow form factor'\")\n}\n\n// Style configuration - describes visual aesthetics\nclass StyleConfig {\n  background_color string @description(\"Background color and type. Example: '#FFED00 solid bright yellow' or 'gradient from pink #FF71CE to cyan #05FFA1'\")\n  details string @description(\"Overall aesthetic style and decorative elements. Describe the vibe, decorative elements (emojis, shapes, icons), their placement (edges only, corners, scattered), sizes, and visual treatment. Example: 'Playful pop-art style with smiley emojis (80-100px), star sparkles (30-60px), and lightning bolts (50-70px) pushed tightly to outer 10-15% edge border only. Center 70% completely clear. Comic book aesthetic with strong contrast.'\")\n  text_style string @description(\"Complete text styling description. Font family, weight, size (in px), color, outline/stroke details, effects. Example: 'Impact font at 130-150px, extra bold (900 weight), white color with thick 4-6px black outline stroke, subtle drop shadow for readability'\")\n  device_style string @description(\"Device frame and bezel styling. Example: 'Matte silver metal frame with thin black bezels, minimal modern design' or 'Glossy white frame with rainbow iridescent effect and neon cyan glow'\")\n}\n\n// OUTPUT STRUCTURED CLASSES\n\nclass FontStyle {\n  family string @description(\"Font family name (e.g., 'Impact')\")\n  weight int @description(\"Font weight (e.g., 900)\")\n  color string @description(\"Color description with effects (e.g., 'white with thick-black-outline')\")\n  effects string[] @description(\"Array of text effects (e.g., ['thick-black-outline', 'extra-bold'])\")\n}\n\nclass HeaderText {\n  copy string @description(\"Exact text content to display\")\n  placement string @description(\"Position and layout description\")\n  font FontStyle @description(\"Font styling details\")\n  size string @description(\"Size description (e.g., 'extremely large and bold, taking up 10-12% vertical space')\")\n}\n\nclass ScreenshotTreatment {\n  treatment string @description(\"How to handle the screenshot (e.g., 'pixel-perfect placement into screen cutout')\")\n  preserve bool @description(\"Whether to preserve original screenshot quality\")\n  forbidden string[] @description(\"List of forbidden operations (e.g., ['cropping', 'stretching', 'UI redrawing'])\")\n}\n\nclass DeviceSpec {\n  type string @description(\"Device model with specs\")\n  aspect_ratio string @description(\"Device aspect ratio (e.g., '19.5:9 (~2.16:1, tall and narrow)')\")\n  frame string @description(\"Frame color and finish description\")\n  angle string @description(\"Orientation angle and perspective\")\n  scale string @description(\"Size relative to canvas (e.g., '90-95% of canvas height')\")\n  position string @description(\"Position on canvas\")\n  screenshot ScreenshotTreatment @description(\"Screenshot handling configuration\")\n}\n\nclass Background {\n  colors string[] @description(\"Array of hex colors used in background\")\n  effects string[] @description(\"Array of decorative element descriptions with size, count, and placement\")\n  placement string @description(\"Overall distribution strategy and aesthetic\")\n  seamless_to_bottom bool @description(\"Whether background extends seamlessly to bottom\")\n  forbidden string[] @description(\"List of forbidden elements (e.g., ['black bars', 'solid footer fills'])\")\n}\n\nclass Composition {\n  priority string @description(\"What elements should dominate\")\n  rules string[] @description(\"Array of composition rules to follow\")\n}\n\nclass ScreenshotPromptStructured {\n  style string @description(\"Overall aesthetic style name\")\n  background Background @description(\"Background configuration\")\n  device DeviceSpec @description(\"Device specifications and positioning\")\n  header_text HeaderText @description(\"Header text configuration\")\n  composition Composition @description(\"Composition rules and priorities\")\n}\n\n\n// ============================================\n// GENERATION FUNCTIONS\n// ============================================\n\n// Generates structured prompt specification for image-to-image screenshot compositing\nfunction GenerateScreenshotPrompt(\n  text: TextConfig @description(\"Text content configuration\"),\n  layout: LayoutConfig @description(\"Layout configuration\"),\n  style: StyleConfig @description(\"Visual style configuration\")\n) -> ScreenshotPromptStructured {\n  client ScreenshotGeneratorHigh\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are generating a structured specification for app store screenshot composition. Be specific but CONCISE - use short, punchy descriptions.\n\n    EXACT COMPOSITION REQUIREMENTS:\n\n    1. CANVAS & BACKGROUND (LAYER 1 - BASE):\n       - Full portrait canvas: {{ style.background_color }}\n       - Background fills 100% of canvas edge-to-edge, no gaps, no transparency\n       - {{ style.details }}\n       - Decorative elements (emojis, shapes, icons) are BOLD, FILLED, SOLID shapes with visual weight\n       - These elements are SPARSE and STRATEGIC - placed naturally around and near the device to create visual interest\n       - Elements should INTERACT with the device (arrows pointing at it, emojis near corners, etc.) without blocking the header text\n       - DO NOT create a dense border or frame - keep it sparse with intentional placement for visual flow\n\n    2. TEXT HEADER (LAYER 2 - TOP):\n       - Position: {{ layout.composition }}\n       - Text content: \"{{ text.header }}\"{% if text.subheader and text.subheader != \"null\" %} with \"{{ text.subheader }}\" below{% endif %}\n       - Style: {{ style.text_style }}\n       - Size: Large, bold, eye-catching - takes approximately 10-12% of total canvas height\n       - CRITICAL: Text must be BOLD, PROMINENT, and immediately grab attention\n       - CRITICAL: Text appears ONCE ONLY at the specified position\n       - CRITICAL: DO NOT duplicate, repeat, or echo this text anywhere else on the canvas\n       - CRITICAL: NO text at bottom, sides, corners, or any other location besides the specified position\n\n    3. DEVICE (LAYER 3 - DOMINANT ELEMENT):\n       - Type: {{ layout.device_type }}\n       - Orientation: {{ layout.device_orientation }}\n       - Frame style: {{ style.device_style }}\n       - SIZE: ABSOLUTELY CRITICAL - device must be ENORMOUS and fill the canvas\n         * THE DEVICE MUST BE SO LARGE IT NEARLY TOUCHES ALL EDGES\n         * Device height MINIMUM 85-90% of TOTAL canvas height (not remaining after text)\n         * Device width should nearly touch left and right canvas edges with only 2-3% margins\n         * Width proportional to maintain 19.5:9 aspect ratio (tall and narrow)\n         * The device should feel almost too large - like it's bursting out of the canvas\n         * Think \"maximalist\" sizing - if it feels too big, it's probably right\n       - Position: Centered on canvas with text overlapping or very tightly positioned\n       - The screen content inside device must remain pixel-perfect and unmodified\n\n    4. SPACING & LAYOUT:\n       - Gap between text and device: Ultra-tight, approximately 1-2% of canvas height (text can even overlap device slightly)\n       - Side margins around device: Minimal, ONLY 1-2% on each side (2-4% total width)\n       - Top/bottom margins: Device should nearly touch top and bottom edges\n       - Goal: AGGRESSIVE space utilization - device 85-90% of TOTAL canvas height\n       - The device should look \"too big\" - cramped spacing is GOOD\n\n    COMPOSITION PRIORITY:\n    - Device + header text dominate vertical space\n    - Phone must remain tall and narrow (no iPad-like shapes)\n    - Background adapts to keep header readable\n    - No placeholder boxes or bands at bottom or top\n    - CRITICAL: Minimize empty space - device and text scaled up to fill canvas as much as possible\n    - Tight spacing between text and device - minimal gaps\n    - Maximize canvas usage with minimal gaps between elements\n\n    CRITICAL SUCCESS FACTORS:\n    - Device: ENORMOUS 85-95% of TOTAL canvas height, maximizing canvas usage, minimizing margins\n    - Device dominates frame, nearly bursting from canvas\n    - Minimal 1-2% margins on ALL sides\n    - Text: BOLD and prominent, filling available space (can be top OR bottom based on layout)\n    - Text appears ONCE ONLY - absolutely NO duplicate text anywhere\n    - Text can overlap device edges slightly for tight spacing\n    - Background fills edge-to-edge with no empty areas\n    - Decorative elements: sparse, specific counts, scattered at edges only\n    - Screen inside device stays pixel-perfect\n    - Phone: TALL AND NARROW 19.5:9 aspect ratio - NO wide shapes\n    - When unsure, make device BIGGER\n\n    FORBIDDEN ELEMENTS (must NOT appear):\n    - Duplicate or repeated text at bottom, sides, or corners\n    - Text appearing in multiple locations\n    - Wide or tablet-like device proportions\n    - Dense decorative borders blocking device or text\n    - Empty white space or gaps at canvas edges\n    - Text placeholders or bands\n\n    WRITING STYLE:\n    - Keep ALL descriptions SHORT and PUNCHY\n    - Use simple, direct language\n    - Avoid overly detailed explanations\n    - Example GOOD: \"colorful neon design with rainbow colors blending\"\n    - Example BAD: \"Colorful neon rainbow gradient - seamless blend from red to orange to yellow to green to blue to purple flowing around device edges, vibrant and eye-catching\"\n    - Aim for 10-15 words per description field, not 30+\n    - In effects array: each element should be ONE concise line\n    - In composition rules: each rule should be ONE short sentence\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASES\n// ============================================\n\ntest SnapStyleScreenshot {\n  functions [GenerateScreenshotPrompt]\n  args {\n    text {\n      header \"Play Games with Friends!\"\n      subheader null\n    }\n    layout {\n      composition \"Device in upper area of canvas, header text at bottom centered below device with minimal gap to maximize space usage\"\n      device_orientation \"tilt to the right with a cool 3d perspective\"\n      device_type \"iPhone 16 Pro with Dynamic Island, 19.5:9 aspect ratio, tall and narrow\"\n    }\n    style {\n      background_color \"bright yellow solid color\"\n      details \"Dynamic pop art comic book style with varied decorative elements scattered around edges and corners: large simple black outlined smiley face emojis (80-100px) - 3-4 total scattered around sides, bold four-point star sparkles in white and black outline with varying sizes (30-60px) - about 6-8 total, curved arrows in thick black outline (60-80px) - 2-3 arrows pointing in dynamic directions, lightning bolt zigzag shapes in black outline (50-70px) - 2-3 bolts, abstract geometric elements like small circles, rectangles, curved lines in black and white (20-40px) scattered moderately, small confetti dashes and dots in white and light yellow sprinkled lightly throughout. Elements placed dynamically to create visual interest while keeping device and header text readable. Comic book aesthetic with strong contrast.\"\n      text_style \"Impact font, extra bold weight (900), white color with thick black outline, bold and eye-catching, extremely large and dominant\"\n      device_style \"colorful neon design with rainbow colors blending into each other\"\n    }\n  }\n}\n\n\ntest SpookyHalloweenScreenshot {\n  functions [GenerateScreenshotPrompt]\n  args {\n    text {\n      header \"Scary Good Fun!\"\n      subheader null\n    }\n    layout {\n      composition \"Header at top centered, device fills lower 95% of canvas with tight 1-2% gap, minimal spacing\"\n      device_orientation \"slight 8-10° right tilt with dramatic 3D perspective\"\n      device_type \"iPhone 16 Pro with Dynamic Island, 19.5:9 aspect ratio, tall narrow smartphone\"\n    }\n    style {\n      background_color \"gradient from dark purple #1a0b2e at top through #2d1b3d to orange #ff6b35 at bottom\"\n      details \"Spooky Halloween night atmosphere with jack-o-lantern pumpkins (70-90px glowing orange, 3-4 at corners), ghost emojis (60-80px white floating, 2-3 at sides), flying bats (40-60px black silhouettes, 5-7 scattered), spider webs (50-70px thin white lines, 2-3 in corners), skull emoji (60-75px white, 1-2 at edges), orange and white twinkling stars (15-25px, 8-12 scattered). ALL elements pushed to outer 10-15% edge border only, center 70% clear. Eerie, spooky vibe.\"\n      text_style \"Impact font at 130-150px, extra bold 900 weight, white color with extra-thick 6-8px orange outline stroke, orange glow drop shadow for spooky effect\"\n      device_style \"Glossy midnight black metal frame with subtle glow effect, thin uniform bezels\"\n    }\n  }\n}\n\ntest NeonCyberpunkScreenshot {\n  functions [GenerateScreenshotPrompt]\n  args {\n    text {\n      header \"Level Up Your Game\"\n      subheader null\n    }\n    layout {\n      composition \"Device in upper area, header at bottom centered below device, tight 1-2% gap, minimal spacing\"\n      device_orientation \"straight-on frontal view\"\n      device_type \"iPhone 16 Pro with Dynamic Island, 19.5:9 aspect ratio, tall narrow smartphone\"\n    }\n    style {\n      background_color \"radial gradient from dark navy #0a0e27 through #1a1f3a to magenta #ff006e\"\n      details \"Futuristic cyberpunk neon cityscape with glowing cyan hexagons (60-80px, 4-5 at edges), bright cyan/magenta circuit lines radiating from corners (100-150px, 3-4 total), neon pink grid squares (40-60px, 6-8 scattered), cyan/magenta glitch rectangles (30-50px, 5-7 at edges), bright cyan neon stars (20-30px glowing, 10-15 scattered), holographic cyan particles (5-12px with glow, 20-25 throughout). ALL elements at outer 10-15% edge border, center 70% clear. High-tech, neon-lit atmosphere.\"\n      text_style \"Impact font at 130-150px, extra bold 900 weight, white color with extra-thick 6-8px cyan outline stroke, cyan and magenta neon glow drop shadow\"\n      device_style \"Glossy black metal frame with neon cyan glow effect, thin uniform bezels\"\n    }\n  }\n}\n\ntest WatercolorZenScreenshot {\n  functions [GenerateScreenshotPrompt]\n  args {\n    text {\n      header \"Find Your Peace\"\n      subheader null\n    }\n    layout {\n      composition \"Device in upper area, header at bottom centered below device with minimal gap\"\n      device_orientation \"straight-on frontal view with subtle natural tilt\"\n      device_type \"iPhone 16 Pro with Dynamic Island, 19.5:9 aspect ratio, tall narrow smartphone\"\n    }\n    style {\n      background_color \"soft gradient from pale sage green to warm cream white\"\n      details \"Serene watercolor zen aesthetic with soft organic elements: delicate watercolor brush strokes in sage green and dusty rose (varying sizes 40-80px) - 3-4 scattered gently, simple leaf silhouettes in muted green (30-50px) - 4-6 placed naturally around edges, minimal zen circle enso brushstrokes in soft gray (50-70px) - 2-3 at corners, small sakura cherry blossom petals in pale pink (20-35px) - 6-8 floating delicately, abstract watercolor washes creating subtle texture - very light and airy throughout. Elements have soft edges with watercolor transparency effect, placed with intentional negative space. Calm, minimal, meditative aesthetic.\"\n      text_style \"Sans-serif elegant font, medium weight, soft gray or muted sage color with subtle glow, clean and readable\"\n      device_style \"Matte finish in natural wood tone or soft white with minimal bezels\"\n    }\n  }\n}",
  "styles.baml": "// Screenshot Style Generation BAML Domain\n// Generates style configurations from text descriptions with AI-powered analysis\n\n// ============================================\n// STYLE GENERATION\n// ============================================\n\n// Note: StyleConfig class is defined in screenshots.baml and reused here\n\nclass StyleGenerationOutput {\n  style_name string @description(\"User-friendly style name (2-4 words, title case, e.g., 'Cyberpunk Neon', 'Snap Style', 'Halloween Spooky')\")\n  style_config StyleConfig @description(\"Style configuration for database storage\")\n  device_reference_prompt string @description(\"Complete prompt for generating device frame reference image at 1290x2796 dimensions\")\n  preview_image_prompt string @description(\"Complete prompt for generating square style showcase card showing the style name text (NO device mockup)\")\n}\n\nclass StyleRevisionOutput {\n  revised_style StyleGenerationOutput @description(\"The revised style configuration\")\n  revision_summary string @description(\"Friendly summary of what changed (2-3 sentences, e.g., 'I changed the background from bright yellow to a deep purple and navy gradient. The decorative elements now use vibrant neon colors to pop against the darker background. All other elements remain the same.')\")\n}\n\n// Generate style from user description\nfunction GenerateStyleFromDescription(\n  description: string @description(\"User's text description of desired style\"),\n  style_name: string? @description(\"Optional user-provided style name. If not provided, AI will generate one.\"),\n  reference_image: image? @description(\"Optional reference/inspiration image\"),\n  // Optional specific style controls - these OVERRIDE general description when provided\n  background_style: string? @description(\"Optional specific background color/gradient instructions\"),\n  text_style: string? @description(\"Optional specific typography styling instructions\"),\n  device_style: string? @description(\"Optional specific device frame styling instructions\"),\n  decorative_elements: string? @description(\"Optional specific decorative elements instructions\")\n) -> StyleGenerationOutput {\n  client ScreenshotGeneratorMed\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are an expert style designer analyzing user descriptions to create screenshot styles.\n\n    USER DESCRIPTION: \"{{ description }}\"\n    {% if style_name %}\n    USER-PROVIDED STYLE NAME: \"{{ style_name }}\"\n    {% endif %}\n    {% if reference_image %}\n    REFERENCE IMAGE FOR INSPIRATION:\n    {{ reference_image }}\n    REFERENCE IMAGE INTERPRETATION RULES:\n    - Carefully extract the color palette, lighting, background treatment, and decorative motifs\n    - Capture typography character: font families, letter shapes, weight, outline, glow, and color styling\n    - Mirror overall mood (e.g., neon arcade, cozy pastel, tech minimal)\n    - Completely ignore layout/composition of elements and any header/body copy wording\n    - If a device appears in the image, ignore the UI content on the screen—focus only on frame styling and outer glow effects\n    - Incorporate these visual cues into style_config, device_reference_prompt, and preview_image_prompt details\n    {% endif %}\n\n    {% if background_style or text_style or device_style or decorative_elements %}\n    ## USER-SPECIFIED STYLE OVERRIDES\n\n    The user has provided specific styling requirements. These OVERRIDE and take precedence over\n    the general description. Use these exact specifications:\n\n    {% if background_style %}\n    **REQUIRED background_color**: {{ background_style }}\n    {% endif %}\n\n    {% if text_style %}\n    **REQUIRED text_style**: {{ text_style }}\n    {% endif %}\n\n    {% if device_style %}\n    **REQUIRED device_style**: {{ device_style }}\n    {% endif %}\n\n    {% if decorative_elements %}\n    **REQUIRED details**: {{ decorative_elements }}\n    {% endif %}\n    {% endif %}\n\n    TASK: Generate a complete style specification.\n\n    ## 1. STYLE NAME\n\n    {% if style_name %}\n    Use the user-provided style name: \"{{ style_name }}\"\n    {% else %}\n    Generate a catchy, user-friendly name for this style:\n    - 2-4 words maximum\n    - Title case (e.g., \"Cyberpunk Neon\", \"Snap Style\", \"Halloween Spooky\")\n    - Should capture the essence and mood\n    - Easy to remember and identify\n    - Examples: \"Retro Vaporwave\", \"Zen Minimalist\", \"Pop Art Burst\"\n    {% endif %}\n\n    ## 2. STYLE CONFIG (for database)\n\n    Analyze the description and extract:\n\n    **background_color**: Describe the background color(s) and type\n    - Examples: \"bright yellow solid color\", \"gradient from dark purple to bright orange\", \"radial gradient from navy to magenta\"\n    - Be specific about colors and how they blend\n\n    **details**: Describe ALL decorative elements, their placement, sizes, and aesthetic\n    - What elements: emojis, shapes, icons, patterns\n    - Where placed: edges, corners, scattered, clustered\n    - How many: specific counts or ranges\n    - Visual style: pop art, minimalist, spooky, futuristic, etc.\n    - Example: \"Pop art style with smiley emojis (80-100px, 3-4 at edges), star sparkles (30-60px, 6-8 scattered), lightning bolts (50-70px, 2-3 at sides). Elements pushed to outer 10-15% border, center clear.\"\n\n    **text_style**: Describe the typography styling\n    - Font family and style (Impact, sans-serif, futuristic, elegant)\n    - Weight (bold, extra bold, medium)\n    - Color with effects (white with black outline, cyan with glow)\n    - CRITICAL: Ensure text is highly readable against the background - use sufficient contrast or add outlines/shadows/glows as needed\n    - Example: \"Impact font, extra bold 900 weight, white with thick 6px black outline and drop shadow\"\n\n    **device_style**: Describe how the device frame should look\n    - Frame color and finish (glossy black, matte silver, rainbow)\n    - Material (metal, glass, plastic)\n    - Special effects (neon glow, holographic, wood texture)\n    - Example: \"Glossy midnight black frame with subtle cyan glow effect and thin bezels\"\n\n    ## 3. DEVICE REFERENCE PROMPT\n\n    Generate a COMPLETE prompt for creating an iPhone 16 Pro device with a stylish case.\n\n    YOU MUST FORMAT YOUR PROMPT AS: [Creative description first] THEN [Critical constraints at the end]\n\n    FIRST PART - Creative description:\n    \"iPhone 16 Pro in a stylish protective case, flat mockup template. [Describe the case design matching the device_style - colors, materials, patterns, textures, glows, special effects. The case should wrap around the device edges and reflect the overall style aesthetic]. Flat 2D graphic template, NOT photograph, NOT 3D render.\"\n\n    SECOND PART - YOU MUST APPEND THESE EXACT WORDS VERBATIM TO YOUR device_reference_prompt OUTPUT (copy exactly as written, do not modify):\n\n    \"FLAT GEOMETRIC iPhone 16 Pro mockup - TECHNICAL DRAWING STYLE\n\n    ABSOLUTE REQUIREMENTS:\n    - 2D VECTOR-STYLE ILLUSTRATION, not realistic render\n    - PURE FRONTAL ELEVATION VIEW like architectural blueprint\n    - PERFECT RECTANGLE - all four corners at 90-degree angles\n    - NO PERSPECTIVE - left/right edges perfectly parallel vertical lines\n    - NO DEPTH CUES - top/bottom edges perfectly parallel horizontal lines\n    - Think: smartphone emoji 📱, app icon, or Figma mockup frame\n    - SYMMETRICAL - left side mirrors right side exactly\n\n    TECHNICAL SPECS:\n    - Canvas background: solid black (#000000)\n    - Screen area: solid black (#000000)\n    - VERTICAL rectangle (1290x2796 aspect ratio)\n    - Device fills 80-90% of canvas, perfectly centered\n    - NO text, NO logos, NO notch, NO camera cutouts, NO buttons\n    - Flat 2D graphic design - NOT photograph\n\n    FORBIDDEN:\n    - Any angled view or perspective distortion\n    - Visible side edges, thickness, or depth\n    - Shadows suggesting dimension\n    - Any asymmetry between left/right sides\"\n\n    Length: 120-250 words total\n\n    Example: \"iPhone 16 Pro in a stylish protective case, flat mockup template. Glossy translucent case with vibrant electric cyan (#00F0FF) to hot pink (#FF006E) gradient flowing from top to bottom. Holographic iridescent shimmer coating with subtle circuit pattern texture across the case surface. Raised protective edges around screen. Case wraps smoothly around device with rounded corners matching the phone's curves. Flat 2D graphic template, NOT photograph, NOT 3D render.\n\n    FLAT GEOMETRIC iPhone 16 Pro mockup - TECHNICAL DRAWING STYLE\n\n    ABSOLUTE REQUIREMENTS:\n    - 2D VECTOR-STYLE ILLUSTRATION, not realistic render\n    - PURE FRONTAL ELEVATION VIEW like architectural blueprint\n    - PERFECT RECTANGLE - all four corners at 90-degree angles\n    - NO PERSPECTIVE - left/right edges perfectly parallel vertical lines\n    - NO DEPTH CUES - top/bottom edges perfectly parallel horizontal lines\n    - Think: smartphone emoji 📱, app icon, or Figma mockup frame\n    - SYMMETRICAL - left side mirrors right side exactly\n\n    TECHNICAL SPECS:\n    - Canvas background: solid black (#000000)\n    - Screen area: solid black (#000000)\n    - VERTICAL rectangle (1290x2796 aspect ratio)\n    - Device fills 80-90% of canvas, perfectly centered\n    - NO text, NO logos, NO notch, NO camera cutouts, NO buttons\n    - Flat 2D graphic design - NOT photograph\n\n    FORBIDDEN:\n    - Any angled view or perspective distortion\n    - Visible side edges, thickness, or depth\n    - Shadows suggesting dimension\n    - Any asymmetry between left/right sides\"\n\n    ## 4. PREVIEW IMAGE PROMPT\n\n    Generate a COMPLETE prompt for a style showcase card featuring the style name as text:\n    - Square format (mention this)\n    - Shows style essence WITHOUT any device mockup\n    - Include: background colors, decorative elements, AND the style name as display text\n    - The style name should be prominently displayed using the text_style specifications\n    - Should capture the mood/vibe\n    - Should work with Gemini 2.5 Flash model\n    - Length: 50-150 words\n    - IMPORTANT: NO phone, NO device - pure style showcase with background, decorative elements, and style name text\n    - CRITICAL: Background and elements must fill ENTIRE canvas edge-to-edge with NO white padding, NO margins, NO borders around the image\n\n    Example: \"Square style showcase card portraying cyberpunk neon aesthetic. Background fills entire canvas edge-to-edge with no padding or margins. Neon pink and cyan radial gradient background flowing from dark navy center to bright magenta edges, extending to all four edges. Holographic circuit patterns and geometric hexagons scattered around (cyan, 60-80px, 4-5 pieces). Glowing pink grid squares (40-60px, 6-8 scattered). Center displays style name 'CYBERPUNK NEON' in futuristic bold font with white color, cyan outline and neon glow matching the text_style. High-tech, energetic atmosphere. Pure style preview, no device. Full bleed, no white space around edges.\"\n\n    ## WRITING GUIDELINES:\n    - Be specific and descriptive but concise\n    - Use exact color names or hex codes when possible\n    - Include size ranges for decorative elements (in px)\n    - Specify quantities (3-4 emojis, 6-8 stars, etc.)\n    - Describe visual style and mood clearly\n    - Each field: 50-150 words max\n    - When a reference image is provided, ensure every stylistic field clearly reflects the extracted palette, typography, and background energy from that image\n\n    ## OUTPUT FORMAT (STRICT)\n    respond with a single JSON object that matches this exact structure. Do not include markdown fences or commentary:\n    {\n      \"style_name\": \"...\",\n      \"style_config\": {\n        \"background_color\": \"...\",\n        \"details\": \"...\",\n        \"text_style\": \"...\",\n        \"device_style\": \"...\"\n      },\n      \"device_reference_prompt\": \"...\",\n      \"preview_image_prompt\": \"...\"\n    }\n    - All fields are REQUIRED and must be non-empty strings.\n    - Do NOT add extra fields.\n    - Do NOT wrap the JSON in backticks.\n    - Ensure any quotes inside strings are escaped.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Revise an existing style based on user feedback\nfunction ReviseStyle(\n  current_style: StyleGenerationOutput @description(\"Current style configuration to revise\"),\n  revision_prompt: string @description(\"User's revision instructions (e.g., 'make it darker', 'add more playful elements', 'change to purple tones')\"),\n  new_style_name: string? @description(\"Optional new name for the revised style. If not provided, keeps the current name.\"),\n  reference_image: image? @description(\"Optional new reference image for revision\")\n) -> StyleRevisionOutput {\n  client ScreenshotGeneratorHigh\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    You are revising an existing screenshot style based on user feedback.\n\n    CURRENT STYLE CONFIGURATION:\n    - Name: {{ current_style.style_name }}\n    - Background: {{ current_style.style_config.background_color }}\n    - Details: {{ current_style.style_config.details }}\n    - Text Style: {{ current_style.style_config.text_style }}\n    - Device Style: {{ current_style.style_config.device_style }}\n\n    REVISION REQUEST: \"{{ revision_prompt }}\"\n    {% if new_style_name %}\n    NEW STYLE NAME: \"{{ new_style_name }}\"\n    {% endif %}\n    {% if reference_image %}\n    NEW REFERENCE IMAGE FOR INSPIRATION:\n    {{ reference_image }}\n    {% endif %}\n\n    TASK: Revise the style while maintaining its core identity unless the revision explicitly requests changes.\n\n    ## REVISION GUIDELINES:\n    - Keep unchanged elements from the current style\n    - Apply the specific changes requested in the revision prompt\n    - If reference image provided, incorporate its visual elements\n    - Maintain consistency across all style components\n    - Preserve the overall vibe unless explicitly asked to change it\n\n    ## 1. STYLE NAME\n\n    {% if new_style_name %}\n    Use the new style name: \"{{ new_style_name }}\"\n    {% else %}\n    Keep the current style name: \"{{ current_style.style_name }}\"\n    {% endif %}\n\n    ## 2. STYLE CONFIG (for database)\n\n    Generate the revised style configuration:\n\n    **background_color**: Describe the background color(s) and type\n    - Examples: \"bright yellow solid color\", \"gradient from dark purple to bright orange\", \"radial gradient from navy to magenta\"\n    - Be specific about colors and how they blend\n    - Apply any color changes from revision prompt\n\n    **details**: Describe ALL decorative elements, their placement, sizes, and aesthetic\n    - What elements: emojis, shapes, icons, patterns\n    - Where placed: edges, corners, scattered, clustered\n    - How many: specific counts or ranges\n    - Visual style: pop art, minimalist, spooky, futuristic, etc.\n    - Example: \"Pop art style with smiley emojis (80-100px, 3-4 at edges), star sparkles (30-60px, 6-8 scattered), lightning bolts (50-70px, 2-3 at sides). Elements pushed to outer 10-15% border, center clear.\"\n    - Incorporate requested changes to elements\n\n    **text_style**: Describe the typography styling\n    - Font family and style (Impact, sans-serif, futuristic, elegant)\n    - Weight (bold, extra bold, medium)\n    - Color with effects (white with black outline, cyan with glow)\n    - CRITICAL: Ensure text is highly readable against the background - use sufficient contrast or add outlines/shadows/glows as needed\n    - Example: \"Impact font, extra bold 900 weight, white with thick 6px black outline and drop shadow\"\n    - Update text styling if revision requests it\n\n    **device_style**: Describe how the device frame should look\n    - Frame color and finish (glossy black, matte silver, rainbow)\n    - Material (metal, glass, plastic)\n    - Special effects (neon glow, holographic, wood texture)\n    - Example: \"Glossy midnight black frame with subtle cyan glow effect and thin bezels\"\n    - Revise device styling as requested\n\n    ## 3. DEVICE REFERENCE PROMPT\n\n    Generate a COMPLETE prompt for creating an iPhone 16 Pro device with a stylish case.\n\n    YOU MUST FORMAT YOUR PROMPT AS: [Creative description first] THEN [Critical constraints at the end]\n\n    FIRST PART - Creative description incorporating the revised device styling:\n    \"iPhone 16 Pro in a stylish protective case, flat mockup template. [Describe the case design matching the revised device_style - colors, materials, patterns, textures, glows, special effects. The case should wrap around the device edges and reflect the overall style aesthetic]. Flat 2D graphic template, NOT photograph, NOT 3D render.\"\n\n    SECOND PART - YOU MUST APPEND THESE EXACT WORDS VERBATIM TO YOUR device_reference_prompt OUTPUT (copy exactly as written, do not modify):\n\n    \"FLAT GEOMETRIC iPhone 16 Pro mockup - TECHNICAL DRAWING STYLE\n\n    ABSOLUTE REQUIREMENTS:\n    - 2D VECTOR-STYLE ILLUSTRATION, not realistic render\n    - PURE FRONTAL ELEVATION VIEW like architectural blueprint\n    - PERFECT RECTANGLE - all four corners at 90-degree angles\n    - NO PERSPECTIVE - left/right edges perfectly parallel vertical lines\n    - NO DEPTH CUES - top/bottom edges perfectly parallel horizontal lines\n    - Think: smartphone emoji 📱, app icon, or Figma mockup frame\n    - SYMMETRICAL - left side mirrors right side exactly\n\n    TECHNICAL SPECS:\n    - Canvas background: solid black (#000000)\n    - Screen area: solid black (#000000)\n    - VERTICAL rectangle (1290x2796 aspect ratio)\n    - Device fills 80-90% of canvas, perfectly centered\n    - NO text, NO logos, NO notch, NO camera cutouts, NO buttons\n    - Flat 2D graphic design - NOT photograph\n\n    FORBIDDEN:\n    - Any angled view or perspective distortion\n    - Visible side edges, thickness, or depth\n    - Shadows suggesting dimension\n    - Any asymmetry between left/right sides\"\n\n    Length: 120-250 words total\n\n    ## 4. PREVIEW IMAGE PROMPT\n\n    Generate a COMPLETE prompt for a style showcase card with revised styling featuring the style name as text:\n    - Square format (mention this)\n    - Shows style essence WITHOUT any device mockup\n    - Include: background colors, decorative elements, AND the style name as display text\n    - The style name should be prominently displayed using the text_style specifications\n    - Should capture the mood/vibe\n    - Should work with Gemini 2.5 Flash model\n    - Length: 50-150 words\n    - IMPORTANT: NO phone, NO device - pure style showcase with background, decorative elements, and style name text\n    - CRITICAL: Background and elements must fill ENTIRE canvas edge-to-edge with NO white padding, NO margins, NO borders around the image\n    - Incorporate all revisions into the preview\n\n    ## WRITING GUIDELINES:\n    - Be specific and descriptive but concise\n    - Use exact color names or hex codes when possible\n    - Include size ranges for decorative elements (in px)\n    - Specify quantities (3-4 emojis, 6-8 stars, etc.)\n    - Describe visual style and mood clearly\n    - Each field: 50-150 words max\n    - Only change what the revision prompt requests\n\n    ## 5. REVISION SUMMARY\n\n    Write a friendly, conversational summary (2-3 sentences) explaining what you changed:\n    - Mention specific changes made (colors, elements, styling)\n    - Note what stayed the same\n    - Use first person (\"I changed...\", \"I kept...\", \"I added...\")\n    - Be clear and helpful for the user to understand the revision\n\n    Example: \"I changed the background from bright yellow to a deep purple and navy gradient as requested. The decorative elements now use vibrant neon colors (yellow, cyan, hot pink) to pop against the darker background. I kept the playful pop art style with the same emojis, stars, and lightning bolts, just made them more vibrant to work with the new darker palette.\"\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// STYLE GENERATION TEST CASES\n// ============================================\n\ntest CyberpunkStyleGeneration {\n  functions [GenerateStyleFromDescription]\n  args {\n    description \"cyberpunk neon with pink and blue colors\"\n  }\n}\n\ntest HalloweenStyleGeneration {\n  functions [GenerateStyleFromDescription]\n  args {\n    description \"spooky Halloween with orange and purple gradient and jack-o-lanterns\"\n  }\n}\n\ntest MinimalistStyleGeneration {\n  functions [GenerateStyleFromDescription]\n  args {\n    description \"clean minimalist with soft pastels and zen vibes\"\n  }\n}\n\ntest RetroVaporwaveWithReference {\n  functions [GenerateStyleFromDescription]\n  args {\n    description \"retro vaporwave aesthetic with pink and purple tones\"\n    reference_image { url \"https://images.unsplash.com/photo-1550745165-9bc0b252726f\" }\n  }\n}\n\ntest SnapStyleWithReference {\n  functions [GenerateStyleFromDescription]\n  args {\n    description \"snap style playful design with bright colors and fun elements\"\n    reference_image { url \"https://fantastic-squid-750.convex.cloud/api/storage/17ca4c3e-fb3a-4732-b4f5-85731984db87\" }\n  }\n}\n\n// ============================================\n// STYLE REVISION TEST CASES\n// ============================================\n\ntest ReviseColorToDarker {\n  functions [ReviseStyle]\n  args {\n    current_style {\n      style_name \"Snap Style\"\n      style_config {\n        background_color \"#FFDD00 solid bright vibrant yellow\"\n        details \"Playful pop art style with smiley emojis (80-100px, 4-5 at edges), star sparkles (60-80px, 6-8 scattered), lightning bolts (55-75px, 3-4 pieces). Elements concentrated in outer 12-18% border area.\"\n        text_style \"Extra bold rounded sans-serif font, 900 weight, white color with thick 5-7px black outline stroke.\"\n        device_style \"Colorful gradient frame with cyan-to-green fade on left edge transitioning to orange-to-pink fade on bottom right.\"\n      }\n      device_reference_prompt \"CRITICAL LAYOUT RULES - MUST FOLLOW...\"\n      preview_image_prompt \"Square style showcase card...\"\n    }\n    revision_prompt \"make the background darker, change yellow to deep purple and navy blue gradient\"\n  }\n}\n\ntest ReviseAddMoreElements {\n  functions [ReviseStyle]\n  args {\n    current_style {\n      style_name \"Minimalist Zen\"\n      style_config {\n        background_color \"gradient from dark purple to bright orange\"\n        details \"Minimalist style with 3-4 small star icons (40-50px) at corners only.\"\n        text_style \"Sans-serif font, 700 weight, white with subtle shadow.\"\n        device_style \"Matte black frame with thin bezels.\"\n      }\n      device_reference_prompt \"CRITICAL LAYOUT RULES - MUST FOLLOW...\"\n      preview_image_prompt \"Square minimalist showcase...\"\n    }\n    revision_prompt \"add more playful elements like emojis and lightning bolts, make it more energetic\"\n  }\n}\n\ntest ReviseWithNewReferenceImage {\n  functions [ReviseStyle]\n  args {\n    current_style {\n      style_name \"Cyberpunk Neon\"\n      style_config {\n        background_color \"#00F0FF solid cyan\"\n        details \"Futuristic style with geometric hexagons (60-80px, 5-6 pieces) and circuit patterns.\"\n        text_style \"Futuristic font, 800 weight, white with cyan glow.\"\n        device_style \"Glossy black frame with neon cyan glow.\"\n      }\n      device_reference_prompt \"CRITICAL LAYOUT RULES - MUST FOLLOW...\"\n      preview_image_prompt \"Square futuristic showcase...\"\n    }\n    revision_prompt \"change the aesthetic to match this new reference image\"\n    reference_image { url \"https://images.unsplash.com/photo-1550745165-9bc0b252726f\" }\n  }\n}\n",
  "test_complete.baml": "// Test for complete screenshot generation with retro vaporwave aesthetic\ntest RetroVaporwaveScreenshot {\n  functions [GenerateScreenshotPrompt]\n  args {\n    text {\n      header \"Chill Vibes Only\"\n      subheader null\n    }\n    layout {\n      composition \"Device centered vertically filling 95% of canvas, header positioned at bottom below device with tight 1-2% gap, minimal spacing throughout\"\n      device_orientation \"straight-on frontal view with no tilt\"\n      device_type \"iPhone 16 Pro with under-display camera, 19.5:9 aspect ratio, pure rectangular display with slim 2-3mm uniform bezels, no notch or Dynamic Island, tall narrow form factor\"\n    }\n    style {\n      background_color \"Classic vaporwave gradient from pink #FF71CE at top through purple #B967FF in middle to cyan #05FFA1 at bottom\"\n      details \"Retro 80s-90s vaporwave aesthetic with retro grid floor perspective at bottom edge fading into distance, palm tree silhouettes (60-80px dark purple, 2-3 at sides), geometric triangles and rectangles with pink/cyan borders (40-60px, 5-7 floating), sun/grid sphere (80-100px, 1 in top corner), subtle scan lines effect overlay. ALL decorative elements at outer 10-15% edge border only, center 70% clear. Dreamy nostalgic retro-futuristic vibe.\"\n      text_style \"Impact font at 130-150px, extra bold 900 weight, white color with thick 5-7px purple outline stroke, pink drop shadow for retro effect\"\n      device_style \"Glossy white frame with subtle rainbow iridescent sheen, retro-modern fusion appearance, slim uniform bezels\"\n    }\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}