/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "avatars.baml": "// Avatar Analysis BAML Domain\n// Simplified version - Takes a person's photo and returns essential avatar attributes\n\n// ============================================\n// AVATAR-SPECIFIC CLIENT CONFIGURATION\n// ============================================\n\n// Avatar analyzer with fallback chain\nclient<llm> AvatarAnalyzer {\n  provider \"fallback\"\n  options {\n    strategy [\n      Qwen25VL,           // Primary vision model\n      Gemini20FlashExp,   // Free fast fallback\n      Llama32Vision       // Final fallback\n    ]\n  }\n}\n\n// ============================================\n// AVATAR MODEL - SIMPLIFIED\n// ============================================\n\nclass Avatar {\n  // Summary\n  summary string @description(\"Neutral physical description without expressions or emotions\")\n\n  // Core Demographics\n  apparent_age string @description(\"Age range (e.g., 18-25, 25-35, 35-45)\")\n  gender_presentation string @description(\"How the person presents (male, female, androgynous)\")\n  ethnic_appearance string? @description(\"Apparent ethnic features if relevant (East Asian, South Asian, Middle Eastern, African, European, Latin American, Mixed/Multiethnic)\")\n\n  // Face & Body\n  face_shape string @description(\"Face shape (oval, round, square, heart, diamond, oblong)\")\n  jawline string @description(\"Jawline type (soft, defined, angular, square, rounded)\")\n  body_build string? @description(\"Overall build if visible (slim, athletic, average, stocky, muscular, curvy, plus-size)\")\n\n  // Skin\n  skin_tone string @description(\"Skin tone (porcelain, fair, light, medium, olive, tan, brown, dark)\")\n  complexion_details string? @description(\"Notable skin features (freckles, beauty marks, etc.)\")\n\n  // Hair\n  hair_color string @description(\"Hair color (jet black, dark brown, light brown, blonde, auburn, gray, white)\")\n  hair_length string @description(\"Hair length (buzz cut, short, medium, shoulder-length, long)\")\n  hair_style string @description(\"Hairstyle including texture (straight bob, wavy layers, curly afro, tousled undercut)\")\n\n  // Eyes\n  eye_color string @description(\"Eye color (dark brown, brown, hazel, green, blue, gray)\")\n  eye_shape string @description(\"Eye shape (almond, round, hooded, monolid, upturned, downturned)\")\n\n  // Eyebrows\n  eyebrows string @description(\"Eyebrow description (thin arched, thick straight, bushy, soft arch)\")\n\n  // Nose\n  nose_description string @description(\"Nose description (narrow straight, broad with rounded tip, upturned button)\")\n\n  // Lips\n  lip_description string @description(\"Lip description (thin, full, wide medium, heart-shaped)\")\n\n  // Facial Hair\n  facial_hair string? @description(\"Facial hair if present (clean shaven, stubble, goatee, full beard, mustache)\")\n\n  // Accessories\n  glasses bool @description(\"Whether person wears glasses\")\n  glasses_style string? @description(\"Glasses description (rectangular black, round tortoise, wire-rimmed)\")\n\n  // Notable Features\n  distinctive_features string[]? @description(\"Other notable features (dimples, piercings, etc.)\")\n\n  // Metadata\n  confidence float @description(\"Confidence in analysis (0.0-1.0)\")\n  key_features string[] @description(\"Top 5 most distinctive physical features\")\n}\n\n// ============================================\n// AVATAR ANALYSIS FUNCTION\n// ============================================\n\nfunction AnalyzeAvatar(image: image) -> Avatar {\n  client AvatarAnalyzer\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Analyze this person's photo to extract essential avatar attributes.\n\n    Image to analyze:\n    {{ image }}\n\n    CRITICAL RULES - MUST FOLLOW:\n    1. Focus ONLY on permanent physical features\n    2. NEVER mention expressions (no smile, frown, laugh, etc.)\n    3. NEVER describe emotions, mood, or demeanor\n    4. NEVER describe clothing or accessories (except glasses)\n    5. NEVER describe pose, gestures, or body position\n    6. NEVER use emotional descriptors (warm, friendly, serious, etc.)\n    7. The summary must be purely physical description\n    8. For body_build: Try to determine from visible portions (shoulders, neck, face fullness)\n       - If full body visible: provide accurate assessment\n       - If only upper body/face visible: make reasonable inference from visible cues\n       - Only use null if absolutely no body indicators are visible (rare)\n\n    For the summary field:\n    ✅ GOOD: \"A person with curly black hair, brown eyes, rectangular glasses, and a goatee\"\n    ❌ BAD: \"A friendly person with a warm smile and curly black hair\"\n\n    IMPORTANT - Use concise, combined descriptions:\n    - For hair_style: Include texture and style together (e.g., \"wavy bob\", \"straight ponytail\", \"curly afro\")\n    - For nose_description: Combine key features (e.g., \"broad with rounded tip\", \"narrow and upturned\")\n    - For lip_description: Include size and shape (e.g., \"full and wide\", \"thin heart-shaped\")\n    - For eyebrows: Combine thickness and shape (e.g., \"thick arched\", \"thin straight\")\n\n    For key_features, list the 5 most distinctive PERMANENT physical traits.\n\n    For body_build (IMPORTANT - try to always provide):\n    - Use neutral, respectful terms: slim, athletic, average, stocky, muscular, curvy, plus-size\n    - Even with just face/shoulders visible, make reasonable inference from:\n      * Face fullness and neck width\n      * Shoulder breadth if visible\n      * Overall proportions\n    - This helps with consistent character generation across scenes\n\n    For ethnic_appearance (optional):\n    - Only include if features are clearly distinctive\n    - Use broad, respectful categories\n    - If uncertain, leave as null\n\n    For distinctive_features:\n    - List things like dimples, piercings, moles, etc.\n    - Keep as array of short descriptions\n\n    Be specific enough that an artist could recreate this person's appearance as an avatar.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASE\n// ============================================\n\ntest AvatarTest {\n  functions [AnalyzeAvatar]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}",
  "clients.baml": "// OpenRouter client configuration for BAML\n// Using openai-generic provider with OpenRouter's base URL\n\n// Fast model - GPT-5 Nano (same as AI SDK's \"tiny\" preset)\nclient<llm> GPT5Nano {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5-nano\"  // Fast and cheap for testing\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Smart model - GPT-5 (same as AI SDK's \"large\" preset)\nclient<llm> GPT5 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5\"  // High reasoning capability\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Balanced model - GPT-5 Mini\nclient<llm> GPT5Mini {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-5-mini\"  // Balanced performance\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML Test\"\n    }\n  }\n}\n\n// Qwen 2.5 VL - Vision model\nclient<llm> Qwen25VL {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"qwen/qwen2.5-vl-72b-instruct\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.0 Flash Exp - Free vision model\nclient<llm> Gemini20FlashExp {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.0-flash-exp:free\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Llama 3.2 90B Vision - Vision model\nclient<llm> Llama32Vision {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"meta-llama/llama-3.2-90b-vision-instruct\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Pro - Premium reasoning model\nclient<llm> Gemini25Pro {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-pro\"  // High capability, premium model\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Flash - Fast and efficient\nclient<llm> Gemini25Flash {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-flash\"  // Balanced speed and quality\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Gemini 2.5 Flash Lite - Ultra-lightweight\nclient<llm> Gemini25FlashLite {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"google/gemini-2.5-flash-lite\"  // Fastest, most lightweight\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// ===========================================\n// ANTHROPIC MODELS (via OpenRouter)\n// ===========================================\n\n// Claude Sonnet 4 - High-quality reasoning\nclient<llm> ClaudeSonnet4 {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-sonnet-4\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Claude 3.5 Haiku - Fast and efficient\nclient<llm> ClaudeHaiku {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"anthropic/claude-3-5-haiku-20241022\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// ===========================================\n// MISTRAL MODELS (via OpenRouter)\n// ===========================================\n\n// Mistral Large - Premium reasoning\nclient<llm> MistralLarge {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"mistralai/mistral-large-2411\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// Mistral Small - Fast and efficient\nclient<llm> MistralSmall {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"mistralai/mistral-small-2412\"\n    headers {\n      \"HTTP-Referer\" \"https://mocksy.app\"\n      \"X-Title\" \"Mocksy BAML\"\n    }\n  }\n}\n\n// ============================================\n// MODEL TESTING\n// ============================================\n\nclass ModelTestResponse {\n  model_name string @description(\"Name of the model being tested\")\n  response_text string @description(\"The model's response to the test prompt\")\n  character_count int @description(\"Number of characters in the response\")\n  passed bool @description(\"Whether the model responded successfully\")\n}\n\nclass VisionTestResponse {\n  model_name string @description(\"Name of the vision model being tested\")\n  can_see_image bool @description(\"Whether the model can process the image\")\n  description string @description(\"Brief description of what the model sees\")\n  object_count int @description(\"Number of distinct objects/people identified\")\n}\n\n// Test functions for each model\nfunction TestGPT5Nano() -> ModelTestResponse {\n  client GPT5Nano\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5Nano is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGPT5() -> ModelTestResponse {\n  client GPT5\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5 is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGPT5Mini() -> ModelTestResponse {\n  client GPT5Mini\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"GPT5Mini is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25Pro() -> ModelTestResponse {\n  client Gemini25Pro\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25Pro is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25Flash() -> ModelTestResponse {\n  client Gemini25Flash\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25Flash is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini25FlashLite() -> ModelTestResponse {\n  client Gemini25FlashLite\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"Gemini25FlashLite is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestClaudeSonnet4() -> ModelTestResponse {\n  client ClaudeSonnet4\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"ClaudeSonnet4 is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestClaudeHaiku() -> ModelTestResponse {\n  client ClaudeHaiku\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"ClaudeHaiku is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestMistralLarge() -> ModelTestResponse {\n  client MistralLarge\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"MistralLarge is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestMistralSmall() -> ModelTestResponse {\n  client MistralSmall\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are being tested. Please respond with exactly: \"MistralSmall is working correctly.\"\n    Then add one interesting fact about programming.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestQwen25VL(image: image) -> VisionTestResponse {\n  client Qwen25VL\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Qwen25VL vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestGemini20FlashExp(image: image) -> VisionTestResponse {\n  client Gemini20FlashExp\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Gemini20FlashExp vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestLlama32Vision(image: image) -> VisionTestResponse {\n  client Llama32Vision\n  prompt #\"\n    {{ _.role(\"user\") }}\n    You are testing the Llama32Vision vision model.\n    Image to analyze: {{ image }}\n    Please describe what you see in this image in 1-2 sentences.\n    Count how many distinct objects or people you can identify.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases\ntest GPT5NanoTest {\n  functions [TestGPT5Nano]\n  args {}\n}\n\ntest GPT5Test {\n  functions [TestGPT5]\n  args {}\n}\n\ntest GPT5MiniTest {\n  functions [TestGPT5Mini]\n  args {}\n}\n\ntest Gemini25ProTest {\n  functions [TestGemini25Pro]\n  args {}\n}\n\ntest Gemini25FlashTest {\n  functions [TestGemini25Flash]\n  args {}\n}\n\ntest Gemini25FlashLiteTest {\n  functions [TestGemini25FlashLite]\n  args {}\n}\n\ntest ClaudeSonnet4Test {\n  functions [TestClaudeSonnet4]\n  args {}\n}\n\ntest ClaudeHaikuTest {\n  functions [TestClaudeHaiku]\n  args {}\n}\n\ntest MistralLargeTest {\n  functions [TestMistralLarge]\n  args {}\n}\n\ntest MistralSmallTest {\n  functions [TestMistralSmall]\n  args {}\n}\n\ntest Qwen25VLTest {\n  functions [TestQwen25VL]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}\n\ntest Gemini20FlashExpTest {\n  functions [TestGemini20FlashExp]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}\n\ntest Llama32VisionTest {\n  functions [TestLlama32Vision]\n  args {\n    image { url \"https://d2u1z1lopyfwlx.cloudfront.net/thumbnails/73ccdd21-b99f-5c5d-b5d3-583189e20070/5e778976-0fdd-5ccc-9d03-6cbd59095783.jpg\" }\n  }\n}",
  "generators.baml": "// Generator configuration for TypeScript\n// This tells BAML where to output the generated TypeScript client\n\ngenerator target {\n  output_type \"typescript\"\n  output_dir \"..\"  // Outputs to project root\n  version \"0.208.5\"\n}",
  "helloworld.baml": "// Hello World BAML Domain\n// Basic examples for getting started with BAML and OpenRouter integration\n// Tests are co-located with their functions for better maintainability\n\n// ============================================\n// MODELS\n// ============================================\n\nclass BasicResponse {\n  answer string @description(\"The direct answer to the question\")\n  confidence float @description(\"Confidence level from 0.0 to 1.0\")\n}\n\nclass DetailedResponse {\n  answer string\n  confidence float\n  explanation string? @description(\"Optional explanation if needed\")\n  sources string[]? @description(\"Optional list of sources\")\n}\n\n// ============================================\n// SIMPLE STRING FUNCTIONS WITH TESTS\n// ============================================\n\nfunction SimpleStringGPT5Nano(input: string) -> string {\n  client GPT5Nano\n  prompt #\"\n    Respond to this: {{ input }}\n\n    Be concise and direct.\n  \"#\n}\n\ntest NanoGreeting {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"Say hello if you can hear me\"\n  }\n}\n\ntest NanoMath {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"What is 2+2?\"\n  }\n}\n\nfunction SimpleStringGPT5(input: string) -> string {\n  client GPT5\n  prompt #\"\n    Respond to this: {{ input }}\n\n    Be concise and direct.\n  \"#\n}\n\ntest GPT5Greeting {\n  functions [SimpleStringGPT5]\n  args {\n    input \"Write a poetic greeting\"\n  }\n}\n\ntest GPT5Philosophy {\n  functions [SimpleStringGPT5]\n  args {\n    input \"What is the meaning of life in one sentence?\"\n  }\n}\n\n// ============================================\n// STRUCTURED RESPONSE FUNCTIONS WITH TESTS\n// ============================================\n\nfunction StructuredResponseGPT5Nano(question: string) -> BasicResponse {\n  client GPT5Nano\n  prompt #\"\n    Answer this question: {{ question }}\n\n    Also rate your confidence in your answer from 0.0 (not confident) to 1.0 (very confident).\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoCapital {\n  functions [StructuredResponseGPT5Nano]\n  args {\n    question \"What is the capital of France?\"\n  }\n}\n\ntest NanoScience {\n  functions [StructuredResponseGPT5Nano]\n  args {\n    question \"What is H2O?\"\n  }\n}\n\nfunction StructuredResponseGPT5(question: string) -> BasicResponse {\n  client GPT5\n  prompt #\"\n    Answer this question: {{ question }}\n\n    Also rate your confidence in your answer from 0.0 (not confident) to 1.0 (very confident).\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5History {\n  functions [StructuredResponseGPT5]\n  args {\n    question \"When did World War II end?\"\n  }\n}\n\ntest GPT5Complex {\n  functions [StructuredResponseGPT5]\n  args {\n    question \"Explain quantum entanglement\"\n  }\n}\n\n// ============================================\n// LIST GENERATOR FUNCTIONS WITH TESTS\n// ============================================\n\nfunction ListGeneratorGPT5Nano(topic: string) -> string[] {\n  client GPT5Nano\n  prompt #\"\n    List 3 examples of: {{ topic }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoProgramming {\n  functions [ListGeneratorGPT5Nano]\n  args {\n    topic \"programming languages\"\n  }\n}\n\ntest NanoColors {\n  functions [ListGeneratorGPT5Nano]\n  args {\n    topic \"primary colors\"\n  }\n}\n\nfunction ListGeneratorGPT5(topic: string) -> string[] {\n  client GPT5\n  prompt #\"\n    List 5 examples of: {{ topic }}\n\n    Provide detailed, high-quality examples.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5Frameworks {\n  functions [ListGeneratorGPT5]\n  args {\n    topic \"modern JavaScript frameworks\"\n  }\n}\n\ntest GPT5AIModels {\n  functions [ListGeneratorGPT5]\n  args {\n    topic \"popular large language models\"\n  }\n}\n\n// ============================================\n// DETAILED ANALYSIS FUNCTIONS WITH TESTS\n// ============================================\n\nfunction DetailedAnalysisGPT5Nano(query: string) -> DetailedResponse {\n  client GPT5Nano\n  prompt #\"\n    Query: {{ query }}\n\n    Provide a quick answer with confidence level.\n    Be brief and to the point.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest NanoQuickAnswer {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What is 100 divided by 4?\"\n  }\n}\n\ntest NanoSimpleFact {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What year was the iPhone released?\"\n  }\n}\n\nfunction DetailedAnalysisGPT5(query: string) -> DetailedResponse {\n  client GPT5\n  prompt #\"\n    Query: {{ query }}\n\n    Provide a comprehensive answer with confidence level.\n    Include explanation only if the answer needs clarification.\n    Include sources only if you're referencing specific information.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest GPT5SkyQuestion {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Why is the sky blue? Explain the physics behind it.\"\n  }\n}\n\ntest GPT5MathExplanation {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"What is the square root of 144 and how do you calculate it manually?\"\n  }\n}\n\ntest GPT5SpaceHistory {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Who was the first person to walk on the moon and what was significant about the mission?\"\n  }\n}\n\ntest GPT5Photosynthesis {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"Explain photosynthesis in detail with the chemical equations\"\n  }\n}\n\n// ============================================\n// COMPARISON TESTS\n// ============================================\n// These tests run the same prompt on different models for comparison\n\ntest CompareSimple_Nano {\n  functions [SimpleStringGPT5Nano]\n  args {\n    input \"Explain AI in one sentence\"\n  }\n}\n\ntest CompareSimple_GPT5 {\n  functions [SimpleStringGPT5]\n  args {\n    input \"Explain AI in one sentence\"\n  }\n}\n\ntest CompareDetailed_Nano {\n  functions [DetailedAnalysisGPT5Nano]\n  args {\n    query \"What are the benefits of TypeScript?\"\n  }\n}\n\ntest CompareDetailed_GPT5 {\n  functions [DetailedAnalysisGPT5]\n  args {\n    query \"What are the benefits of TypeScript?\"\n  }\n}",
  "scene.baml": "// Scene Generation BAML Domain\n// Takes character objects (with avatars), scene prompt, and art style to generate optimized image prompts\n// Note: Avatar class is automatically available from avatars.baml in the same directory\n\n// ============================================\n// SCENE-SPECIFIC CLIENT CONFIGURATION\n// ============================================\n\n// High Quality - Best scene generation for final/hero images\nclient<llm> SceneGeneratorHigh {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25Pro,        // Premium Gemini model\n      GPT5,               // Top-tier OpenAI\n      ClaudeSonnet4,      // High-quality Anthropic\n      MistralLarge        // Premium Mistral fallback\n    ]\n  }\n}\n\n// Medium Quality - Balanced for standard use\nclient<llm> SceneGeneratorMed {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25Flash,      // Good balance of speed/quality\n      GPT5Mini,           // Balanced OpenAI\n      ClaudeHaiku,        // Fast Claude\n      MistralSmall        // Efficient Mistral\n    ]\n  }\n}\n\n// Low Quality - Fast and cheap for drafts/testing\nclient<llm> SceneGeneratorLow {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25FlashLite,  // Ultra-fast Gemini\n      GPT5Nano,           // Cheapest OpenAI\n      ClaudeHaiku         // Fast fallback\n    ]\n  }\n}\n\n// Default scene generator (uses medium tier)\nclient<llm> SceneGenerator {\n  provider \"fallback\"\n  options {\n    strategy [\n      Gemini25Flash,      // Start with balanced\n      Gemini25FlashLite,  // Fallback to fast\n      Gemini25Pro         // Escalate to premium if needed\n    ]\n  }\n}\n\n// ============================================\n// SCENE MODEL\n// ============================================\n\nclass Scene {\n  // Core Scene Description\n  main_description string @description(\"Complete scene description in 2-3 clear sentences\")\n\n  // Character Integration (supports multiple characters)\n  characters CharacterInScene[] @description(\"How each avatar appears in the scene\")\n  character_arrangement string @description(\"Overall arrangement and positioning of characters\")\n\n  // Visual Composition\n  camera_angle string @description(\"Camera angle (eye-level, low angle, high angle, profile, three-quarter)\")\n  shot_type string @description(\"Shot type (close-up, medium shot, full body, wide shot)\")\n\n  // Environment\n  setting string @description(\"Location and environment in simple terms\")\n  background string @description(\"Background elements in order of importance\")\n  time_of_day string @description(\"Time of day and its lighting effect\")\n\n  // Mood & Atmosphere\n  mood string @description(\"Emotional tone (epic, peaceful, mysterious, energetic, etc.)\")\n  color_palette string @description(\"Dominant colors (max 3-4 colors)\")\n  lighting_style string @description(\"Lighting description (dramatic, soft, golden hour, etc.)\")\n\n  // Art Style Application\n  style_keywords string[] @description(\"Key style descriptors for the art style (max 5)\")\n  quality_markers string[] @description(\"Quality indicators (masterpiece, best quality, ultra detailed, etc.)\")\n\n  // Optimized Prompts for Image Generation\n  main_prompt string @description(\"Complete prompt for image generation (150-250 words max)\")\n  negative_prompt string @description(\"Things to avoid (bad anatomy, blurry, low quality, etc.)\")\n\n  // Structured Prompt Components (for JSON-capable models)\n  structured_prompt PromptStructure @description(\"Structured prompt for models that support JSON\")\n\n  // Generation Hints\n  suggested_guidance float @description(\"Suggested guidance scale (typically 3.5-12)\")\n  complexity_score float @description(\"Scene complexity (0.0-1.0)\")\n\n  // Metadata\n  avatar_integration string @description(\"How well the avatars are integrated in the prompt\")\n  character_count int @description(\"Number of characters in the scene\")\n  key_elements string[] @description(\"Top 3-5 most important elements to get right\")\n}\n\n// ============================================\n// CHARACTER DEFINITION\n// ============================================\n\nclass Character {\n  // Identity\n  name string? @description(\"Optional character name/identifier\")\n  avatar Avatar @description(\"Physical characteristics from avatar analysis\")\n\n  // Structured Outfit\n  outfit Outfit @description(\"Character's clothing and accessories\")\n\n  // Scene generation hints\n  expression string? @description(\"Default expression (confident, shy, serious, cheerful, etc.)\")\n  signature_colors string[]? @description(\"Preferred color palette for this character\")\n}\n\nclass Outfit {\n  // Clothing layers\n  top string? @description(\"Upper body clothing (t-shirt, blouse, jacket, etc.)\")\n  bottom string? @description(\"Lower body clothing (jeans, skirt, shorts, etc.)\")\n  footwear string? @description(\"Shoes, boots, sandals, etc.\")\n  outerwear string? @description(\"Coat, hoodie, vest, etc.\")\n\n  // Integrated accessories (part of the outfit)\n  accessories string[]? @description(\"Watches, jewelry, belts, hats, scarves, bags, etc.\")\n\n  // Style metadata\n  style string @description(\"Overall style (casual, formal, athletic, punk, vintage, etc.)\")\n  color_scheme string? @description(\"Main colors of the outfit\")\n  fabric_textures string[]? @description(\"Materials like denim, leather, silk, cotton\")\n}\n\n// ============================================\n// CHARACTER IN SCENE\n// ============================================\n\nclass CharacterInScene {\n  character_index int @description(\"Index of the character this refers to (0-based)\")\n  description string @description(\"Character appearance in this specific scene\")\n  pose string @description(\"Character's pose or action\")\n  placement string @description(\"Where positioned (left, center, right, foreground, background)\")\n  outfit_modifications string? @description(\"Scene-specific outfit changes (wet, torn, dirty, etc.)\")\n  interaction string? @description(\"How they interact with others or environment\")\n}\n\n// ============================================\n// STRUCTURED PROMPT FORMAT\n// ============================================\n\nclass PromptStructure {\n  // Core Elements\n  subjects Subject[] @description(\"All characters/subjects in the scene\")\n  group_action string? @description(\"What the group is doing together (if multiple)\")\n  environment string @description(\"Setting and surroundings\")\n\n  // Style Elements\n  style PromptStyle @description(\"Visual style specifications\")\n\n  // Technical Details\n  technical PromptTechnical @description(\"Camera and shot specifications\")\n\n  // Quality Markers\n  quality string[] @description(\"Quality and detail markers\")\n}\n\nclass PromptStyle {\n  art_style string @description(\"Primary art style\")\n  color_palette string @description(\"Color scheme\")\n  mood string @description(\"Emotional tone\")\n  lighting string @description(\"Lighting setup\")\n  texture string @description(\"Surface and material qualities\")\n}\n\nclass PromptTechnical {\n  camera_angle string @description(\"Camera perspective\")\n  shot_type string @description(\"Framing and distance\")\n  composition string @description(\"Visual arrangement\")\n  depth_of_field string @description(\"Focus and blur effects\")\n}\n\nclass Subject {\n  description string @description(\"Physical appearance and outfit\")\n  action string @description(\"Individual action or pose\")\n  position string @description(\"Position in frame\")\n}\n\n// ============================================\n// SCENE GENERATION FUNCTION\n// ============================================\n\nfunction GenerateScene(\n  scene_prompt: string @description(\"User's scene description\"),\n  art_style: string @description(\"Desired art style\"),\n  characters: Character[] @description(\"Array of characters with avatars and outfits (1-5 characters)\")\n) -> Scene {\n  client SceneGeneratorMed  // Change to SceneGeneratorHigh or SceneGeneratorLow as needed\n  prompt #\"\n    {{ _.role(\"user\") }}\n\n    Generate an optimized scene description for image generation.\n\n    INPUTS:\n    Scene Request: {{ scene_prompt }}\n    Art Style: {{ art_style }}\n\n    Character Descriptions:\n    {% for character in characters %}\n    Character {{ loop.index }}{% if character.name %} ({{ character.name }}){% endif %}:\n\n    Physical Traits:\n    - Summary: {{ character.avatar.summary }}\n    - Age/Gender: {{ character.avatar.apparent_age }}, {{ character.avatar.gender_presentation }}\n    - Face: {{ character.avatar.face_shape }} face, {{ character.avatar.skin_tone }} skin\n    - Hair: {{ character.avatar.hair_color }}, {{ character.avatar.hair_length }}, {{ character.avatar.hair_style }}\n    - Eyes: {{ character.avatar.eye_color }}, {{ character.avatar.eye_shape }}\n    - Eyebrows: {{ character.avatar.eyebrows }}\n    - Nose: {{ character.avatar.nose_description }}\n    - Lips: {{ character.avatar.lip_description }}\n    - Distinctive: {{ character.avatar.key_features }}\n    {% if character.avatar.body_build %}\n    - Body build: {{ character.avatar.body_build }}\n    {% endif %}\n    {% if character.avatar.facial_hair %}\n    - Facial hair: {{ character.avatar.facial_hair }}\n    {% endif %}\n    {% if character.avatar.glasses %}\n    - Glasses: {{ character.avatar.glasses_style }}\n    {% endif %}\n    {% if character.avatar.ethnic_appearance %}\n    - Ethnic appearance: {{ character.avatar.ethnic_appearance }}\n    {% endif %}\n\n    Outfit:\n    - Style: {{ character.outfit.style }}\n    {% if character.outfit.top %}\n    - Top: {{ character.outfit.top }}\n    {% endif %}\n    {% if character.outfit.bottom %}\n    - Bottom: {{ character.outfit.bottom }}\n    {% endif %}\n    {% if character.outfit.outerwear %}\n    - Outerwear: {{ character.outfit.outerwear }}\n    {% endif %}\n    {% if character.outfit.footwear %}\n    - Footwear: {{ character.outfit.footwear }}\n    {% endif %}\n    {% if character.outfit.accessories %}\n    - Accessories: {{ character.outfit.accessories }}\n    {% endif %}\n    {% if character.outfit.color_scheme %}\n    - Color scheme: {{ character.outfit.color_scheme }}\n    {% endif %}\n    {% if character.expression %}\n    - Expression: {{ character.expression }}\n    {% endif %}\n    {% if character.signature_colors %}\n    - Signature colors: {{ character.signature_colors }}\n    {% endif %}\n\n    {% endfor %}\n\n    INSTRUCTIONS FOR PROMPT GENERATION:\n\n    CRITICAL: You MUST include EVERY physical trait and outfit detail provided above in your main_prompt.\n    Do not summarize or skip any features. If it's listed above, it must appear in the prompt.\n\n    1. CREATE TWO PROMPT FORMATS:\n       A. main_prompt: Natural language prompt (150-250 words)\n       B. structured_prompt: JSON-friendly structured format\n\n    2. MAIN PROMPT STRUCTURE:\n       - Lead with art style REPEATED 2-3 times for emphasis\n       - Character descriptions should be DETAILED (30-50 words per character):\n         * Include age, ethnicity, face shape, skin tone\n         * Complete hair description (color, length, style, texture if notable)\n         * Eye color AND shape\n         * ALL distinctive features\n         * Complete outfit with all items\n       - Include specific action/pose with body language\n       - Describe environment with at least 3 details\n       - End with mood, lighting, and quality markers\n       - Format: \"[style]x3, [detailed characters], [specific actions], [rich environment], [mood/lighting], [quality]\"\n       - For non-photorealistic styles, explicitly state what it is NOT\n\n    3. STRUCTURED PROMPT (for JSON-capable models like NanoBanana/Gemini):\n       - Break down into clear categories\n       - Subjects: Array of character descriptions with individual actions\n       - Group Action: What they're doing together (if multiple)\n       - Environment: Setting details\n       - Style: Art style, colors, mood, lighting\n       - Technical: Camera angle, shot type, composition\n       - Quality: Detail level markers\n\n    4. CHARACTER CONSISTENCY AND DETAIL:\n       - Include ALL provided physical traits in the main prompt:\n         * Face shape AND skin tone (e.g., \"round olive-skinned face\")\n         * Complete hair description (color + length + style)\n         * Eye color AND shape (e.g., \"dark brown almond eyes\")\n         * ALL distinctive features (glasses style, facial hair type, piercings)\n       - Describe complete outfits:\n         * Every clothing item provided (top, bottom, footwear)\n         * All accessories (watches, jewelry, belts)\n         * Fabric textures if provided\n       - Add character-specific details:\n         * Body language matching their expression\n         * How clothing fits their body type\n         * Any scene-appropriate modifications (sweat, battle damage, etc.)\n       - For multiple characters:\n         * Describe relative heights/builds if different\n         * Show personality through posture and stance\n\n       IMPORTANT - ACCESSORY CONFLICT RESOLUTION:\n       - Character outfit/accessories ALWAYS override conflicting Avatar traits (Character is scene-specific, Avatar is base description)\n       - If outfit accessories include eyewear (sunglasses, goggles, etc.) AND avatar has glasses:\n         * PRIORITIZE the outfit's eyewear as the currently worn item\n         * Mention avatar glasses only if contextually appropriate (e.g., \"wearing sunglasses over their prescription frames\" or \"sunglasses instead of their usual glasses\")\n         * If outfit says \"sunglasses on head\", show sunglasses on head and prescription glasses on face\n       - Avoid depicting characters wearing TWO pairs of glasses on their face simultaneously unless explicitly specified\n       - For any Character vs Avatar conflicts, Character wins (outfit trumps base appearance)\n\n    5. NEGATIVE PROMPT:\n       - Universal: \"bad anatomy, blurry, low quality, watermark, signature\"\n       - Style-specific: Add based on art style\n       - For non-photorealistic styles: Include \"photorealistic, photograph, 3d render, ultra realistic\"\n       - Keep concise and focused\n\n    6. MODEL ADAPTABILITY:\n       - Midjourney: Focus on artistic descriptions, avoid parameters\n       - DALL-E: Use rich, narrative language\n       - Stable Diffusion: Balance technical and artistic\n       - NanoBanana/Gemini: Leverage structured format\n       - Flux: Emphasize style and quality markers\n\n    7. BEST PRACTICES:\n       - Clear, unambiguous descriptions\n       - Avoid model-specific jargon\n       - Maintain character-scene coherence\n       - Prioritize the most important elements\n\n    The goal is to create BOTH a natural language prompt AND a structured format that can be used across different image generation models, ensuring consistent character representation and scene quality.\n\n    MULTI-CHARACTER CONSIDERATIONS:\n    - When multiple avatars provided, describe their spatial relationship\n    - Include interactions between characters if appropriate\n    - Ensure each character is distinctly describable\n    - Balance detail across all characters\n    - For group shots, describe overall composition first, then individuals\n\n    REQUIRED OUTPUT FIELDS:\n    You MUST generate ALL of the following fields for the Scene object:\n    - main_description: 2-3 sentence overview of the complete scene\n    - characters: Array of CharacterInScene objects describing how each character appears\n    - character_arrangement: Overall spatial arrangement and positioning of characters\n    - camera_angle: (eye-level, low angle, high angle, profile, three-quarter)\n    - shot_type: (close-up, medium shot, full body, wide shot)\n    - setting: Location/environment description\n    - background: Background elements in order of importance\n    - time_of_day: Time and its lighting effect\n    - mood: Emotional tone of the scene\n    - color_palette: 3-4 dominant colors\n    - lighting_style: Type of lighting (dramatic, soft, golden hour, etc.)\n    - style_keywords: 5 key style descriptors as array\n    - quality_markers: Quality indicators as array (masterpiece, best quality, etc.)\n    - main_prompt: Complete 150-250 word prompt for image generation\n    - negative_prompt: Things to avoid\n    - structured_prompt: PromptStructure object with all sub-fields\n    - suggested_guidance: Float between 3.5-12\n    - complexity_score: Float between 0.0-1.0\n    - avatar_integration: Description of how avatars are integrated\n    - character_count: Integer number of characters\n    - key_elements: Array of 3-5 most important elements\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// ============================================\n// TEST CASES\n// ============================================\n\n// Test 1: Single avatar - full body waving hello\ntest FullBodyWaveTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"A friendly person standing in a bright, clean environment, waving hello with a welcoming gesture, full body visible from head to toe\"\n    art_style \"toony anime style, bright colors, cel-shaded\"\n    characters [{\n      name \"Sam\"\n      avatar {\n        summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n        apparent_age \"25-35\"\n        gender_presentation \"male\"\n        ethnic_appearance \"Middle Eastern\"\n        face_shape \"round\"\n        jawline \"rounded\"\n        body_build \"stocky\"\n        skin_tone \"medium\"\n        complexion_details null\n        hair_color \"dark brown\"\n        hair_length \"short\"\n        hair_style \"thick and wavy, tousled\"\n        eye_color \"dark brown\"\n        eye_shape \"almond\"\n        eyebrows \"thick with a soft arch\"\n        nose_description \"broad with a rounded tip\"\n        lip_description \"medium width with a fuller lower lip\"\n        facial_hair \"short full beard\"\n        glasses true\n        glasses_style \"dark purple rectangular frames\"\n        distinctive_features [\"left ear piercing\"]\n        confidence 0.95\n        key_features [\"Thick-framed rectangular glasses\", \"Short full beard\", \"Thick, dark wavy hair\", \"Round face shape\", \"Broad nose\"]\n      }\n      outfit {\n        style \"casual modern\"\n        top \"navy blue cotton t-shirt\"\n        bottom \"dark jeans\"\n        footwear \"white sneakers\"\n        accessories [\"silver watch\"]\n        color_scheme \"navy, denim blue, white\"\n      }\n      expression \"cheerful\"\n      signature_colors [\"blue\", \"navy\", \"gray\"]\n    }]\n  }\n}\n\n// Test 2: Single avatar - action scene running\ntest ActionRunningTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"A person sprinting through a futuristic city street, dynamic running pose with motion blur, neon lights reflecting off wet pavement\"\n    art_style \"8-bit pixel art, retro video game style, limited color palette\"\n    characters [{\n      name \"Runner\"\n      avatar {\n        summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n      apparent_age \"25-35\"\n      gender_presentation \"male\"\n      ethnic_appearance \"Middle Eastern\"\n      face_shape \"round\"\n      jawline \"rounded\"\n      body_build null\n      skin_tone \"olive\"\n      complexion_details null\n      hair_color \"dark brown\"\n      hair_length \"short\"\n      hair_style \"short, thick wavy\"\n      eye_color \"dark brown\"\n      eye_shape \"almond\"\n      eyebrows \"thick with a soft arch\"\n      nose_description \"medium width with a rounded tip\"\n      lip_description \"medium fullness\"\n      facial_hair \"full beard\"\n      glasses true\n      glasses_style \"thick-framed rectangular\"\n      distinctive_features [\"left ear piercing\"]\n      confidence 0.95\n      key_features [\"thick-framed rectangular glasses\", \"full beard\", \"short, thick wavy hair\", \"round face shape\", \"olive skin tone\"]\n      }\n      outfit {\n        style \"athletic cyberpunk\"\n        top \"black tech hoodie\"\n        bottom \"cargo pants\"\n        footwear \"high-tech running shoes\"\n        accessories [\"LED wristband\", \"earbuds\"]\n        color_scheme \"black, neon blue, silver\"\n      }\n      expression \"determined\"\n      signature_colors [\"black\", \"blue\", \"silver\"]\n    }]\n  }\n}\n\n// Test 3: Multiple avatars - martial arts scene\ntest MartialArtsTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"Two characters in an epic martial arts battle stance, facing each other in a dojo with dramatic lighting, about to clash\"\n    art_style \"toony anime style, dynamic action lines, vibrant colors\"\n    characters [\n      {\n        name \"Fighter 1\"\n        avatar {\n            summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n          apparent_age \"25-35\"\n          gender_presentation \"male\"\n          ethnic_appearance \"Middle Eastern\"\n          face_shape \"round\"\n          jawline \"rounded\"\n          body_build null\n          skin_tone \"olive\"\n          complexion_details null\n          hair_color \"dark brown\"\n          hair_length \"short\"\n          hair_style \"short, thick wavy\"\n          eye_color \"dark brown\"\n          eye_shape \"almond\"\n          eyebrows \"thick with a soft arch\"\n          nose_description \"medium width with a rounded tip\"\n          lip_description \"medium fullness\"\n          facial_hair \"full beard\"\n          glasses true\n          glasses_style \"thick-framed rectangular\"\n          distinctive_features [\"left ear piercing\"]\n          confidence 0.95\n          key_features [\"thick-framed rectangular glasses\", \"full beard\", \"short, thick wavy hair\", \"round face shape\", \"olive skin tone\"]\n        }\n        outfit {\n          style \"martial arts\"\n          top \"black gi jacket with white belt\"\n          bottom \"black gi pants\"\n          footwear \"barefoot\"\n          accessories []\n          color_scheme \"black, white\"\n        }\n        expression \"focused\"\n        signature_colors [\"black\", \"white\"]\n      },\n      {\n        name \"Fighter 2\"\n        avatar {\n          summary \"A woman with long auburn hair, green eyes, and light freckles.\"\n          apparent_age \"20-30\"\n          gender_presentation \"female\"\n          ethnic_appearance \"European\"\n          face_shape \"oval\"\n          jawline \"soft\"\n          body_build \"slim\"\n          skin_tone \"light\"\n          complexion_details \"light freckles\"\n          hair_color \"auburn\"\n          hair_length \"long\"\n          hair_style \"wavy layers with red highlights\"\n          eye_color \"green\"\n          eye_shape \"round\"\n          eyebrows \"medium natural arch\"\n          nose_description \"narrow and refined\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"Light freckles\", \"Dimples on both cheeks\", \"Earlobe piercings\"]\n          confidence 0.92\n          key_features [\"Long wavy auburn hair\", \"Bright green eyes\", \"Light freckles\", \"Dimples\", \"Oval face\"]\n        }\n        outfit {\n          style \"martial arts\"\n          top \"white gi jacket with red belt\"\n          bottom \"white gi pants\"\n          footwear \"barefoot\"\n          accessories [\"hair tie pulling hair into high ponytail\"]\n          color_scheme \"white, red\"\n        }\n        expression \"fierce\"\n        signature_colors [\"white\", \"red\", \"auburn\"]\n      }\n    ]\n  }\n}\n\n// Test 4: Beach hangout - Three friends relaxing\ntest BeachHangoutTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"Three friends relaxing and hanging out on a beautiful beach during golden hour. They're sitting on a blanket, laughing and enjoying snacks, with the ocean waves in the background\"\n    art_style \"studio ghibli art style, anime style, cel-shaded, warm colors\"\n    characters [\n      {\n        name \"Alex\"\n        avatar {\n          summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n          apparent_age \"25-35\"\n          gender_presentation \"male\"\n          ethnic_appearance \"Middle Eastern\"\n          face_shape \"round\"\n          jawline \"rounded\"\n          body_build \"stocky\"\n          skin_tone \"medium\"\n          complexion_details null\n          hair_color \"dark brown\"\n          hair_length \"short\"\n          hair_style \"thick and wavy, tousled\"\n          eye_color \"dark brown\"\n          eye_shape \"almond\"\n          eyebrows \"thick with a soft arch\"\n          nose_description \"broad with a rounded tip\"\n          lip_description \"medium width with a fuller lower lip\"\n          facial_hair \"short full beard\"\n          glasses true\n          glasses_style \"dark purple rectangular frames\"\n          distinctive_features [\"left ear piercing\"]\n          confidence 0.95\n          key_features [\"Thick-framed rectangular glasses\", \"Short full beard\", \"Thick, dark wavy hair\", \"Round face shape\", \"Broad nose\"]\n        }\n        outfit {\n          style \"casual beach\"\n          top \"light blue linen shirt, unbuttoned\"\n          bottom \"khaki shorts\"\n          footwear \"barefoot\"\n          accessories [\"leather bracelet\", \"sunglasses on head\"]\n          color_scheme \"light blue, khaki, tan\"\n        }\n        expression \"relaxed and happy\"\n        signature_colors [\"blue\", \"tan\", \"white\"]\n      },\n      {\n        name \"Emma\"\n        avatar {\n          summary \"A woman with long auburn hair, green eyes, and light freckles.\"\n          apparent_age \"20-30\"\n          gender_presentation \"female\"\n          ethnic_appearance \"European\"\n          face_shape \"oval\"\n          jawline \"soft\"\n          body_build \"slim\"\n          skin_tone \"light\"\n          complexion_details \"light freckles\"\n          hair_color \"auburn\"\n          hair_length \"long\"\n          hair_style \"wavy layers with red highlights\"\n          eye_color \"green\"\n          eye_shape \"round\"\n          eyebrows \"medium natural arch\"\n          nose_description \"narrow and refined\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"Light freckles\", \"Dimples on both cheeks\", \"Earlobe piercings\"]\n          confidence 0.92\n          key_features [\"Long wavy auburn hair\", \"Bright green eyes\", \"Light freckles\", \"Dimples\", \"Oval face\"]\n        }\n        outfit {\n          style \"beach casual\"\n          top \"white sundress with floral patterns\"\n          bottom null\n          footwear \"sandals\"\n          accessories [\"straw sun hat\", \"shell necklace\"]\n          color_scheme \"white, light pink, natural straw\"\n        }\n        expression \"joyful\"\n        signature_colors [\"white\", \"pink\", \"coral\"]\n      },\n      {\n        name \"Marcus\"\n        avatar {\n          summary \"A tall young man with short curly black hair, warm brown eyes, and a bright smile.\"\n          apparent_age \"22-28\"\n          gender_presentation \"male\"\n          ethnic_appearance \"African\"\n          face_shape \"rectangular\"\n          jawline \"defined\"\n          body_build \"athletic\"\n          skin_tone \"dark\"\n          complexion_details null\n          hair_color \"black\"\n          hair_length \"short\"\n          hair_style \"tight curls, well-groomed\"\n          eye_color \"brown\"\n          eye_shape \"round\"\n          eyebrows \"medium thickness, straight\"\n          nose_description \"medium width with straight bridge\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"small scar on right eyebrow\", \"diamond stud earrings\"]\n          confidence 0.93\n          key_features [\"Short curly hair\", \"Athletic build\", \"Bright smile\", \"Diamond studs\", \"Defined jawline\"]\n        }\n        outfit {\n          style \"beach casual\"\n          top \"red tank top\"\n          bottom \"navy board shorts\"\n          footwear \"flip flops\"\n          accessories [\"silver chain necklace\", \"sports watch\"]\n          color_scheme \"red, navy, silver\"\n        }\n        expression \"cheerful and laughing\"\n        signature_colors [\"red\", \"navy\", \"white\"]\n      }\n    ]\n  }\n}\n\n// Test 5: Beach bonfire - Continuation of beach hangout at sunset\ntest BeachBonfireTest {\n  functions [GenerateScene]\n  args {\n    scene_prompt \"The same three friends now gathered around a cozy beach bonfire as the sun sets. They're roasting marshmallows, telling stories, with guitars and blankets scattered around. The fire's warm glow illuminates their faces against the purple-orange twilight sky, waves gently lapping in the background\"\n    art_style \"studio ghibli art style, anime style, cel-shaded, warm sunset colors, magical lighting\"\n    characters [\n      {\n        name \"Alex\"\n        avatar {\n          summary \"A person with short, thick, dark wavy hair, dark brown eyes, a short full beard, and rectangular glasses on a round face.\"\n          apparent_age \"25-35\"\n          gender_presentation \"male\"\n          ethnic_appearance \"Middle Eastern\"\n          face_shape \"round\"\n          jawline \"rounded\"\n          body_build \"stocky\"\n          skin_tone \"medium\"\n          complexion_details null\n          hair_color \"dark brown\"\n          hair_length \"short\"\n          hair_style \"thick and wavy, tousled\"\n          eye_color \"dark brown\"\n          eye_shape \"almond\"\n          eyebrows \"thick with a soft arch\"\n          nose_description \"broad with a rounded tip\"\n          lip_description \"medium width with a fuller lower lip\"\n          facial_hair \"short full beard\"\n          glasses true\n          glasses_style \"dark purple rectangular frames\"\n          distinctive_features [\"left ear piercing\"]\n          confidence 0.95\n          key_features [\"Thick-framed rectangular glasses\", \"Short full beard\", \"Thick, dark wavy hair\", \"Round face shape\", \"Broad nose\"]\n        }\n        outfit {\n          style \"casual evening beach\"\n          top \"navy hoodie over the light blue shirt\"\n          bottom \"same khaki shorts\"\n          footwear \"barefoot\"\n          accessories [\"leather bracelet\", \"marshmallow roasting stick\"]\n          color_scheme \"navy, light blue, khaki\"\n        }\n        expression \"content, storytelling\"\n        signature_colors [\"navy\", \"blue\", \"tan\"]\n      },\n      {\n        name \"Emma\"\n        avatar {\n          summary \"A woman with long auburn hair, green eyes, and light freckles.\"\n          apparent_age \"20-30\"\n          gender_presentation \"female\"\n          ethnic_appearance \"European\"\n          face_shape \"oval\"\n          jawline \"soft\"\n          body_build \"slim\"\n          skin_tone \"light\"\n          complexion_details \"light freckles\"\n          hair_color \"auburn\"\n          hair_length \"long\"\n          hair_style \"wavy layers with red highlights\"\n          eye_color \"green\"\n          eye_shape \"round\"\n          eyebrows \"medium natural arch\"\n          nose_description \"narrow and refined\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"Light freckles\", \"Dimples on both cheeks\", \"Earlobe piercings\"]\n          confidence 0.92\n          key_features [\"Long wavy auburn hair\", \"Bright green eyes\", \"Light freckles\", \"Dimples\", \"Oval face\"]\n        }\n        outfit {\n          style \"cozy beach evening\"\n          top \"cream knit cardigan over white sundress\"\n          bottom null\n          footwear \"barefoot, sandals beside her\"\n          accessories [\"shell necklace\", \"flower crown made of beach flowers\"]\n          color_scheme \"cream, white, natural tones\"\n        }\n        expression \"listening intently, soft smile\"\n        signature_colors [\"cream\", \"white\", \"coral\"]\n      },\n      {\n        name \"Marcus\"\n        avatar {\n          summary \"A tall young man with short curly black hair, warm brown eyes, and a bright smile.\"\n          apparent_age \"22-28\"\n          gender_presentation \"male\"\n          ethnic_appearance \"African\"\n          face_shape \"rectangular\"\n          jawline \"defined\"\n          body_build \"athletic\"\n          skin_tone \"dark\"\n          complexion_details null\n          hair_color \"black\"\n          hair_length \"short\"\n          hair_style \"tight curls, well-groomed\"\n          eye_color \"brown\"\n          eye_shape \"round\"\n          eyebrows \"medium thickness, straight\"\n          nose_description \"medium width with straight bridge\"\n          lip_description \"full\"\n          facial_hair null\n          glasses false\n          glasses_style null\n          distinctive_features [\"small scar on right eyebrow\", \"diamond stud earrings\"]\n          confidence 0.93\n          key_features [\"Short curly hair\", \"Athletic build\", \"Bright smile\", \"Diamond studs\", \"Defined jawline\"]\n        }\n        outfit {\n          style \"relaxed beach evening\"\n          top \"red tank top with gray zip-up jacket\"\n          bottom \"navy board shorts\"\n          footwear \"barefoot\"\n          accessories [\"silver chain necklace\", \"acoustic guitar beside him\"]\n          color_scheme \"red, gray, navy\"\n        }\n        expression \"playing guitar, focused but happy\"\n        signature_colors [\"red\", \"gray\", \"navy\"]\n      }\n    ]\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}