/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, FunctionResult, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog,
HTTPRequest } from "@boundaryml/baml"
import { toBamlError, BamlStream, BamlAbortError, Collector } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {AppConcept, AppConceptsOutput, AppScreenPromptsOutput, AppStructure, Avatar, Background, BasicResponse, Character, CharacterInScene, Composition, CoverImagePrompt, DemoAppOutput, DetailedResponse, DeviceImageScore, DeviceSpec, FontStyle, HeaderText, ImprovedDescriptionOutput, LayoutConfig, ModelTestResponse, Outfit, PromptStructure, PromptStyle, PromptTechnical, Scene, ScreenDetail, ScreenImagePrompt, ScreenshotConfig, ScreenshotPromptStructured, ScreenshotSetInput, ScreenshotTreatment, StyleColors, StyleConfig, StyleDemoOutput, StyleDemoScreenshotConfig, StyleEffects, StyleGenerationOutput, StyleRevisionOutput, StyleTypography, Subject, TabStructure, TextConfig, VisionTestResponse} from "./types"
import type TypeBuilder from "./type_builder"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX,
DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"
import type * as events from "./events"

/**
* @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
*/
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

    type TickReason = "Unknown";

    type BamlCallOptions<EventsT = never> = {
    tb?: TypeBuilder
    clientRegistry?: ClientRegistry
    collector?: Collector | Collector[]
    env?: Record<string, string | undefined>
      tags?: Record<string, string>
        signal?: AbortSignal
        onTick?: (reason: TickReason, log: FunctionLog | null) => void
        events?: EventsT
        }

        export class BamlAsyncClient {
        private runtime: BamlRuntime
        private ctxManager: BamlCtxManager
        private streamClient: BamlStreamClient
        private httpRequest: AsyncHttpRequest
        private httpStreamRequest: AsyncHttpStreamRequest
        private llmResponseParser: LlmResponseParser
        private llmStreamParser: LlmStreamParser
        private bamlOptions: BamlCallOptions

        constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
        this.runtime = runtime
        this.ctxManager = ctxManager
        this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
        this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
        this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
        this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
        this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
        this.bamlOptions = bamlOptions || {}
        }

        withOptions(bamlOptions: BamlCallOptions) {
        return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
        }

        get stream() {
        return this.streamClient
        }

        get request() {
        return this.httpRequest
        }

        get streamRequest() {
        return this.httpStreamRequest
        }

        get parse() {
        return this.llmResponseParser
        }

        get parseStream() {
        return this.llmStreamParser
        }

        
        async AnalyzeAvatar(
        image: Image,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.Avatar> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.AnalyzeAvatar(
          image,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "AnalyzeAvatar",
            {
            "image": image
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.Avatar
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async DetailedAnalysisGPT5(
        query: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.DetailedResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.DetailedAnalysisGPT5(
          query,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "DetailedAnalysisGPT5",
            {
            "query": query
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.DetailedResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async DetailedAnalysisGPT5Nano(
        query: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.DetailedResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.DetailedAnalysisGPT5Nano(
          query,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "DetailedAnalysisGPT5Nano",
            {
            "query": query
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.DetailedResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateApp(
        app_description_input?: string | null,category_hint?: string | null,ui_style?: string | null,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.DemoAppOutput> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateApp(
          app_description_input,category_hint,ui_style,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateApp",
            {
            "app_description_input": app_description_input?? null,"category_hint": category_hint?? null,"ui_style": ui_style?? null
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.DemoAppOutput
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateAppConcepts(
        app_description_input: string,category_hint?: string | null,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.AppConceptsOutput> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateAppConcepts(
          app_description_input,category_hint,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateAppConcepts",
            {
            "app_description_input": app_description_input,"category_hint": category_hint?? null
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.AppConceptsOutput
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateAppCoverImagePrompt(
        app_name: string,app_description: string,app_category?: string | null,style_guide?: string | null,screen_names: string[],user_feedback?: string | null,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.CoverImagePrompt> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateAppCoverImagePrompt(
          app_name,app_description,app_category,style_guide,screen_names,user_feedback,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateAppCoverImagePrompt",
            {
            "app_name": app_name,"app_description": app_description,"app_category": app_category?? null,"style_guide": style_guide?? null,"screen_names": screen_names,"user_feedback": user_feedback?? null
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.CoverImagePrompt
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateAppDesignPlan(
        app_name: string,app_description: string,app_category: string,style_guide: string,num_screens: number,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.AppStructure> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateAppDesignPlan(
          app_name,app_description,app_category,style_guide,num_screens,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateAppDesignPlan",
            {
            "app_name": app_name,"app_description": app_description,"app_category": app_category,"style_guide": style_guide,"num_screens": num_screens
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.AppStructure
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateFirstScreenImagePrompt(
        app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ScreenImagePrompt> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateFirstScreenImagePrompt(
          app_name,style_guide,common_layout,tabs,screen_detail,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateFirstScreenImagePrompt",
            {
            "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ScreenImagePrompt
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateScene(
        scene_prompt: string,art_style: string,characters: types.Character[],
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.Scene> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateScene(
          scene_prompt,art_style,characters,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateScene",
            {
            "scene_prompt": scene_prompt,"art_style": art_style,"characters": characters
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.Scene
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateScreenImagePromptWithReference(
        app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ScreenImagePrompt> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateScreenImagePromptWithReference(
          app_name,style_guide,common_layout,tabs,screen_detail,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateScreenImagePromptWithReference",
            {
            "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ScreenImagePrompt
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateScreenshotPrompt(
        text: types.TextConfig,layout: types.LayoutConfig,style: types.StyleConfig,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ScreenshotPromptStructured> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateScreenshotPrompt(
          text,layout,style,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateScreenshotPrompt",
            {
            "text": text,"layout": layout,"style": style
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ScreenshotPromptStructured
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateScreenshotSet(
        input: types.ScreenshotSetInput,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ScreenshotConfig[]> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateScreenshotSet(
          input,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateScreenshotSet",
            {
            "input": input
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ScreenshotConfig[]
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateStyleDemoScreenshots(
        style_config: types.StyleConfig,style_name: string,screenshot_count?: number | null,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.StyleDemoOutput> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateStyleDemoScreenshots(
          style_config,style_name,screenshot_count,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateStyleDemoScreenshots",
            {
            "style_config": style_config,"style_name": style_name,"screenshot_count": screenshot_count?? null
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.StyleDemoOutput
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async GenerateStyleFromDescription(
        description: string,style_name?: string | null,reference_image?: Image | null,background_style?: string | null,text_style?: string | null,device_style?: string | null,decorative_elements?: string | null,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.StyleGenerationOutput> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.GenerateStyleFromDescription(
          description,style_name,reference_image,background_style,text_style,device_style,decorative_elements,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "GenerateStyleFromDescription",
            {
            "description": description,"style_name": style_name?? null,"reference_image": reference_image?? null,"background_style": background_style?? null,"text_style": text_style?? null,"device_style": device_style?? null,"decorative_elements": decorative_elements?? null
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.StyleGenerationOutput
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async ImproveAppDescription(
        draft_description: string,vibe_hint?: string | null,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ImprovedDescriptionOutput> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.ImproveAppDescription(
          draft_description,vibe_hint,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "ImproveAppDescription",
            {
            "draft_description": draft_description,"vibe_hint": vibe_hint?? null
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ImprovedDescriptionOutput
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async ListGeneratorGPT5(
        topic: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<string[]> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.ListGeneratorGPT5(
          topic,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "ListGeneratorGPT5",
            {
            "topic": topic
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as string[]
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async ListGeneratorGPT5Nano(
        topic: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<string[]> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.ListGeneratorGPT5Nano(
          topic,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "ListGeneratorGPT5Nano",
            {
            "topic": topic
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as string[]
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async ReviseStyle(
        current_style: types.StyleGenerationOutput,revision_prompt: string,new_style_name?: string | null,reference_image?: Image | null,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.StyleRevisionOutput> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.ReviseStyle(
          current_style,revision_prompt,new_style_name,reference_image,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "ReviseStyle",
            {
            "current_style": current_style,"revision_prompt": revision_prompt,"new_style_name": new_style_name?? null,"reference_image": reference_image?? null
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.StyleRevisionOutput
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async ScoreDeviceReferenceImage(
        device_image: Image,expected_frame_style: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.DeviceImageScore> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.ScoreDeviceReferenceImage(
          device_image,expected_frame_style,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "ScoreDeviceReferenceImage",
            {
            "device_image": device_image,"expected_frame_style": expected_frame_style
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.DeviceImageScore
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async SimpleStringGPT5(
        input: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<string> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.SimpleStringGPT5(
          input,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "SimpleStringGPT5",
            {
            "input": input
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as string
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async SimpleStringGPT5Nano(
        input: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<string> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.SimpleStringGPT5Nano(
          input,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "SimpleStringGPT5Nano",
            {
            "input": input
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as string
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async StructuredResponseGPT5(
        question: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.BasicResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.StructuredResponseGPT5(
          question,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "StructuredResponseGPT5",
            {
            "question": question
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.BasicResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async StructuredResponseGPT5Nano(
        question: string,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.BasicResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.StructuredResponseGPT5Nano(
          question,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "StructuredResponseGPT5Nano",
            {
            "question": question
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.BasicResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestClaudeHaiku(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestClaudeHaiku(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestClaudeHaiku",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestClaudeSonnet4(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestClaudeSonnet4(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestClaudeSonnet4",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestGPT5(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestGPT5(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestGPT5",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestGPT5Mini(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestGPT5Mini(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestGPT5Mini",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestGPT5Nano(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestGPT5Nano(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestGPT5Nano",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestGemini20FlashExp(
        image: Image,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.VisionTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestGemini20FlashExp(
          image,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestGemini20FlashExp",
            {
            "image": image
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.VisionTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestGemini25Flash(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestGemini25Flash(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestGemini25Flash",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestGemini25FlashLite(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestGemini25FlashLite(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestGemini25FlashLite",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestGemini25Pro(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestGemini25Pro(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestGemini25Pro",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestLlama32Vision(
        image: Image,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.VisionTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestLlama32Vision(
          image,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestLlama32Vision",
            {
            "image": image
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.VisionTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestMistralLarge(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestMistralLarge(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestMistralLarge",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestMistralSmall(
        
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.ModelTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestMistralSmall(
          
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestMistralSmall",
            {
            
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.ModelTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
        async TestQwen25VL(
        image: Image,
        __baml_options__?: BamlCallOptions<never>
        ): Promise<types.VisionTestResponse> {
          try {
          const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
          const signal = options.signal;

          if (signal?.aborted) {
          throw new BamlAbortError('Operation was aborted', signal.reason);
          }

          // Check if onTick is provided - route through streaming if so
          if (options.onTick) {
          const stream = this.stream.TestQwen25VL(
          image,
          __baml_options__
          );

          return await stream.getFinalResponse();
          }

          const collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
          [options.collector]) : [];
          const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
          const env: Record<string, string> = Object.fromEntries(
            Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
            );
            const raw = await this.runtime.callFunction(
            "TestQwen25VL",
            {
            "image": image
            },
            this.ctxManager.cloneContext(),
            options.tb?.__tb(),
            options.clientRegistry,
            collector,
            options.tags || {},
            env,
            signal,
            options.events,
            )
            return raw.parsed(false) as types.VisionTestResponse
            } catch (error) {
            throw toBamlError(error);
            }
            }
            
            }

            class BamlStreamClient {
            private runtime: BamlRuntime
            private ctxManager: BamlCtxManager
            private bamlOptions: BamlCallOptions

            constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
            this.runtime = runtime
            this.ctxManager = ctxManager
            this.bamlOptions = bamlOptions || {}
            }

            
            AnalyzeAvatar(
            image: Image,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.Avatar, types.Avatar>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for AnalyzeAvatar", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "AnalyzeAvatar",
                {
                "image": image
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.Avatar, types.Avatar>(
                  raw,
                  (a): partial_types.Avatar => a,
                  (a): types.Avatar => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            DetailedAnalysisGPT5(
            query: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.DetailedResponse, types.DetailedResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for DetailedAnalysisGPT5", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "DetailedAnalysisGPT5",
                {
                "query": query
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.DetailedResponse, types.DetailedResponse>(
                  raw,
                  (a): partial_types.DetailedResponse => a,
                  (a): types.DetailedResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            DetailedAnalysisGPT5Nano(
            query: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.DetailedResponse, types.DetailedResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for DetailedAnalysisGPT5Nano", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "DetailedAnalysisGPT5Nano",
                {
                "query": query
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.DetailedResponse, types.DetailedResponse>(
                  raw,
                  (a): partial_types.DetailedResponse => a,
                  (a): types.DetailedResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateApp(
            app_description_input?: string | null,category_hint?: string | null,ui_style?: string | null,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.DemoAppOutput, types.DemoAppOutput>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateApp", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateApp",
                {
                "app_description_input": app_description_input ?? null,"category_hint": category_hint ?? null,"ui_style": ui_style ?? null
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.DemoAppOutput, types.DemoAppOutput>(
                  raw,
                  (a): partial_types.DemoAppOutput => a,
                  (a): types.DemoAppOutput => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateAppConcepts(
            app_description_input: string,category_hint?: string | null,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.AppConceptsOutput, types.AppConceptsOutput>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateAppConcepts", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateAppConcepts",
                {
                "app_description_input": app_description_input,"category_hint": category_hint ?? null
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.AppConceptsOutput, types.AppConceptsOutput>(
                  raw,
                  (a): partial_types.AppConceptsOutput => a,
                  (a): types.AppConceptsOutput => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateAppCoverImagePrompt(
            app_name: string,app_description: string,app_category?: string | null,style_guide?: string | null,screen_names: string[],user_feedback?: string | null,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.CoverImagePrompt, types.CoverImagePrompt>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateAppCoverImagePrompt", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateAppCoverImagePrompt",
                {
                "app_name": app_name,"app_description": app_description,"app_category": app_category ?? null,"style_guide": style_guide ?? null,"screen_names": screen_names,"user_feedback": user_feedback ?? null
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.CoverImagePrompt, types.CoverImagePrompt>(
                  raw,
                  (a): partial_types.CoverImagePrompt => a,
                  (a): types.CoverImagePrompt => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateAppDesignPlan(
            app_name: string,app_description: string,app_category: string,style_guide: string,num_screens: number,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.AppStructure, types.AppStructure>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateAppDesignPlan", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateAppDesignPlan",
                {
                "app_name": app_name,"app_description": app_description,"app_category": app_category,"style_guide": style_guide,"num_screens": num_screens
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.AppStructure, types.AppStructure>(
                  raw,
                  (a): partial_types.AppStructure => a,
                  (a): types.AppStructure => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateFirstScreenImagePrompt(
            app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ScreenImagePrompt, types.ScreenImagePrompt>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateFirstScreenImagePrompt", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateFirstScreenImagePrompt",
                {
                "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ScreenImagePrompt, types.ScreenImagePrompt>(
                  raw,
                  (a): partial_types.ScreenImagePrompt => a,
                  (a): types.ScreenImagePrompt => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateScene(
            scene_prompt: string,art_style: string,characters: types.Character[],
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.Scene, types.Scene>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateScene", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateScene",
                {
                "scene_prompt": scene_prompt,"art_style": art_style,"characters": characters
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.Scene, types.Scene>(
                  raw,
                  (a): partial_types.Scene => a,
                  (a): types.Scene => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateScreenImagePromptWithReference(
            app_name: string,style_guide: string,common_layout: string,tabs: types.TabStructure,screen_detail: types.ScreenDetail,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ScreenImagePrompt, types.ScreenImagePrompt>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateScreenImagePromptWithReference", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateScreenImagePromptWithReference",
                {
                "app_name": app_name,"style_guide": style_guide,"common_layout": common_layout,"tabs": tabs,"screen_detail": screen_detail
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ScreenImagePrompt, types.ScreenImagePrompt>(
                  raw,
                  (a): partial_types.ScreenImagePrompt => a,
                  (a): types.ScreenImagePrompt => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateScreenshotPrompt(
            text: types.TextConfig,layout: types.LayoutConfig,style: types.StyleConfig,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ScreenshotPromptStructured, types.ScreenshotPromptStructured>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateScreenshotPrompt", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateScreenshotPrompt",
                {
                "text": text,"layout": layout,"style": style
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ScreenshotPromptStructured, types.ScreenshotPromptStructured>(
                  raw,
                  (a): partial_types.ScreenshotPromptStructured => a,
                  (a): types.ScreenshotPromptStructured => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateScreenshotSet(
            input: types.ScreenshotSetInput,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ScreenshotConfig[], types.ScreenshotConfig[]>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateScreenshotSet", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateScreenshotSet",
                {
                "input": input
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ScreenshotConfig[], types.ScreenshotConfig[]>(
                  raw,
                  (a): partial_types.ScreenshotConfig[] => a,
                  (a): types.ScreenshotConfig[] => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateStyleDemoScreenshots(
            style_config: types.StyleConfig,style_name: string,screenshot_count?: number | null,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.StyleDemoOutput, types.StyleDemoOutput>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateStyleDemoScreenshots", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateStyleDemoScreenshots",
                {
                "style_config": style_config,"style_name": style_name,"screenshot_count": screenshot_count ?? null
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.StyleDemoOutput, types.StyleDemoOutput>(
                  raw,
                  (a): partial_types.StyleDemoOutput => a,
                  (a): types.StyleDemoOutput => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            GenerateStyleFromDescription(
            description: string,style_name?: string | null,reference_image?: Image | null,background_style?: string | null,text_style?: string | null,device_style?: string | null,decorative_elements?: string | null,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.StyleGenerationOutput, types.StyleGenerationOutput>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for GenerateStyleFromDescription", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "GenerateStyleFromDescription",
                {
                "description": description,"style_name": style_name ?? null,"reference_image": reference_image ?? null,"background_style": background_style ?? null,"text_style": text_style ?? null,"device_style": device_style ?? null,"decorative_elements": decorative_elements ?? null
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.StyleGenerationOutput, types.StyleGenerationOutput>(
                  raw,
                  (a): partial_types.StyleGenerationOutput => a,
                  (a): types.StyleGenerationOutput => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            ImproveAppDescription(
            draft_description: string,vibe_hint?: string | null,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ImprovedDescriptionOutput, types.ImprovedDescriptionOutput>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for ImproveAppDescription", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "ImproveAppDescription",
                {
                "draft_description": draft_description,"vibe_hint": vibe_hint ?? null
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ImprovedDescriptionOutput, types.ImprovedDescriptionOutput>(
                  raw,
                  (a): partial_types.ImprovedDescriptionOutput => a,
                  (a): types.ImprovedDescriptionOutput => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            ListGeneratorGPT5(
            topic: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<string[], string[]>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for ListGeneratorGPT5", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "ListGeneratorGPT5",
                {
                "topic": topic
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<string[], string[]>(
                  raw,
                  (a): string[] => a,
                  (a): string[] => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            ListGeneratorGPT5Nano(
            topic: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<string[], string[]>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for ListGeneratorGPT5Nano", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "ListGeneratorGPT5Nano",
                {
                "topic": topic
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<string[], string[]>(
                  raw,
                  (a): string[] => a,
                  (a): string[] => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            ReviseStyle(
            current_style: types.StyleGenerationOutput,revision_prompt: string,new_style_name?: string | null,reference_image?: Image | null,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.StyleRevisionOutput, types.StyleRevisionOutput>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for ReviseStyle", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "ReviseStyle",
                {
                "current_style": current_style,"revision_prompt": revision_prompt,"new_style_name": new_style_name ?? null,"reference_image": reference_image ?? null
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.StyleRevisionOutput, types.StyleRevisionOutput>(
                  raw,
                  (a): partial_types.StyleRevisionOutput => a,
                  (a): types.StyleRevisionOutput => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            ScoreDeviceReferenceImage(
            device_image: Image,expected_frame_style: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.DeviceImageScore, types.DeviceImageScore>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for ScoreDeviceReferenceImage", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "ScoreDeviceReferenceImage",
                {
                "device_image": device_image,"expected_frame_style": expected_frame_style
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.DeviceImageScore, types.DeviceImageScore>(
                  raw,
                  (a): partial_types.DeviceImageScore => a,
                  (a): types.DeviceImageScore => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            SimpleStringGPT5(
            input: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<string, string>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for SimpleStringGPT5", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "SimpleStringGPT5",
                {
                "input": input
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<string, string>(
                  raw,
                  (a): string => a,
                  (a): string => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            SimpleStringGPT5Nano(
            input: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<string, string>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for SimpleStringGPT5Nano", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "SimpleStringGPT5Nano",
                {
                "input": input
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<string, string>(
                  raw,
                  (a): string => a,
                  (a): string => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            StructuredResponseGPT5(
            question: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.BasicResponse, types.BasicResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for StructuredResponseGPT5", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "StructuredResponseGPT5",
                {
                "question": question
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.BasicResponse, types.BasicResponse>(
                  raw,
                  (a): partial_types.BasicResponse => a,
                  (a): types.BasicResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            StructuredResponseGPT5Nano(
            question: string,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.BasicResponse, types.BasicResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for StructuredResponseGPT5Nano", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "StructuredResponseGPT5Nano",
                {
                "question": question
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.BasicResponse, types.BasicResponse>(
                  raw,
                  (a): partial_types.BasicResponse => a,
                  (a): types.BasicResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestClaudeHaiku(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestClaudeHaiku", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestClaudeHaiku",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestClaudeSonnet4(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestClaudeSonnet4", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestClaudeSonnet4",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestGPT5(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestGPT5", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestGPT5",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestGPT5Mini(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestGPT5Mini", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestGPT5Mini",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestGPT5Nano(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestGPT5Nano", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestGPT5Nano",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestGemini20FlashExp(
            image: Image,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.VisionTestResponse, types.VisionTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestGemini20FlashExp", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestGemini20FlashExp",
                {
                "image": image
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.VisionTestResponse, types.VisionTestResponse>(
                  raw,
                  (a): partial_types.VisionTestResponse => a,
                  (a): types.VisionTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestGemini25Flash(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestGemini25Flash", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestGemini25Flash",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestGemini25FlashLite(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestGemini25FlashLite", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestGemini25FlashLite",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestGemini25Pro(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestGemini25Pro", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestGemini25Pro",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestLlama32Vision(
            image: Image,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.VisionTestResponse, types.VisionTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestLlama32Vision", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestLlama32Vision",
                {
                "image": image
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.VisionTestResponse, types.VisionTestResponse>(
                  raw,
                  (a): partial_types.VisionTestResponse => a,
                  (a): types.VisionTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestMistralLarge(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestMistralLarge", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestMistralLarge",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestMistralSmall(
            
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestMistralSmall", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestMistralSmall",
                {
                
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.ModelTestResponse, types.ModelTestResponse>(
                  raw,
                  (a): partial_types.ModelTestResponse => a,
                  (a): types.ModelTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
            TestQwen25VL(
            image: Image,
            __baml_options__?: BamlCallOptions<never>
            ): BamlStream<partial_types.VisionTestResponse, types.VisionTestResponse>
              {
              try {
              const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
              const signal = options.signal;

              if (signal?.aborted) {
              throw new BamlAbortError('Operation was aborted', signal.reason);
              }

              let collector = options.collector ? (Array.isArray(options.collector) ? options.collector :
              [options.collector]) : [];

              let onTickWrapper: (() => void) | undefined;

              // Create collector and wrap onTick if provided
              if (options.onTick) {
              const tickCollector = new Collector("on-tick-collector");
              collector = [...collector, tickCollector];

              onTickWrapper = () => {
              const log = tickCollector.last;
              if (log) {
              try {
              options.onTick!("Unknown", log);
              } catch (error) {
              console.error("Error in onTick callback for TestQwen25VL", error);
              }
              }
              };
              }

              const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
              const env: Record<string, string> = Object.fromEntries(
                Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
                );
                const raw = this.runtime.streamFunction(
                "TestQwen25VL",
                {
                "image": image
                },
                undefined,
                this.ctxManager.cloneContext(),
                options.tb?.__tb(),
                options.clientRegistry,
                collector,
                options.tags || {},
                env,
                signal,
                onTickWrapper,
                )
                return new BamlStream<partial_types.VisionTestResponse, types.VisionTestResponse>(
                  raw,
                  (a): partial_types.VisionTestResponse => a,
                  (a): types.VisionTestResponse => a,
                  this.ctxManager.cloneContext(),
                  options.signal,
                  )
                  } catch (error) {
                  throw toBamlError(error);
                  }
                  }
                  
                  }

                  export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
                  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)