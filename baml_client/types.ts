/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface AppConcept {
  app_name: string
  app_subtitle: string
  app_description: string
  app_category: string
  colors: StyleColors
  typography: StyleTypography
  effects: StyleEffects
  style_description: string
  app_icon_prompt: string
  cover_image_prompt: string
  
}

export interface AppConceptsOutput {
  concepts: AppConcept[]
  
}

export interface AppScreenPromptsOutput {
  app_screen_prompts: string[]
  
}

export interface AppStructure {
  tabs: TabStructure
  common_layout_elements: string
  screens: ScreenDetail[]
  
}

export interface CoverImagePrompt {
  image_prompt: string
  style_notes: string
  
}

export interface CoverVideoPrompt {
  video_prompt: string
  
}

export interface DemoAppOutput {
  app_name: string
  app_subtitle: string
  app_description: string
  app_category: string
  app_icon_prompt: string
  style_guide: string
  
}

export interface ImprovedDescriptionOutput {
  improved_description: string
  improved_style: string
  inferred_category: string
  
}

export interface ModelTestResponse {
  model_name: string
  response_text: string
  character_count: number
  passed: boolean
  
}

export interface ScreenDetail {
  screen_name: string
  purpose: string
  layout_type: string
  unique_elements: string
  active_tab_index?: number | null
  
}

export interface ScreenImagePrompt {
  canvas_edit_prompt: string
  
}

export interface StyleColors {
  primary: string
  background: string
  text: string
  accent: string
  
}

export interface StyleEffects {
  cornerRadius: string
  shadowStyle: string
  designPhilosophy: string
  
}

export interface StyleTypography {
  headlineFont: string
  headlineSize: string
  headlineWeight: string
  bodyFont: string
  bodySize: string
  bodyWeight: string
  
}

export interface TabStructure {
  has_tabs: boolean
  tab_names: string[]
  tab_icon_descriptions: string[]
  active_tab_color: string
  inactive_tab_color: string
  active_icon_style: string
  inactive_icon_style: string
  selection_indicator: string
  tab_bar_height: number
  icon_size: number
  label_size: number
  
}

export interface VisionTestResponse {
  model_name: string
  can_see_image: boolean
  description: string
  object_count: number
  
}
